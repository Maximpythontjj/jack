--- a/net/minecraft/core/dispenser/MinecartDispenseItemBehavior.java
+++ b/net/minecraft/core/dispenser/MinecartDispenseItemBehavior.java
@@ -6,15 +6,23 @@
 import net.minecraft.tags.BlockTags;
 import net.minecraft.world.entity.EntitySpawnReason;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.BaseRailBlock;
+import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.DispenserBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.RailShape;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+// CraftBukkit end
 
 public class MinecartDispenseItemBehavior extends DefaultDispenseItemBehavior {
+
     private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
     private final EntityType<? extends AbstractMinecart> entityType;
 
@@ -24,52 +32,91 @@
 
     @Override
     public ItemStack execute(BlockSource pointer, ItemStack stack) {
-        Direction direction = pointer.state().getValue(DispenserBlock.FACING);
-        ServerLevel serverLevel = pointer.level();
-        Vec3 vec3 = pointer.center();
-        double d = vec3.x() + (double)direction.getStepX() * 1.125;
-        double e = Math.floor(vec3.y()) + (double)direction.getStepY();
-        double f = vec3.z() + (double)direction.getStepZ() * 1.125;
-        BlockPos blockPos = pointer.pos().relative(direction);
-        BlockState blockState = serverLevel.getBlockState(blockPos);
-        double g;
-        if (blockState.is(BlockTags.RAILS)) {
-            if (getRailShape(blockState).isSlope()) {
-                g = 0.6;
+        Direction enumdirection = (Direction) pointer.state().getValue(DispenserBlock.FACING);
+        ServerLevel worldserver = pointer.level();
+        Vec3 vec3d = pointer.center();
+        double d0 = vec3d.x() + (double) enumdirection.getStepX() * 1.125D;
+        double d1 = Math.floor(vec3d.y()) + (double) enumdirection.getStepY();
+        double d2 = vec3d.z() + (double) enumdirection.getStepZ() * 1.125D;
+        BlockPos blockposition = pointer.pos().relative(enumdirection);
+        BlockState iblockdata = worldserver.getBlockState(blockposition);
+        double d3;
+
+        if (iblockdata.is(BlockTags.RAILS)) {
+            if (MinecartDispenseItemBehavior.getRailShape(iblockdata).isSlope()) {
+                d3 = 0.6D;
             } else {
-                g = 0.1;
+                d3 = 0.1D;
             }
         } else {
-            if (!blockState.isAir()) {
+            if (!iblockdata.isAir()) {
                 return this.defaultDispenseItemBehavior.dispense(pointer, stack);
             }
 
-            BlockState blockState2 = serverLevel.getBlockState(blockPos.below());
-            if (!blockState2.is(BlockTags.RAILS)) {
+            BlockState iblockdata1 = worldserver.getBlockState(blockposition.below());
+
+            if (!iblockdata1.is(BlockTags.RAILS)) {
                 return this.defaultDispenseItemBehavior.dispense(pointer, stack);
             }
 
-            if (direction != Direction.DOWN && getRailShape(blockState2).isSlope()) {
-                g = -0.4;
+            if (enumdirection != Direction.DOWN && MinecartDispenseItemBehavior.getRailShape(iblockdata1).isSlope()) {
+                d3 = -0.4D;
             } else {
-                g = -0.9;
+                d3 = -0.9D;
             }
         }
 
-        Vec3 vec32 = new Vec3(d, e + g, f);
-        AbstractMinecart abstractMinecart = AbstractMinecart.createMinecart(
-            serverLevel, vec32.x, vec32.y, vec32.z, this.entityType, EntitySpawnReason.DISPENSER, stack, null
-        );
-        if (abstractMinecart != null) {
-            serverLevel.addFreshEntity(abstractMinecart);
-            stack.shrink(1);
+        Vec3 vec3d1 = new Vec3(d0, d1 + d3, d2);
+        // CraftBukkit start
+        // EntityMinecartAbstract entityminecartabstract = EntityMinecartAbstract.createMinecart(worldserver, vec3d1.x, vec3d1.y, vec3d1.z, this.entityType, EntitySpawnReason.DISPENSER, itemstack, (EntityHuman) null);
+        ItemStack itemstack1 = stack.copyWithCount(1); // Paper - shrink below and single item in event
+        org.bukkit.block.Block block2 = CraftBlock.at(worldserver, pointer.pos());
+        CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+        BlockDispenseEvent event = new BlockDispenseEvent(block2, craftItem.clone(), new org.bukkit.util.Vector(vec3d1.x, vec3d1.y, vec3d1.z));
+        if (!DispenserBlock.eventFired) {
+            worldserver.getCraftServer().getPluginManager().callEvent(event);
+        }
+
+        if (event.isCancelled()) {
+            // stack.grow(1); // Paper - shrink below
+            return stack;
+        }
+
+        boolean shrink = true; // Paper
+        if (!event.getItem().equals(craftItem)) {
+            shrink = false; // Paper - shrink below
+            // Chain to handler for new item
+            ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+            DispenseItemBehavior idispensebehavior = DispenserBlock.getDispenseBehavior(pointer, eventStack); // Paper - Fix NPE with equippable and items without behavior
+            if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                idispensebehavior.dispense(pointer, eventStack);
+                return stack;
+            }
+        }
+
+        itemstack1 = CraftItemStack.asNMSCopy(event.getItem());
+        AbstractMinecart entityminecartabstract = AbstractMinecart.createMinecart(worldserver, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), this.entityType, EntitySpawnReason.DISPENSER, itemstack1, (Player) null);
+
+        if (entityminecartabstract != null) {
+            if (worldserver.addFreshEntity(entityminecartabstract) && shrink) stack.shrink(1); // Paper - if entity add was successful and supposed to shrink
+            // CraftBukkit end
         }
 
         return stack;
     }
 
     private static RailShape getRailShape(BlockState state) {
-        return state.getBlock() instanceof BaseRailBlock baseRailBlock ? state.getValue(baseRailBlock.getShapeProperty()) : RailShape.NORTH_SOUTH;
+        Block block = state.getBlock();
+        RailShape blockpropertytrackposition;
+
+        if (block instanceof BaseRailBlock blockminecarttrackabstract) {
+            blockpropertytrackposition = (RailShape) state.getValue(blockminecarttrackabstract.getShapeProperty());
+        } else {
+            blockpropertytrackposition = RailShape.NORTH_SOUTH;
+        }
+
+        return blockpropertytrackposition;
     }
 
     @Override
