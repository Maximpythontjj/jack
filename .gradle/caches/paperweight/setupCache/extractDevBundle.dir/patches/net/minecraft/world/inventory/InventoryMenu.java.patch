--- a/net/minecraft/world/inventory/InventoryMenu.java
+++ b/net/minecraft/world/inventory/InventoryMenu.java
@@ -3,6 +3,7 @@
 import com.mojang.datafixers.util.Pair;
 import java.util.List;
 import java.util.Map;
+import net.minecraft.network.chat.Component;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.Container;
@@ -10,8 +11,14 @@
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.crafting.RecipeHolder;
+import net.minecraft.world.level.Level;
+import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+// CraftBukkit end
 
 public class InventoryMenu extends AbstractCraftingMenu {
+
     public static final int CONTAINER_ID = 0;
     public static final int RESULT_SLOT = 0;
     private static final int CRAFTING_GRID_WIDTH = 2;
@@ -33,35 +40,33 @@
     public static final ResourceLocation EMPTY_ARMOR_SLOT_LEGGINGS = ResourceLocation.withDefaultNamespace("item/empty_armor_slot_leggings");
     public static final ResourceLocation EMPTY_ARMOR_SLOT_BOOTS = ResourceLocation.withDefaultNamespace("item/empty_armor_slot_boots");
     public static final ResourceLocation EMPTY_ARMOR_SLOT_SHIELD = ResourceLocation.withDefaultNamespace("item/empty_armor_slot_shield");
-    private static final Map<EquipmentSlot, ResourceLocation> TEXTURE_EMPTY_SLOTS = Map.of(
-        EquipmentSlot.FEET,
-        EMPTY_ARMOR_SLOT_BOOTS,
-        EquipmentSlot.LEGS,
-        EMPTY_ARMOR_SLOT_LEGGINGS,
-        EquipmentSlot.CHEST,
-        EMPTY_ARMOR_SLOT_CHESTPLATE,
-        EquipmentSlot.HEAD,
-        EMPTY_ARMOR_SLOT_HELMET
-    );
+    private static final Map<EquipmentSlot, ResourceLocation> TEXTURE_EMPTY_SLOTS = Map.of(EquipmentSlot.FEET, InventoryMenu.EMPTY_ARMOR_SLOT_BOOTS, EquipmentSlot.LEGS, InventoryMenu.EMPTY_ARMOR_SLOT_LEGGINGS, EquipmentSlot.CHEST, InventoryMenu.EMPTY_ARMOR_SLOT_CHESTPLATE, EquipmentSlot.HEAD, InventoryMenu.EMPTY_ARMOR_SLOT_HELMET);
     private static final EquipmentSlot[] SLOT_IDS = new EquipmentSlot[]{EquipmentSlot.HEAD, EquipmentSlot.CHEST, EquipmentSlot.LEGS, EquipmentSlot.FEET};
     public final boolean active;
     private final Player owner;
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    // CraftBukkit end
 
-    public InventoryMenu(Inventory inventory, boolean onServer, Player owner) {
-        super(null, 0, 2, 2);
+    public InventoryMenu(Inventory inventory, boolean onServer, final Player owner) {
+        // CraftBukkit start
+        super((MenuType) null, 0, 2, 2, inventory); // CraftBukkit - save player
+        this.setTitle(Component.translatable("container.crafting")); // SPIGOT-4722: Allocate title for player inventory
+        // CraftBukkit end
         this.active = onServer;
         this.owner = owner;
         this.addResultSlot(owner, 154, 28);
         this.addCraftingGridSlots(98, 18);
 
-        for (int i = 0; i < 4; i++) {
-            EquipmentSlot equipmentSlot = SLOT_IDS[i];
-            ResourceLocation resourceLocation = TEXTURE_EMPTY_SLOTS.get(equipmentSlot);
-            this.addSlot(new ArmorSlot(inventory, owner, equipmentSlot, 39 - i, 8, 8 + i * 18, resourceLocation));
+        for (int i = 0; i < 4; ++i) {
+            EquipmentSlot enumitemslot = InventoryMenu.SLOT_IDS[i];
+            ResourceLocation minecraftkey = (ResourceLocation) InventoryMenu.TEXTURE_EMPTY_SLOTS.get(enumitemslot);
+
+            this.addSlot(new ArmorSlot(inventory, owner, enumitemslot, 39 - i, 8, 8 + i * 18, minecraftkey));
         }
 
         this.addStandardInventorySlots(inventory, 8, 84);
-        this.addSlot(new Slot(inventory, 40, 77, 62) {
+        this.addSlot(new Slot(inventory, 40, 77, 62) { // CraftBukkit - decompile error
             @Override
             public void setByPlayer(ItemStack stack, ItemStack previousStack) {
                 owner.onEquipItem(EquipmentSlot.OFFHAND, previousStack, stack);
@@ -81,9 +86,12 @@
 
     @Override
     public void slotsChanged(Container inventory) {
-        if (this.owner.level() instanceof ServerLevel serverLevel) {
-            CraftingMenu.slotChangedCraftingGrid(this, serverLevel, this.owner, this.craftSlots, this.resultSlots, null);
+        Level world = this.owner.level();
+
+        if (world instanceof ServerLevel worldserver) {
+            CraftingMenu.slotChangedCraftingGrid(this, worldserver, this.owner, this.craftSlots, this.resultSlots, (RecipeHolder) null);
         }
+
     }
 
     @Override
@@ -102,64 +110,68 @@
 
     @Override
     public ItemStack quickMoveStack(Player player, int slot) {
-        ItemStack itemStack = ItemStack.EMPTY;
-        Slot slot2 = this.slots.get(slot);
-        if (slot2.hasItem()) {
-            ItemStack itemStack2 = slot2.getItem();
-            itemStack = itemStack2.copy();
-            EquipmentSlot equipmentSlot = player.getEquipmentSlotForItem(itemStack);
+        ItemStack itemstack = ItemStack.EMPTY;
+        Slot slot1 = (Slot) this.slots.get(slot);
+
+        if (slot1.hasItem()) {
+            ItemStack itemstack1 = slot1.getItem();
+
+            itemstack = itemstack1.copy();
+            EquipmentSlot enumitemslot = player.getEquipmentSlotForItem(itemstack);
+
             if (slot == 0) {
-                if (!this.moveItemStackTo(itemStack2, 9, 45, true)) {
+                if (!this.moveItemStackTo(itemstack1, 9, 45, true)) {
                     return ItemStack.EMPTY;
                 }
 
-                slot2.onQuickCraft(itemStack2, itemStack);
+                slot1.onQuickCraft(itemstack1, itemstack);
             } else if (slot >= 1 && slot < 5) {
-                if (!this.moveItemStackTo(itemStack2, 9, 45, false)) {
+                if (!this.moveItemStackTo(itemstack1, 9, 45, false)) {
                     return ItemStack.EMPTY;
                 }
             } else if (slot >= 5 && slot < 9) {
-                if (!this.moveItemStackTo(itemStack2, 9, 45, false)) {
+                if (!this.moveItemStackTo(itemstack1, 9, 45, false)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (equipmentSlot.getType() == EquipmentSlot.Type.HUMANOID_ARMOR && !this.slots.get(8 - equipmentSlot.getIndex()).hasItem()) {
-                int i = 8 - equipmentSlot.getIndex();
-                if (!this.moveItemStackTo(itemStack2, i, i + 1, false)) {
+            } else if (enumitemslot.getType() == EquipmentSlot.Type.HUMANOID_ARMOR && !((Slot) this.slots.get(8 - enumitemslot.getIndex())).hasItem()) {
+                int j = 8 - enumitemslot.getIndex();
+
+                if (!this.moveItemStackTo(itemstack1, j, j + 1, false)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (equipmentSlot == EquipmentSlot.OFFHAND && !this.slots.get(45).hasItem()) {
-                if (!this.moveItemStackTo(itemStack2, 45, 46, false)) {
+            } else if (enumitemslot == EquipmentSlot.OFFHAND && !((Slot) this.slots.get(45)).hasItem()) {
+                if (!this.moveItemStackTo(itemstack1, 45, 46, false)) {
                     return ItemStack.EMPTY;
                 }
             } else if (slot >= 9 && slot < 36) {
-                if (!this.moveItemStackTo(itemStack2, 36, 45, false)) {
+                if (!this.moveItemStackTo(itemstack1, 36, 45, false)) {
                     return ItemStack.EMPTY;
                 }
             } else if (slot >= 36 && slot < 45) {
-                if (!this.moveItemStackTo(itemStack2, 9, 36, false)) {
+                if (!this.moveItemStackTo(itemstack1, 9, 36, false)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (!this.moveItemStackTo(itemStack2, 9, 45, false)) {
+            } else if (!this.moveItemStackTo(itemstack1, 9, 45, false)) {
                 return ItemStack.EMPTY;
             }
 
-            if (itemStack2.isEmpty()) {
-                slot2.setByPlayer(ItemStack.EMPTY, itemStack);
+            if (itemstack1.isEmpty()) {
+                slot1.setByPlayer(ItemStack.EMPTY, itemstack);
             } else {
-                slot2.setChanged();
+                slot1.setChanged();
             }
 
-            if (itemStack2.getCount() == itemStack.getCount()) {
+            if (itemstack1.getCount() == itemstack.getCount()) {
                 return ItemStack.EMPTY;
             }
 
-            slot2.onTake(player, itemStack2);
+            slot1.onTake(player, itemstack1);
             if (slot == 0) {
-                player.drop(itemStack2, false);
+                player.drop(itemstack1, false);
             }
         }
 
-        return itemStack;
+        return itemstack;
     }
 
     @Override
@@ -169,7 +181,7 @@
 
     @Override
     public Slot getResultSlot() {
-        return this.slots.get(0);
+        return (Slot) this.slots.get(0);
     }
 
     @Override
@@ -190,4 +202,17 @@
     protected Player owner() {
         return this.owner;
     }
+
+    // CraftBukkit start
+    @Override
+    public CraftInventoryView getBukkitView() {
+        if (this.bukkitEntity != null) {
+            return this.bukkitEntity;
+        }
+
+        CraftInventoryCrafting inventory = new CraftInventoryCrafting(this.craftSlots, this.resultSlots);
+        this.bukkitEntity = new CraftInventoryView(this.owner.getBukkitEntity(), inventory, this);
+        return this.bukkitEntity;
+    }
+    // CraftBukkit end
 }
