--- a/net/minecraft/world/entity/vehicle/VehicleEntity.java
+++ b/net/minecraft/world/entity/vehicle/VehicleEntity.java
@@ -17,7 +17,15 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.gameevent.GameEvent;
 
+// CraftBukkit start
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.entity.EntityRemoveEvent;
+import org.bukkit.event.vehicle.VehicleDamageEvent;
+import org.bukkit.event.vehicle.VehicleDestroyEvent;
+// CraftBukkit end
+
 public abstract class VehicleEntity extends Entity {
+
     protected static final EntityDataAccessor<Integer> DATA_ID_HURT = SynchedEntityData.defineId(VehicleEntity.class, EntityDataSerializers.INT);
     protected static final EntityDataAccessor<Integer> DATA_ID_HURTDIR = SynchedEntityData.defineId(VehicleEntity.class, EntityDataSerializers.INT);
     protected static final EntityDataAccessor<Float> DATA_ID_DAMAGE = SynchedEntityData.defineId(VehicleEntity.class, EntityDataSerializers.FLOAT);
@@ -38,27 +46,65 @@
         } else if (this.isInvulnerableToBase(source)) {
             return false;
         } else {
-            boolean var10000;
-            label32: {
+            boolean flag;
+            // CraftBukkit start
+            Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+            org.bukkit.entity.Entity attacker = (source.getEntity() == null) ? null : source.getEntity().getBukkitEntity();
+
+            VehicleDamageEvent event = new VehicleDamageEvent(vehicle, attacker, (double) amount);
+            this.level().getCraftServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                return false;
+            }
+            amount = (float) event.getDamage();
+            // CraftBukkit end
+            label32:
+            {
                 this.setHurtDir(-this.getHurtDir());
                 this.setHurtTime(10);
                 this.markHurt();
                 this.setDamage(this.getDamage() + amount * 10.0F);
                 this.gameEvent(GameEvent.ENTITY_DAMAGE, source.getEntity());
-                if (source.getEntity() instanceof Player player && player.getAbilities().instabuild) {
-                    var10000 = true;
-                    break label32;
+                Entity entity = source.getEntity();
+
+                if (entity instanceof Player) {
+                    Player entityhuman = (Player) entity;
+
+                    if (entityhuman.getAbilities().instabuild) {
+                        flag = true;
+                        break label32;
+                    }
                 }
 
-                var10000 = false;
+                flag = false;
             }
 
-            boolean bl = var10000;
-            if ((bl || !(this.getDamage() > 40.0F)) && !this.shouldSourceDestroy(source)) {
-                if (bl) {
-                    this.discard();
+            boolean flag1 = flag;
+
+            if ((flag1 || this.getDamage() <= 40.0F) && !this.shouldSourceDestroy(source)) {
+                if (flag1) {
+                    // CraftBukkit start
+                    VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, attacker);
+                    this.level().getCraftServer().getPluginManager().callEvent(destroyEvent);
+
+                    if (destroyEvent.isCancelled()) {
+                        this.setDamage(40.0F); // Maximize damage so this doesn't get triggered again right away
+                        return true;
+                    }
+                    // CraftBukkit end
+                    this.discard(EntityRemoveEvent.Cause.DEATH); // CraftBukkit - add Bukkit remove cause
                 }
             } else {
+                // CraftBukkit start
+                VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, attacker);
+                this.level().getCraftServer().getPluginManager().callEvent(destroyEvent);
+
+                if (destroyEvent.isCancelled()) {
+                    this.setDamage(40.0F); // Maximize damage so this doesn't get triggered again right away
+                    return true;
+                }
+                // CraftBukkit end
                 this.destroy(world, source);
             }
 
@@ -78,41 +124,42 @@
     public void destroy(ServerLevel world, Item item) {
         this.kill(world);
         if (world.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
-            ItemStack itemStack = new ItemStack(item);
-            itemStack.set(DataComponents.CUSTOM_NAME, this.getCustomName());
-            this.spawnAtLocation(world, itemStack);
+            ItemStack itemstack = new ItemStack(item);
+
+            itemstack.set(DataComponents.CUSTOM_NAME, this.getCustomName());
+            this.spawnAtLocation(world, itemstack);
         }
     }
 
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
-        builder.define(DATA_ID_HURT, 0);
-        builder.define(DATA_ID_HURTDIR, 1);
-        builder.define(DATA_ID_DAMAGE, 0.0F);
+        builder.define(VehicleEntity.DATA_ID_HURT, 0);
+        builder.define(VehicleEntity.DATA_ID_HURTDIR, 1);
+        builder.define(VehicleEntity.DATA_ID_DAMAGE, 0.0F);
     }
 
     public void setHurtTime(int damageWobbleTicks) {
-        this.entityData.set(DATA_ID_HURT, damageWobbleTicks);
+        this.entityData.set(VehicleEntity.DATA_ID_HURT, damageWobbleTicks);
     }
 
     public void setHurtDir(int damageWobbleSide) {
-        this.entityData.set(DATA_ID_HURTDIR, damageWobbleSide);
+        this.entityData.set(VehicleEntity.DATA_ID_HURTDIR, damageWobbleSide);
     }
 
     public void setDamage(float damageWobbleStrength) {
-        this.entityData.set(DATA_ID_DAMAGE, damageWobbleStrength);
+        this.entityData.set(VehicleEntity.DATA_ID_DAMAGE, damageWobbleStrength);
     }
 
     public float getDamage() {
-        return this.entityData.get(DATA_ID_DAMAGE);
+        return (Float) this.entityData.get(VehicleEntity.DATA_ID_DAMAGE);
     }
 
     public int getHurtTime() {
-        return this.entityData.get(DATA_ID_HURT);
+        return (Integer) this.entityData.get(VehicleEntity.DATA_ID_HURT);
     }
 
     public int getHurtDir() {
-        return this.entityData.get(DATA_ID_HURTDIR);
+        return (Integer) this.entityData.get(VehicleEntity.DATA_ID_HURTDIR);
     }
 
     protected void destroy(ServerLevel world, DamageSource damageSource) {
