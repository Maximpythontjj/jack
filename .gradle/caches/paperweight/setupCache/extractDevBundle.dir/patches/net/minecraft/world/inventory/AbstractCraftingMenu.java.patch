--- a/net/minecraft/world/inventory/AbstractCraftingMenu.java
+++ b/net/minecraft/world/inventory/AbstractCraftingMenu.java
@@ -10,16 +10,20 @@
 import net.minecraft.world.item.crafting.RecipeHolder;
 
 public abstract class AbstractCraftingMenu extends RecipeBookMenu {
+
     private final int width;
     private final int height;
-    public final CraftingContainer craftSlots;
+    public final TransientCraftingContainer craftSlots; // CraftBukkit
     public final ResultContainer resultSlots = new ResultContainer();
 
-    public AbstractCraftingMenu(MenuType<?> type, int syncId, int width, int height) {
-        super(type, syncId);
-        this.width = width;
-        this.height = height;
-        this.craftSlots = new TransientCraftingContainer(this, width, height);
+    public AbstractCraftingMenu(MenuType<?> containers, int i, int j, int k, Inventory playerInventory) { // CraftBukkit
+        super(containers, i);
+        this.width = j;
+        this.height = k;
+        // CraftBukkit start
+        this.craftSlots = new TransientCraftingContainer(this, j, k, playerInventory.player); // CraftBukkit - pass player
+        this.craftSlots.resultInventory = this.resultSlots; // CraftBukkit - let InventoryCrafting know about its result slot
+        // CraftBukkit end
     }
 
     protected Slot addResultSlot(Player player, int x, int y) {
@@ -27,22 +31,26 @@
     }
 
     protected void addCraftingGridSlots(int x, int y) {
-        for (int i = 0; i < this.width; i++) {
-            for (int j = 0; j < this.height; j++) {
-                this.addSlot(new Slot(this.craftSlots, j + i * this.width, x + j * 18, y + i * 18));
+        for (int k = 0; k < this.width; ++k) {
+            for (int l = 0; l < this.height; ++l) {
+                this.addSlot(new Slot(this.craftSlots, l + k * this.width, x + l * 18, y + k * 18));
             }
         }
+
     }
 
     @Override
     public RecipeBookMenu.PostPlaceAction handlePlacement(boolean craftAll, boolean creative, RecipeHolder<?> recipe, ServerLevel world, Inventory inventory) {
-        RecipeHolder<CraftingRecipe> recipeHolder = (RecipeHolder<CraftingRecipe>)recipe;
+        RecipeHolder<CraftingRecipe> recipeholder1 = (RecipeHolder<CraftingRecipe>) recipe; // CraftBukkit - decompile error
+
         this.beginPlacingRecipe();
 
-        RecipeBookMenu.PostPlaceAction var8;
+        RecipeBookMenu.PostPlaceAction containerrecipebook_a;
+
         try {
             List<Slot> list = this.getInputGridSlots();
-            var8 = ServerPlaceRecipe.placeRecipe(new ServerPlaceRecipe.CraftingMenuAccess<CraftingRecipe>() {
+
+            containerrecipebook_a = ServerPlaceRecipe.placeRecipe(new ServerPlaceRecipe.CraftingMenuAccess<CraftingRecipe>() {
                 @Override
                 public void fillCraftSlotsStackedContents(StackedItemContents finder) {
                     AbstractCraftingMenu.this.fillCraftSlotsStackedContents(finder);
@@ -56,21 +64,19 @@
 
                 @Override
                 public boolean recipeMatches(RecipeHolder<CraftingRecipe> entry) {
-                    return entry.value().matches(AbstractCraftingMenu.this.craftSlots.asCraftInput(), AbstractCraftingMenu.this.owner().level());
+                    return ((CraftingRecipe) entry.value()).matches(AbstractCraftingMenu.this.craftSlots.asCraftInput(), AbstractCraftingMenu.this.owner().level());
                 }
-            }, this.width, this.height, list, list, inventory, recipeHolder, craftAll, creative);
+            }, this.width, this.height, list, list, inventory, recipeholder1, craftAll, creative);
         } finally {
-            this.finishPlacingRecipe(world, (RecipeHolder<CraftingRecipe>)recipe);
+            this.finishPlacingRecipe(world, recipeholder1); // CraftBukkit - decompile error
         }
 
-        return var8;
+        return containerrecipebook_a;
     }
 
-    protected void beginPlacingRecipe() {
-    }
+    protected void beginPlacingRecipe() {}
 
-    protected void finishPlacingRecipe(ServerLevel world, RecipeHolder<CraftingRecipe> recipe) {
-    }
+    protected void finishPlacingRecipe(ServerLevel world, RecipeHolder<CraftingRecipe> recipe) {}
 
     public abstract Slot getResultSlot();
 
