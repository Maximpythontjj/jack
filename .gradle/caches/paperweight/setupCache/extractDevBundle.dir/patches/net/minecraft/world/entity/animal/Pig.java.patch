--- a/net/minecraft/world/entity/animal/Pig.java
+++ b/net/minecraft/world/entity/animal/Pig.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.entity.animal;
 
+import com.google.common.collect.UnmodifiableIterator;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -18,6 +19,7 @@
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.ConversionParams;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntitySpawnReason;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.EquipmentSlot;
@@ -42,48 +44,69 @@
 import net.minecraft.world.entity.vehicle.DismountHelper;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRemoveEvent;
+// CraftBukkit end
 
 public class Pig extends Animal implements ItemSteerable, Saddleable {
+
     private static final EntityDataAccessor<Boolean> DATA_SADDLE_ID = SynchedEntityData.defineId(Pig.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Integer> DATA_BOOST_TIME = SynchedEntityData.defineId(Pig.class, EntityDataSerializers.INT);
-    public final ItemBasedSteering steering = new ItemBasedSteering(this.entityData, DATA_BOOST_TIME, DATA_SADDLE_ID);
+    public final ItemBasedSteering steering;
 
     public Pig(EntityType<? extends Pig> type, Level world) {
         super(type, world);
+        this.steering = new ItemBasedSteering(this.entityData, Pig.DATA_BOOST_TIME, Pig.DATA_SADDLE_ID);
     }
 
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
-        this.goalSelector.addGoal(1, new PanicGoal(this, 1.25));
-        this.goalSelector.addGoal(3, new BreedGoal(this, 1.0));
-        this.goalSelector.addGoal(4, new TemptGoal(this, 1.2, stack -> stack.is(Items.CARROT_ON_A_STICK), false));
-        this.goalSelector.addGoal(4, new TemptGoal(this, 1.2, stack -> stack.is(ItemTags.PIG_FOOD), false));
-        this.goalSelector.addGoal(5, new FollowParentGoal(this, 1.1));
-        this.goalSelector.addGoal(6, new WaterAvoidingRandomStrollGoal(this, 1.0));
+        this.goalSelector.addGoal(1, new PanicGoal(this, 1.25D));
+        this.goalSelector.addGoal(3, new BreedGoal(this, 1.0D));
+        this.goalSelector.addGoal(4, new TemptGoal(this, 1.2D, (itemstack) -> {
+            return itemstack.is(Items.CARROT_ON_A_STICK);
+        }, false));
+        this.goalSelector.addGoal(4, new TemptGoal(this, 1.2D, (itemstack) -> {
+            return itemstack.is(ItemTags.PIG_FOOD);
+        }, false));
+        this.goalSelector.addGoal(5, new FollowParentGoal(this, 1.1D));
+        this.goalSelector.addGoal(6, new WaterAvoidingRandomStrollGoal(this, 1.0D));
         this.goalSelector.addGoal(7, new LookAtPlayerGoal(this, Player.class, 6.0F));
         this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return Animal.createAnimalAttributes().add(Attributes.MAX_HEALTH, 10.0).add(Attributes.MOVEMENT_SPEED, 0.25);
+        return Animal.createAnimalAttributes().add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.MOVEMENT_SPEED, 0.25D);
     }
 
     @Nullable
     @Override
     public LivingEntity getControllingPassenger() {
-        return (LivingEntity)(this.isSaddled() && this.getFirstPassenger() instanceof Player player && player.isHolding(Items.CARROT_ON_A_STICK)
-            ? player
-            : super.getControllingPassenger());
+        if (this.isSaddled()) {
+            Entity entity = this.getFirstPassenger();
+
+            if (entity instanceof Player) {
+                Player entityhuman = (Player) entity;
+
+                if (entityhuman.isHolding(Items.CARROT_ON_A_STICK)) {
+                    return entityhuman;
+                }
+            }
+        }
+
+        return super.getControllingPassenger();
     }
 
     @Override
     public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
-        if (DATA_BOOST_TIME.equals(data) && this.level().isClientSide) {
+        if (Pig.DATA_BOOST_TIME.equals(data) && this.level().isClientSide) {
             this.steering.onSynced();
         }
 
@@ -93,8 +116,8 @@
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         super.defineSynchedData(builder);
-        builder.define(DATA_SADDLE_ID, false);
-        builder.define(DATA_BOOST_TIME, 0);
+        builder.define(Pig.DATA_SADDLE_ID, false);
+        builder.define(Pig.DATA_BOOST_TIME, 0);
     }
 
     @Override
@@ -131,20 +154,23 @@
 
     @Override
     public InteractionResult mobInteract(Player player, InteractionHand hand) {
-        boolean bl = this.isFood(player.getItemInHand(hand));
-        if (!bl && this.isSaddled() && !this.isVehicle() && !player.isSecondaryUseActive()) {
+        boolean flag = this.isFood(player.getItemInHand(hand));
+
+        if (!flag && this.isSaddled() && !this.isVehicle() && !player.isSecondaryUseActive()) {
             if (!this.level().isClientSide) {
                 player.startRiding(this);
             }
 
             return InteractionResult.SUCCESS;
         } else {
-            InteractionResult interactionResult = super.mobInteract(player, hand);
-            if (!interactionResult.consumesAction()) {
-                ItemStack itemStack = player.getItemInHand(hand);
-                return (InteractionResult)(itemStack.is(Items.SADDLE) ? itemStack.interactLivingEntity(player, this, hand) : InteractionResult.PASS);
+            InteractionResult enuminteractionresult = super.mobInteract(player, hand);
+
+            if (!enuminteractionresult.consumesAction()) {
+                ItemStack itemstack = player.getItemInHand(hand);
+
+                return (InteractionResult) (itemstack.is(Items.SADDLE) ? itemstack.interactLivingEntity(player, this, hand) : InteractionResult.PASS);
             } else {
-                return interactionResult;
+                return enuminteractionresult;
             }
         }
     }
@@ -158,8 +184,9 @@
     protected void dropEquipment(ServerLevel world) {
         super.dropEquipment(world);
         if (this.isSaddled()) {
-            this.spawnAtLocation(world, Items.SADDLE);
+            this.spawnAtLocation(world, (ItemLike) Items.SADDLE);
         }
+
     }
 
     @Override
@@ -171,31 +198,41 @@
     public void equipSaddle(ItemStack stack, @Nullable SoundSource soundCategory) {
         this.steering.setSaddle(true);
         if (soundCategory != null) {
-            this.level().playSound(null, this, SoundEvents.PIG_SADDLE, soundCategory, 0.5F, 1.0F);
+            this.level().playSound((Player) null, (Entity) this, SoundEvents.PIG_SADDLE, soundCategory, 0.5F, 1.0F);
         }
+
     }
 
     @Override
     public Vec3 getDismountLocationForPassenger(LivingEntity passenger) {
-        Direction direction = this.getMotionDirection();
-        if (direction.getAxis() == Direction.Axis.Y) {
+        Direction enumdirection = this.getMotionDirection();
+
+        if (enumdirection.getAxis() == Direction.Axis.Y) {
             return super.getDismountLocationForPassenger(passenger);
         } else {
-            int[][] is = DismountHelper.offsetsForDirection(direction);
-            BlockPos blockPos = this.blockPosition();
-            BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
+            int[][] aint = DismountHelper.offsetsForDirection(enumdirection);
+            BlockPos blockposition = this.blockPosition();
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
+            UnmodifiableIterator unmodifiableiterator = passenger.getDismountPoses().iterator();
 
-            for (Pose pose : passenger.getDismountPoses()) {
-                AABB aABB = passenger.getLocalBoundsForPose(pose);
+            while (unmodifiableiterator.hasNext()) {
+                Pose entitypose = (Pose) unmodifiableiterator.next();
+                AABB axisalignedbb = passenger.getLocalBoundsForPose(entitypose);
+                int[][] aint1 = aint;
+                int i = aint.length;
 
-                for (int[] js : is) {
-                    mutableBlockPos.set(blockPos.getX() + js[0], blockPos.getY(), blockPos.getZ() + js[1]);
-                    double d = this.level().getBlockFloorHeight(mutableBlockPos);
-                    if (DismountHelper.isBlockFloorValid(d)) {
-                        Vec3 vec3 = Vec3.upFromBottomCenterOf(mutableBlockPos, d);
-                        if (DismountHelper.canDismountTo(this.level(), passenger, aABB.move(vec3))) {
-                            passenger.setPose(pose);
-                            return vec3;
+                for (int j = 0; j < i; ++j) {
+                    int[] aint2 = aint1[j];
+
+                    blockposition_mutableblockposition.set(blockposition.getX() + aint2[0], blockposition.getY(), blockposition.getZ() + aint2[1]);
+                    double d0 = this.level().getBlockFloorHeight(blockposition_mutableblockposition);
+
+                    if (DismountHelper.isBlockFloorValid(d0)) {
+                        Vec3 vec3d = Vec3.upFromBottomCenterOf(blockposition_mutableblockposition, d0);
+
+                        if (DismountHelper.canDismountTo(this.level(), passenger, axisalignedbb.move(vec3d))) {
+                            passenger.setPose(entitypose);
+                            return vec3d;
                         }
                     }
                 }
@@ -208,19 +245,28 @@
     @Override
     public void thunderHit(ServerLevel world, LightningBolt lightning) {
         if (world.getDifficulty() != Difficulty.PEACEFUL) {
-            ZombifiedPiglin zombifiedPiglin = this.convertTo(EntityType.ZOMBIFIED_PIGLIN, ConversionParams.single(this, false, true), zombifiedPiglinx -> {
+            ZombifiedPiglin entitypigzombie = (ZombifiedPiglin) this.convertTo(EntityType.ZOMBIFIED_PIGLIN, ConversionParams.single(this, false, true), (entitypigzombie1) -> {
                 if (this.getMainHandItem().isEmpty()) {
-                    zombifiedPiglinx.setItemSlot(EquipmentSlot.MAINHAND, new ItemStack(Items.GOLDEN_SWORD));
+                    entitypigzombie1.setItemSlot(EquipmentSlot.MAINHAND, new ItemStack(Items.GOLDEN_SWORD));
                 }
 
-                zombifiedPiglinx.setPersistenceRequired();
-            });
-            if (zombifiedPiglin == null) {
+                entitypigzombie1.setPersistenceRequired();
+            // CraftBukkit start
+            }, null, null);
+            if (CraftEventFactory.callPigZapEvent(this, lightning, entitypigzombie).isCancelled()) {
+                return;
+            }
+            world.addFreshEntity(entitypigzombie, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING);
+            this.discard(EntityRemoveEvent.Cause.TRANSFORMATION); // CraftBukkit - add Bukkit remove cause
+            // CraftBukkit end
+
+            if (entitypigzombie == null) {
                 super.thunderHit(world, lightning);
             }
         } else {
             super.thunderHit(world, lightning);
         }
+
     }
 
     @Override
@@ -233,12 +279,12 @@
 
     @Override
     protected Vec3 getRiddenInput(Player controllingPlayer, Vec3 movementInput) {
-        return new Vec3(0.0, 0.0, 1.0);
+        return new Vec3(0.0D, 0.0D, 1.0D);
     }
 
     @Override
     protected float getRiddenSpeed(Player controllingPlayer) {
-        return (float)(this.getAttributeValue(Attributes.MOVEMENT_SPEED) * 0.225 * (double)this.steering.boostFactor());
+        return (float) (this.getAttributeValue(Attributes.MOVEMENT_SPEED) * 0.225D * (double) this.steering.boostFactor());
     }
 
     @Override
@@ -248,8 +294,8 @@
 
     @Nullable
     @Override
-    public Pig getBreedOffspring(ServerLevel serverLevel, AgeableMob ageableMob) {
-        return EntityType.PIG.create(serverLevel, EntitySpawnReason.BREEDING);
+    public Pig getBreedOffspring(ServerLevel world, AgeableMob entity) {
+        return (Pig) EntityType.PIG.create(world, EntitySpawnReason.BREEDING);
     }
 
     @Override
@@ -259,6 +305,6 @@
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0, (double)(0.6F * this.getEyeHeight()), (double)(this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, (double) (0.6F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
     }
 }
