--- a/net/minecraft/world/entity/animal/Panda.java
+++ b/net/minecraft/world/entity/animal/Panda.java
@@ -1,8 +1,11 @@
 package net.minecraft.world.entity.animal;
 
 import java.util.EnumSet;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.function.IntFunction;
+import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ItemParticleOption;
@@ -65,19 +68,22 @@
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRemoveEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+// CraftBukkit end
 
 public class Panda extends Animal {
+
     private static final EntityDataAccessor<Integer> UNHAPPY_COUNTER = SynchedEntityData.defineId(Panda.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Integer> SNEEZE_COUNTER = SynchedEntityData.defineId(Panda.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Integer> EAT_COUNTER = SynchedEntityData.defineId(Panda.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Byte> MAIN_GENE_ID = SynchedEntityData.defineId(Panda.class, EntityDataSerializers.BYTE);
     private static final EntityDataAccessor<Byte> HIDDEN_GENE_ID = SynchedEntityData.defineId(Panda.class, EntityDataSerializers.BYTE);
     private static final EntityDataAccessor<Byte> DATA_ID_FLAGS = SynchedEntityData.defineId(Panda.class, EntityDataSerializers.BYTE);
-    static final TargetingConditions BREED_TARGETING = TargetingConditions.forNonCombat().range(8.0);
-    private static final EntityDimensions BABY_DIMENSIONS = EntityType.PANDA
-        .getDimensions()
-        .scale(0.5F)
-        .withAttachments(EntityAttachments.builder().attach(EntityAttachment.PASSENGER, 0.0F, 0.40625F, 0.0F));
+    static final TargetingConditions BREED_TARGETING = TargetingConditions.forNonCombat().range(8.0D);
+    private static final EntityDimensions BABY_DIMENSIONS = EntityType.PANDA.getDimensions().scale(0.5F).withAttachments(EntityAttachments.builder().attach(EntityAttachment.PASSENGER, 0.0F, 0.40625F, 0.0F));
     private static final int FLAG_SNEEZE = 2;
     private static final int FLAG_ROLL = 4;
     private static final int FLAG_SIT = 8;
@@ -103,6 +109,7 @@
         if (!this.isBaby()) {
             this.setCanPickUpLoot(true);
         }
+
     }
 
     @Override
@@ -111,11 +118,11 @@
     }
 
     public int getUnhappyCounter() {
-        return this.entityData.get(UNHAPPY_COUNTER);
+        return (Integer) this.entityData.get(Panda.UNHAPPY_COUNTER);
     }
 
     public void setUnhappyCounter(int askForBambooTicks) {
-        this.entityData.set(UNHAPPY_COUNTER, askForBambooTicks);
+        this.entityData.set(Panda.UNHAPPY_COUNTER, askForBambooTicks);
     }
 
     public boolean isSneezing() {
@@ -127,6 +134,7 @@
     }
 
     public void sit(boolean sitting) {
+        if (!new io.papermc.paper.event.entity.EntityToggleSitEvent(this.getBukkitEntity(), sitting).callEvent()) return; // Paper - Add EntityToggleSitEvent
         this.setFlag(8, sitting);
     }
 
@@ -139,19 +147,19 @@
     }
 
     public boolean isEating() {
-        return this.entityData.get(EAT_COUNTER) > 0;
+        return (Integer) this.entityData.get(Panda.EAT_COUNTER) > 0;
     }
 
     public void eat(boolean eating) {
-        this.entityData.set(EAT_COUNTER, eating ? 1 : 0);
+        this.entityData.set(Panda.EAT_COUNTER, eating ? 1 : 0);
     }
 
     public int getEatCounter() {
-        return this.entityData.get(EAT_COUNTER);
+        return (Integer) this.entityData.get(Panda.EAT_COUNTER);
     }
 
     public void setEatCounter(int eatingTicks) {
-        this.entityData.set(EAT_COUNTER, eatingTicks);
+        this.entityData.set(Panda.EAT_COUNTER, eatingTicks);
     }
 
     public void sneeze(boolean sneezing) {
@@ -159,18 +167,19 @@
         if (!sneezing) {
             this.setSneezeCounter(0);
         }
+
     }
 
     public int getSneezeCounter() {
-        return this.entityData.get(SNEEZE_COUNTER);
+        return (Integer) this.entityData.get(Panda.SNEEZE_COUNTER);
     }
 
     public void setSneezeCounter(int sneezeProgress) {
-        this.entityData.set(SNEEZE_COUNTER, sneezeProgress);
+        this.entityData.set(Panda.SNEEZE_COUNTER, sneezeProgress);
     }
 
     public Panda.Gene getMainGene() {
-        return Panda.Gene.byId(this.entityData.get(MAIN_GENE_ID));
+        return Panda.Gene.byId((Byte) this.entityData.get(Panda.MAIN_GENE_ID));
     }
 
     public void setMainGene(Panda.Gene gene) {
@@ -178,11 +187,11 @@
             gene = Panda.Gene.getRandom(this.random);
         }
 
-        this.entityData.set(MAIN_GENE_ID, (byte)gene.getId());
+        this.entityData.set(Panda.MAIN_GENE_ID, (byte) gene.getId());
     }
 
     public Panda.Gene getHiddenGene() {
-        return Panda.Gene.byId(this.entityData.get(HIDDEN_GENE_ID));
+        return Panda.Gene.byId((Byte) this.entityData.get(Panda.HIDDEN_GENE_ID));
     }
 
     public void setHiddenGene(Panda.Gene gene) {
@@ -190,7 +199,7 @@
             gene = Panda.Gene.getRandom(this.random);
         }
 
-        this.entityData.set(HIDDEN_GENE_ID, (byte)gene.getId());
+        this.entityData.set(Panda.HIDDEN_GENE_ID, (byte) gene.getId());
     }
 
     public boolean isRolling() {
@@ -204,25 +213,27 @@
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         super.defineSynchedData(builder);
-        builder.define(UNHAPPY_COUNTER, 0);
-        builder.define(SNEEZE_COUNTER, 0);
-        builder.define(MAIN_GENE_ID, (byte)0);
-        builder.define(HIDDEN_GENE_ID, (byte)0);
-        builder.define(DATA_ID_FLAGS, (byte)0);
-        builder.define(EAT_COUNTER, 0);
+        builder.define(Panda.UNHAPPY_COUNTER, 0);
+        builder.define(Panda.SNEEZE_COUNTER, 0);
+        builder.define(Panda.MAIN_GENE_ID, (byte) 0);
+        builder.define(Panda.HIDDEN_GENE_ID, (byte) 0);
+        builder.define(Panda.DATA_ID_FLAGS, (byte) 0);
+        builder.define(Panda.EAT_COUNTER, 0);
     }
 
     private boolean getFlag(int bitmask) {
-        return (this.entityData.get(DATA_ID_FLAGS) & bitmask) != 0;
+        return ((Byte) this.entityData.get(Panda.DATA_ID_FLAGS) & bitmask) != 0;
     }
 
     private void setFlag(int mask, boolean value) {
-        byte b = this.entityData.get(DATA_ID_FLAGS);
+        byte b0 = (Byte) this.entityData.get(Panda.DATA_ID_FLAGS);
+
         if (value) {
-            this.entityData.set(DATA_ID_FLAGS, (byte)(b | mask));
+            this.entityData.set(Panda.DATA_ID_FLAGS, (byte) (b0 | mask));
         } else {
-            this.entityData.set(DATA_ID_FLAGS, (byte)(b & ~mask));
+            this.entityData.set(Panda.DATA_ID_FLAGS, (byte) (b0 & ~mask));
         }
+
     }
 
     @Override
@@ -242,27 +253,32 @@
     @Nullable
     @Override
     public AgeableMob getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        Panda panda = EntityType.PANDA.create(world, EntitySpawnReason.BREEDING);
-        if (panda != null) {
-            if (entity instanceof Panda panda2) {
-                panda.setGeneFromParents(this, panda2);
+        Panda entitypanda = (Panda) EntityType.PANDA.create(world, EntitySpawnReason.BREEDING);
+
+        if (entitypanda != null) {
+            if (entity instanceof Panda) {
+                Panda entitypanda1 = (Panda) entity;
+
+                entitypanda.setGeneFromParents(this, entitypanda1);
             }
 
-            panda.setAttributes();
+            entitypanda.setAttributes();
         }
 
-        return panda;
+        return entitypanda;
     }
 
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
-        this.goalSelector.addGoal(2, new Panda.PandaPanicGoal(this, 2.0));
-        this.goalSelector.addGoal(2, new Panda.PandaBreedGoal(this, 1.0));
-        this.goalSelector.addGoal(3, new Panda.PandaAttackGoal(this, 1.2F, true));
-        this.goalSelector.addGoal(4, new TemptGoal(this, 1.0, stack -> stack.is(ItemTags.PANDA_FOOD), false));
-        this.goalSelector.addGoal(6, new Panda.PandaAvoidGoal<>(this, Player.class, 8.0F, 2.0, 2.0));
-        this.goalSelector.addGoal(6, new Panda.PandaAvoidGoal<>(this, Monster.class, 4.0F, 2.0, 2.0));
+        this.goalSelector.addGoal(2, new Panda.PandaPanicGoal(this, 2.0D));
+        this.goalSelector.addGoal(2, new Panda.PandaBreedGoal(this, 1.0D));
+        this.goalSelector.addGoal(3, new Panda.PandaAttackGoal(this, 1.2000000476837158D, true));
+        this.goalSelector.addGoal(4, new TemptGoal(this, 1.0D, (itemstack) -> {
+            return itemstack.is(ItemTags.PANDA_FOOD);
+        }, false));
+        this.goalSelector.addGoal(6, new Panda.PandaAvoidGoal<>(this, Player.class, 8.0F, 2.0D, 2.0D));
+        this.goalSelector.addGoal(6, new Panda.PandaAvoidGoal<>(this, Monster.class, 4.0F, 2.0D, 2.0D));
         this.goalSelector.addGoal(7, new Panda.PandaSitGoal());
         this.goalSelector.addGoal(8, new Panda.PandaLieOnBackGoal(this));
         this.goalSelector.addGoal(8, new Panda.PandaSneezeGoal(this));
@@ -270,13 +286,13 @@
         this.goalSelector.addGoal(9, this.lookAtPlayerGoal);
         this.goalSelector.addGoal(10, new RandomLookAroundGoal(this));
         this.goalSelector.addGoal(12, new Panda.PandaRollGoal(this));
-        this.goalSelector.addGoal(13, new FollowParentGoal(this, 1.25));
-        this.goalSelector.addGoal(14, new WaterAvoidingRandomStrollGoal(this, 1.0));
-        this.targetSelector.addGoal(1, new Panda.PandaHurtByTargetGoal(this).setAlertOthers(new Class[0]));
+        this.goalSelector.addGoal(13, new FollowParentGoal(this, 1.25D));
+        this.goalSelector.addGoal(14, new WaterAvoidingRandomStrollGoal(this, 1.0D));
+        this.targetSelector.addGoal(1, (new Panda.PandaHurtByTargetGoal(this, new Class[0])).setAlertOthers(new Class[0]));
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return Animal.createAnimalAttributes().add(Attributes.MOVEMENT_SPEED, 0.15F).add(Attributes.ATTACK_DAMAGE, 6.0);
+        return Animal.createAnimalAttributes().add(Attributes.MOVEMENT_SPEED, 0.15000000596046448D).add(Attributes.ATTACK_DAMAGE, 6.0D);
     }
 
     public Panda.Gene getVariant() {
@@ -339,15 +355,16 @@
             }
         }
 
-        LivingEntity livingEntity = this.getTarget();
-        if (livingEntity == null) {
+        LivingEntity entityliving = this.getTarget();
+
+        if (entityliving == null) {
             this.gotBamboo = false;
             this.didBite = false;
         }
 
         if (this.getUnhappyCounter() > 0) {
-            if (livingEntity != null) {
-                this.lookAt(livingEntity, 90.0F, 90.0F);
+            if (entityliving != null) {
+                this.lookAt(entityliving, 90.0F, 90.0F);
             }
 
             if (this.getUnhappyCounter() == 29 || this.getUnhappyCounter() == 14) {
@@ -412,34 +429,27 @@
 
             this.setEatCounter(this.getEatCounter() + 1);
         }
+
     }
 
     private void addEatingParticles() {
         if (this.getEatCounter() % 5 == 0) {
-            this.playSound(
-                SoundEvents.PANDA_EAT, 0.5F + 0.5F * (float)this.random.nextInt(2), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F
-            );
+            this.playSound(SoundEvents.PANDA_EAT, 0.5F + 0.5F * (float) this.random.nextInt(2), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
 
-            for (int i = 0; i < 6; i++) {
-                Vec3 vec3 = new Vec3(((double)this.random.nextFloat() - 0.5) * 0.1, Math.random() * 0.1 + 0.1, ((double)this.random.nextFloat() - 0.5) * 0.1);
-                vec3 = vec3.xRot(-this.getXRot() * (float) (Math.PI / 180.0));
-                vec3 = vec3.yRot(-this.getYRot() * (float) (Math.PI / 180.0));
-                double d = (double)(-this.random.nextFloat()) * 0.6 - 0.3;
-                Vec3 vec32 = new Vec3(((double)this.random.nextFloat() - 0.5) * 0.8, d, 1.0 + ((double)this.random.nextFloat() - 0.5) * 0.4);
-                vec32 = vec32.yRot(-this.yBodyRot * (float) (Math.PI / 180.0));
-                vec32 = vec32.add(this.getX(), this.getEyeY() + 1.0, this.getZ());
-                this.level()
-                    .addParticle(
-                        new ItemParticleOption(ParticleTypes.ITEM, this.getItemBySlot(EquipmentSlot.MAINHAND)),
-                        vec32.x,
-                        vec32.y,
-                        vec32.z,
-                        vec3.x,
-                        vec3.y + 0.05,
-                        vec3.z
-                    );
+            for (int i = 0; i < 6; ++i) {
+                Vec3 vec3d = new Vec3(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, ((double) this.random.nextFloat() - 0.5D) * 0.1D);
+
+                vec3d = vec3d.xRot(-this.getXRot() * 0.017453292F);
+                vec3d = vec3d.yRot(-this.getYRot() * 0.017453292F);
+                double d0 = (double) (-this.random.nextFloat()) * 0.6D - 0.3D;
+                Vec3 vec3d1 = new Vec3(((double) this.random.nextFloat() - 0.5D) * 0.8D, d0, 1.0D + ((double) this.random.nextFloat() - 0.5D) * 0.4D);
+
+                vec3d1 = vec3d1.yRot(-this.yBodyRot * 0.017453292F);
+                vec3d1 = vec3d1.add(this.getX(), this.getEyeY() + 1.0D, this.getZ());
+                this.level().addParticle(new ItemParticleOption(ParticleTypes.ITEM, this.getItemBySlot(EquipmentSlot.MAINHAND)), vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z);
             }
         }
+
     }
 
     private void updateSitAmount() {
@@ -449,6 +459,7 @@
         } else {
             this.sitAmount = Math.max(0.0F, this.sitAmount - 0.19F);
         }
+
     }
 
     private void updateOnBackAnimation() {
@@ -458,6 +469,7 @@
         } else {
             this.onBackAmount = Math.max(0.0F, this.onBackAmount - 0.19F);
         }
+
     }
 
     private void updateRollAmount() {
@@ -467,6 +479,7 @@
         } else {
             this.rollAmount = Math.max(0.0F, this.rollAmount - 0.19F);
         }
+
     }
 
     public float getSitAmount(float tickDelta) {
@@ -482,61 +495,72 @@
     }
 
     private void handleRoll() {
-        this.rollCounter++;
+        ++this.rollCounter;
         if (this.rollCounter > 32) {
             this.roll(false);
         } else {
             if (!this.level().isClientSide) {
-                Vec3 vec3 = this.getDeltaMovement();
+                Vec3 vec3d = this.getDeltaMovement();
+
                 if (this.rollCounter == 1) {
-                    float f = this.getYRot() * (float) (Math.PI / 180.0);
-                    float g = this.isBaby() ? 0.1F : 0.2F;
-                    this.rollDelta = new Vec3(vec3.x + (double)(-Mth.sin(f) * g), 0.0, vec3.z + (double)(Mth.cos(f) * g));
-                    this.setDeltaMovement(this.rollDelta.add(0.0, 0.27, 0.0));
-                } else if ((float)this.rollCounter != 7.0F && (float)this.rollCounter != 15.0F && (float)this.rollCounter != 23.0F) {
-                    this.setDeltaMovement(this.rollDelta.x, vec3.y, this.rollDelta.z);
+                    float f = this.getYRot() * 0.017453292F;
+                    float f1 = this.isBaby() ? 0.1F : 0.2F;
+
+                    this.rollDelta = new Vec3(vec3d.x + (double) (-Mth.sin(f) * f1), 0.0D, vec3d.z + (double) (Mth.cos(f) * f1));
+                    this.setDeltaMovement(this.rollDelta.add(0.0D, 0.27D, 0.0D));
+                } else if ((float) this.rollCounter != 7.0F && (float) this.rollCounter != 15.0F && (float) this.rollCounter != 23.0F) {
+                    this.setDeltaMovement(this.rollDelta.x, vec3d.y, this.rollDelta.z);
                 } else {
-                    this.setDeltaMovement(0.0, this.onGround() ? 0.27 : vec3.y, 0.0);
+                    this.setDeltaMovement(0.0D, this.onGround() ? 0.27D : vec3d.y, 0.0D);
                 }
             }
+
         }
     }
 
     private void afterSneeze() {
-        Vec3 vec3 = this.getDeltaMovement();
-        Level level = this.level();
-        level.addParticle(
-            ParticleTypes.SNEEZE,
-            this.getX() - (double)(this.getBbWidth() + 1.0F) * 0.5 * (double)Mth.sin(this.yBodyRot * (float) (Math.PI / 180.0)),
-            this.getEyeY() - 0.1F,
-            this.getZ() + (double)(this.getBbWidth() + 1.0F) * 0.5 * (double)Mth.cos(this.yBodyRot * (float) (Math.PI / 180.0)),
-            vec3.x,
-            0.0,
-            vec3.z
-        );
+        Vec3 vec3d = this.getDeltaMovement();
+        Level world = this.level();
+
+        world.addParticle(ParticleTypes.SNEEZE, this.getX() - (double) (this.getBbWidth() + 1.0F) * 0.5D * (double) Mth.sin(this.yBodyRot * 0.017453292F), this.getEyeY() - 0.10000000149011612D, this.getZ() + (double) (this.getBbWidth() + 1.0F) * 0.5D * (double) Mth.cos(this.yBodyRot * 0.017453292F), vec3d.x, 0.0D, vec3d.z);
         this.playSound(SoundEvents.PANDA_SNEEZE, 1.0F, 1.0F);
+        List<Panda> list = world.getEntitiesOfClass(Panda.class, this.getBoundingBox().inflate(10.0D));
+        Iterator iterator = list.iterator();
 
-        for (Panda panda : level.getEntitiesOfClass(Panda.class, this.getBoundingBox().inflate(10.0))) {
-            if (!panda.isBaby() && panda.onGround() && !panda.isInWater() && panda.canPerformAction()) {
-                panda.jumpFromGround();
+        while (iterator.hasNext()) {
+            Panda entitypanda = (Panda) iterator.next();
+
+            if (!entitypanda.isBaby() && entitypanda.onGround() && !entitypanda.isInWater() && entitypanda.canPerformAction()) {
+                if (new com.destroystokyo.paper.event.entity.EntityJumpEvent(getBukkitLivingEntity()).callEvent()) { // Paper - Entity Jump API
+                entitypanda.jumpFromGround();
+                } else { this.setJumping(false); } // Paper - Entity Jump API; setJumping(false) stops a potential loop
             }
         }
 
-        if (this.level() instanceof ServerLevel serverLevel && serverLevel.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
-            this.dropFromGiftLootTable(serverLevel, BuiltInLootTables.PANDA_SNEEZE, this::spawnAtLocation);
+        Level world1 = this.level();
+
+        if (world1 instanceof ServerLevel worldserver) {
+            if (worldserver.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
+                this.forceDrops = true; // Paper - Add missing forceDrop toggles
+                this.dropFromGiftLootTable(worldserver, BuiltInLootTables.PANDA_SNEEZE, this::spawnAtLocation);
+                this.forceDrops = false; // Paper - Add missing forceDrop toggles
+            }
         }
+
     }
 
     @Override
     protected void pickUpItem(ServerLevel world, ItemEntity itemEntity) {
-        if (this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty() && canPickUpAndEat(itemEntity)) {
+        if (!CraftEventFactory.callEntityPickupItemEvent(this, itemEntity, 0, !(this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty() && Panda.canPickUpAndEat(itemEntity))).isCancelled()) { // CraftBukkit
             this.onItemPickup(itemEntity);
-            ItemStack itemStack = itemEntity.getItem();
-            this.setItemSlot(EquipmentSlot.MAINHAND, itemStack);
+            ItemStack itemstack = itemEntity.getItem();
+
+            this.setItemSlot(EquipmentSlot.MAINHAND, itemstack);
             this.setGuaranteedDrop(EquipmentSlot.MAINHAND);
-            this.take(itemEntity, itemStack.getCount());
-            itemEntity.discard();
+            this.take(itemEntity, itemstack.getCount());
+            itemEntity.discard(EntityRemoveEvent.Cause.PICKUP); // CraftBukkit - add Bukkit remove cause
         }
+
     }
 
     @Override
@@ -547,18 +571,17 @@
 
     @Nullable
     @Override
-    public SpawnGroupData finalizeSpawn(
-        ServerLevelAccessor world, DifficultyInstance difficulty, EntitySpawnReason spawnReason, @Nullable SpawnGroupData entityData
-    ) {
-        RandomSource randomSource = world.getRandom();
-        this.setMainGene(Panda.Gene.getRandom(randomSource));
-        this.setHiddenGene(Panda.Gene.getRandom(randomSource));
+    public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, EntitySpawnReason spawnReason, @Nullable SpawnGroupData entityData) {
+        RandomSource randomsource = world.getRandom();
+
+        this.setMainGene(Panda.Gene.getRandom(randomsource));
+        this.setHiddenGene(Panda.Gene.getRandom(randomsource));
         this.setAttributes();
         if (entityData == null) {
             entityData = new AgeableMob.AgeableMobGroupData(0.2F);
         }
 
-        return super.finalizeSpawn(world, difficulty, spawnReason, entityData);
+        return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData);
     }
 
     public void setGeneFromParents(Panda mother, @Nullable Panda father) {
@@ -585,6 +608,7 @@
         if (this.random.nextInt(32) == 0) {
             this.setHiddenGene(Panda.Gene.getRandom(this.random));
         }
+
     }
 
     private Panda.Gene getOneOfGenesRandomly() {
@@ -593,12 +617,13 @@
 
     public void setAttributes() {
         if (this.isWeak()) {
-            this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(10.0);
+            this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(10.0D);
         }
 
         if (this.isLazy()) {
-            this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue(0.07F);
+            this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue(0.07000000029802322D);
         }
+
     }
 
     void tryToSit() {
@@ -607,41 +632,54 @@
             this.getNavigation().stop();
             this.sit(true);
         }
+
     }
 
     @Override
     public InteractionResult mobInteract(Player player, InteractionHand hand) {
-        ItemStack itemStack = player.getItemInHand(hand);
+        ItemStack itemstack = player.getItemInHand(hand);
+
         if (this.isScared()) {
             return InteractionResult.PASS;
         } else if (this.isOnBack()) {
             this.setOnBack(false);
             return InteractionResult.SUCCESS;
-        } else if (this.isFood(itemStack)) {
+        } else if (this.isFood(itemstack)) {
             if (this.getTarget() != null) {
                 this.gotBamboo = true;
             }
 
             if (this.isBaby()) {
-                this.usePlayerItem(player, hand, itemStack);
-                this.ageUp((int)((float)(-this.getAge() / 20) * 0.1F), true);
+                this.usePlayerItem(player, hand, itemstack);
+                this.ageUp((int) ((float) (-this.getAge() / 20) * 0.1F), true);
             } else if (!this.level().isClientSide && this.getAge() == 0 && this.canFallInLove()) {
-                this.usePlayerItem(player, hand, itemStack);
-                this.setInLove(player);
+                final ItemStack breedCopy = itemstack.copy(); // Paper - Fix EntityBreedEvent copying
+                this.usePlayerItem(player, hand, itemstack);
+                this.setInLove(player, breedCopy); // Paper - Fix EntityBreedEvent copying
             } else {
-                if (!(this.level() instanceof ServerLevel serverLevel) || this.isSitting() || this.isInWater()) {
-                    return InteractionResult.PASS;
-                }
+                Level world = this.level();
 
-                this.tryToSit();
-                this.eat(true);
-                ItemStack itemStack2 = this.getItemBySlot(EquipmentSlot.MAINHAND);
-                if (!itemStack2.isEmpty() && !player.hasInfiniteMaterials()) {
-                    this.spawnAtLocation(serverLevel, itemStack2);
+                if (world instanceof ServerLevel) {
+                    ServerLevel worldserver = (ServerLevel) world;
+
+                    if (!this.isSitting() && !this.isInWater()) {
+                        this.tryToSit();
+                        this.eat(true);
+                        ItemStack itemstack1 = this.getItemBySlot(EquipmentSlot.MAINHAND);
+
+                        if (!itemstack1.isEmpty() && !player.hasInfiniteMaterials()) {
+                            this.forceDrops = true; // Paper - Add missing forceDrop toggles
+                            this.spawnAtLocation(worldserver, itemstack1);
+                            this.forceDrops = false; // Paper - Add missing forceDrop toggles
+                        }
+
+                        this.setItemSlot(EquipmentSlot.MAINHAND, new ItemStack(itemstack.getItem(), 1));
+                        this.usePlayerItem(player, hand, itemstack);
+                        return InteractionResult.SUCCESS_SERVER;
+                    }
                 }
 
-                this.setItemSlot(EquipmentSlot.MAINHAND, new ItemStack(itemStack.getItem(), 1));
-                this.usePlayerItem(player, hand, itemStack);
+                return InteractionResult.PASS;
             }
 
             return InteractionResult.SUCCESS_SERVER;
@@ -653,11 +691,7 @@
     @Nullable
     @Override
     protected SoundEvent getAmbientSound() {
-        if (this.isAggressive()) {
-            return SoundEvents.PANDA_AGGRESSIVE_AMBIENT;
-        } else {
-            return this.isWorried() ? SoundEvents.PANDA_WORRIED_AMBIENT : SoundEvents.PANDA_AMBIENT;
-        }
+        return this.isAggressive() ? SoundEvents.PANDA_AGGRESSIVE_AMBIENT : (this.isWorried() ? SoundEvents.PANDA_WORRIED_AMBIENT : SoundEvents.PANDA_AMBIENT);
     }
 
     @Override
@@ -688,21 +722,33 @@
 
     @Override
     public EntityDimensions getDefaultDimensions(Pose pose) {
-        return this.isBaby() ? BABY_DIMENSIONS : super.getDefaultDimensions(pose);
+        return this.isBaby() ? Panda.BABY_DIMENSIONS : super.getDefaultDimensions(pose);
     }
 
     private static boolean canPickUpAndEat(ItemEntity itemEntity) {
         return itemEntity.getItem().is(ItemTags.PANDA_EATS_FROM_GROUND) && itemEntity.isAlive() && !itemEntity.hasPickUpDelay();
     }
 
+    private static class PandaMoveControl extends MoveControl {
+
+        private final Panda panda;
+
+        public PandaMoveControl(Panda panda) {
+            super(panda);
+            this.panda = panda;
+        }
+
+        @Override
+        public void tick() {
+            if (this.panda.canPerformAction()) {
+                super.tick();
+            }
+        }
+    }
+
     public static enum Gene implements StringRepresentable {
-        NORMAL(0, "normal", false),
-        LAZY(1, "lazy", false),
-        WORRIED(2, "worried", false),
-        PLAYFUL(3, "playful", false),
-        BROWN(4, "brown", true),
-        WEAK(5, "weak", true),
-        AGGRESSIVE(6, "aggressive", false);
+
+        NORMAL(0, "normal", false), LAZY(1, "lazy", false), WORRIED(2, "worried", false), PLAYFUL(3, "playful", false), BROWN(4, "brown", true), WEAK(5, "weak", true), AGGRESSIVE(6, "aggressive", false);
 
         public static final StringRepresentable.EnumCodec<Panda.Gene> CODEC = StringRepresentable.fromEnum(Panda.Gene::values);
         private static final IntFunction<Panda.Gene> BY_ID = ByIdMap.continuous(Panda.Gene::getId, values(), ByIdMap.OutOfBoundsStrategy.ZERO);
@@ -711,10 +757,10 @@
         private final String name;
         private final boolean isRecessive;
 
-        private Gene(final int id, final String name, final boolean recessive) {
-            this.id = id;
-            this.name = name;
-            this.isRecessive = recessive;
+        private Gene(final int i, final String s, final boolean flag) {
+            this.id = i;
+            this.name = s;
+            this.isRecessive = flag;
         }
 
         public int getId() {
@@ -731,68 +777,46 @@
         }
 
         static Panda.Gene getVariantFromGenes(Panda.Gene mainGene, Panda.Gene hiddenGene) {
-            if (mainGene.isRecessive()) {
-                return mainGene == hiddenGene ? mainGene : NORMAL;
-            } else {
-                return mainGene;
-            }
+            return mainGene.isRecessive() ? (mainGene == hiddenGene ? mainGene : Panda.Gene.NORMAL) : mainGene;
         }
 
         public static Panda.Gene byId(int id) {
-            return BY_ID.apply(id);
+            return (Panda.Gene) Panda.Gene.BY_ID.apply(id);
         }
 
         public static Panda.Gene byName(String name) {
-            return CODEC.byName(name, NORMAL);
+            return (Panda.Gene) Panda.Gene.CODEC.byName(name, Panda.Gene.NORMAL); // CraftBukkit - decompile error
         }
 
         public static Panda.Gene getRandom(RandomSource random) {
             int i = random.nextInt(16);
-            if (i == 0) {
-                return LAZY;
-            } else if (i == 1) {
-                return WORRIED;
-            } else if (i == 2) {
-                return PLAYFUL;
-            } else if (i == 4) {
-                return AGGRESSIVE;
-            } else if (i < 9) {
-                return WEAK;
-            } else {
-                return i < 11 ? BROWN : NORMAL;
-            }
-        }
-    }
-
-    static class PandaAttackGoal extends MeleeAttackGoal {
-        private final Panda panda;
 
-        public PandaAttackGoal(Panda panda, double speed, boolean pauseWhenMobIdle) {
-            super(panda, speed, pauseWhenMobIdle);
-            this.panda = panda;
-        }
-
-        @Override
-        public boolean canUse() {
-            return this.panda.canPerformAction() && super.canUse();
+            return i == 0 ? Panda.Gene.LAZY : (i == 1 ? Panda.Gene.WORRIED : (i == 2 ? Panda.Gene.PLAYFUL : (i == 4 ? Panda.Gene.AGGRESSIVE : (i < 9 ? Panda.Gene.WEAK : (i < 11 ? Panda.Gene.BROWN : Panda.Gene.NORMAL)))));
         }
     }
 
-    static class PandaAvoidGoal<T extends LivingEntity> extends AvoidEntityGoal<T> {
+    private static class PandaPanicGoal extends PanicGoal {
+
         private final Panda panda;
 
-        public PandaAvoidGoal(Panda panda, Class<T> fleeFromType, float distance, double slowSpeed, double fastSpeed) {
-            super(panda, fleeFromType, distance, slowSpeed, fastSpeed, EntitySelector.NO_SPECTATORS::test);
+        public PandaPanicGoal(Panda panda, double speed) {
+            super(panda, speed, DamageTypeTags.PANIC_ENVIRONMENTAL_CAUSES);
             this.panda = panda;
         }
 
         @Override
-        public boolean canUse() {
-            return this.panda.isWorried() && this.panda.canPerformAction() && super.canUse();
+        public boolean canContinueToUse() {
+            if (this.panda.isSitting()) {
+                this.panda.getNavigation().stop();
+                return false;
+            } else {
+                return super.canContinueToUse();
+            }
         }
     }
 
-    static class PandaBreedGoal extends BreedGoal {
+    private static class PandaBreedGoal extends BreedGoal {
+
         private final Panda panda;
         private int unhappyCooldown;
 
@@ -803,34 +827,37 @@
 
         @Override
         public boolean canUse() {
-            if (!super.canUse() || this.panda.getUnhappyCounter() != 0) {
-                return false;
-            } else if (!this.canFindBamboo()) {
-                if (this.unhappyCooldown <= this.panda.tickCount) {
-                    this.panda.setUnhappyCounter(32);
-                    this.unhappyCooldown = this.panda.tickCount + 600;
-                    if (this.panda.isEffectiveAi()) {
-                        Player player = this.level.getNearestPlayer(Panda.BREED_TARGETING, this.panda);
-                        this.panda.lookAtPlayerGoal.setTarget(player);
+            if (super.canUse() && this.panda.getUnhappyCounter() == 0) {
+                if (!this.canFindBamboo()) {
+                    if (this.unhappyCooldown <= this.panda.tickCount) {
+                        this.panda.setUnhappyCounter(32);
+                        this.unhappyCooldown = this.panda.tickCount + 600;
+                        if (this.panda.isEffectiveAi()) {
+                            Player entityhuman = this.level.getNearestPlayer(Panda.BREED_TARGETING, this.panda);
+
+                            this.panda.lookAtPlayerGoal.setTarget(entityhuman);
+                        }
                     }
-                }
 
-                return false;
+                    return false;
+                } else {
+                    return true;
+                }
             } else {
-                return true;
+                return false;
             }
         }
 
         private boolean canFindBamboo() {
-            BlockPos blockPos = this.panda.blockPosition();
-            BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
+            BlockPos blockposition = this.panda.blockPosition();
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
 
-            for (int i = 0; i < 3; i++) {
-                for (int j = 0; j < 8; j++) {
+            for (int i = 0; i < 3; ++i) {
+                for (int j = 0; j < 8; ++j) {
                     for (int k = 0; k <= j; k = k > 0 ? -k : 1 - k) {
                         for (int l = k < j && k > -j ? j : 0; l <= j; l = l > 0 ? -l : 1 - l) {
-                            mutableBlockPos.setWithOffset(blockPos, k, i, l);
-                            if (this.level.getBlockState(mutableBlockPos).is(Blocks.BAMBOO)) {
+                            blockposition_mutableblockposition.setWithOffset(blockposition, k, i, l);
+                            if (this.level.getBlockState(blockposition_mutableblockposition).is(Blocks.BAMBOO)) {
                                 return true;
                             }
                         }
@@ -842,33 +869,100 @@
         }
     }
 
-    static class PandaHurtByTargetGoal extends HurtByTargetGoal {
+    private static class PandaAttackGoal extends MeleeAttackGoal {
+
         private final Panda panda;
 
-        public PandaHurtByTargetGoal(Panda panda, Class<?>... noRevengeTypes) {
-            super(panda, noRevengeTypes);
+        public PandaAttackGoal(Panda panda, double speed, boolean pauseWhenMobIdle) {
+            super(panda, speed, pauseWhenMobIdle);
+            this.panda = panda;
+        }
+
+        @Override
+        public boolean canUse() {
+            return this.panda.canPerformAction() && super.canUse();
+        }
+    }
+
+    private static class PandaAvoidGoal<T extends LivingEntity> extends AvoidEntityGoal<T> {
+
+        private final Panda panda;
+
+        public PandaAvoidGoal(Panda panda, Class<T> fleeFromType, float distance, double slowSpeed, double fastSpeed) {
+            // Predicate predicate = IEntitySelector.NO_SPECTATORS;
+
+            // Objects.requireNonNull(predicate);
+            super(panda, fleeFromType, distance, slowSpeed, fastSpeed, EntitySelector.NO_SPECTATORS::test);
             this.panda = panda;
         }
 
         @Override
+        public boolean canUse() {
+            return this.panda.isWorried() && this.panda.canPerformAction() && super.canUse();
+        }
+    }
+
+    private class PandaSitGoal extends Goal {
+
+        private int cooldown;
+
+        public PandaSitGoal() {
+            this.setFlags(EnumSet.of(Goal.Flag.MOVE));
+        }
+
+        @Override
+        public boolean canUse() {
+            return this.cooldown <= Panda.this.tickCount && !Panda.this.isBaby() && !Panda.this.isInWater() && Panda.this.canPerformAction() && Panda.this.getUnhappyCounter() <= 0 ? (!Panda.this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty() ? true : !Panda.this.level().getEntitiesOfClass(ItemEntity.class, Panda.this.getBoundingBox().inflate(6.0D, 6.0D, 6.0D), Panda::canPickUpAndEat).isEmpty()) : false;
+        }
+
+        @Override
         public boolean canContinueToUse() {
-            if (!this.panda.gotBamboo && !this.panda.didBite) {
-                return super.canContinueToUse();
+            return !Panda.this.isInWater() && (Panda.this.isLazy() || Panda.this.random.nextInt(reducedTickDelay(600)) != 1) ? Panda.this.random.nextInt(reducedTickDelay(2000)) != 1 : false;
+        }
+
+        @Override
+        public void tick() {
+            if (!Panda.this.isSitting() && !Panda.this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty()) {
+                Panda.this.tryToSit();
+            }
+
+        }
+
+        @Override
+        public void start() {
+            if (Panda.this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty()) {
+                List<ItemEntity> list = Panda.this.level().getEntitiesOfClass(ItemEntity.class, Panda.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Panda::canPickUpAndEat);
+
+                if (!list.isEmpty()) {
+                    Panda.this.getNavigation().moveTo((Entity) list.getFirst(), 1.2000000476837158D);
+                }
             } else {
-                this.panda.setTarget(null);
-                return false;
+                Panda.this.tryToSit();
             }
+
+            this.cooldown = 0;
         }
 
         @Override
-        protected void alertOther(Mob mob, LivingEntity target) {
-            if (mob instanceof Panda && mob.isAggressive()) {
-                mob.setTarget(target);
+        public void stop() {
+            ItemStack itemstack = Panda.this.getItemBySlot(EquipmentSlot.MAINHAND);
+
+            if (!itemstack.isEmpty()) {
+                Panda.this.forceDrops = true; // Paper - Add missing forceDrop toggles
+                Panda.this.spawnAtLocation(getServerLevel(Panda.this.level()), itemstack);
+                Panda.this.forceDrops = false; // Paper - Add missing forceDrop toggles
+                Panda.this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
+                int i = Panda.this.isLazy() ? Panda.this.random.nextInt(50) + 10 : Panda.this.random.nextInt(150) + 10;
+
+                this.cooldown = Panda.this.tickCount + i * 20;
             }
+
+            Panda.this.sit(false);
         }
     }
 
-    static class PandaLieOnBackGoal extends Goal {
+    private static class PandaLieOnBackGoal extends Goal {
+
         private final Panda panda;
         private int cooldown;
 
@@ -878,17 +972,12 @@
 
         @Override
         public boolean canUse() {
-            return this.cooldown < this.panda.tickCount
-                && this.panda.isLazy()
-                && this.panda.canPerformAction()
-                && this.panda.random.nextInt(reducedTickDelay(400)) == 1;
+            return this.cooldown < this.panda.tickCount && this.panda.isLazy() && this.panda.canPerformAction() && this.panda.random.nextInt(reducedTickDelay(400)) == 1;
         }
 
         @Override
         public boolean canContinueToUse() {
-            return !this.panda.isInWater()
-                && (this.panda.isLazy() || this.panda.random.nextInt(reducedTickDelay(600)) != 1)
-                && this.panda.random.nextInt(reducedTickDelay(2000)) != 1;
+            return !this.panda.isInWater() && (this.panda.isLazy() || this.panda.random.nextInt(reducedTickDelay(600)) != 1) ? this.panda.random.nextInt(reducedTickDelay(2000)) != 1 : false;
         }
 
         @Override
@@ -904,7 +993,32 @@
         }
     }
 
-    static class PandaLookAtPlayerGoal extends LookAtPlayerGoal {
+    private static class PandaSneezeGoal extends Goal {
+
+        private final Panda panda;
+
+        public PandaSneezeGoal(Panda panda) {
+            this.panda = panda;
+        }
+
+        @Override
+        public boolean canUse() {
+            return this.panda.isBaby() && this.panda.canPerformAction() ? (this.panda.isWeak() && this.panda.random.nextInt(reducedTickDelay(500)) == 1 ? true : this.panda.random.nextInt(reducedTickDelay(6000)) == 1) : false;
+        }
+
+        @Override
+        public boolean canContinueToUse() {
+            return false;
+        }
+
+        @Override
+        public void start() {
+            this.panda.sneeze(true);
+        }
+    }
+
+    private static class PandaLookAtPlayerGoal extends LookAtPlayerGoal {
+
         private final Panda panda;
 
         public PandaLookAtPlayerGoal(Panda panda, Class<? extends LivingEntity> targetType, float range) {
@@ -927,24 +1041,14 @@
                 return false;
             } else {
                 if (this.lookAt == null) {
-                    ServerLevel serverLevel = getServerLevel(this.mob);
+                    ServerLevel worldserver = getServerLevel((Entity) this.mob);
+
                     if (this.lookAtType == Player.class) {
-                        this.lookAt = serverLevel.getNearestPlayer(this.lookAtContext, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
+                        this.lookAt = worldserver.getNearestPlayer(this.lookAtContext, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
                     } else {
-                        this.lookAt = serverLevel.getNearestEntity(
-                            this.mob
-                                .level()
-                                .getEntitiesOfClass(
-                                    this.lookAtType,
-                                    this.mob.getBoundingBox().inflate((double)this.lookDistance, 3.0, (double)this.lookDistance),
-                                    livingEntity -> true
-                                ),
-                            this.lookAtContext,
-                            this.mob,
-                            this.mob.getX(),
-                            this.mob.getEyeY(),
-                            this.mob.getZ()
-                        );
+                        this.lookAt = worldserver.getNearestEntity(this.mob.level().getEntitiesOfClass(this.lookAtType, this.mob.getBoundingBox().inflate((double) this.lookDistance, 3.0D, (double) this.lookDistance), (entityliving) -> {
+                            return true;
+                        }), this.lookAtContext, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
                     }
                 }
 
@@ -957,45 +1061,12 @@
             if (this.lookAt != null) {
                 super.tick();
             }
-        }
-    }
-
-    static class PandaMoveControl extends MoveControl {
-        private final Panda panda;
-
-        public PandaMoveControl(Panda panda) {
-            super(panda);
-            this.panda = panda;
-        }
 
-        @Override
-        public void tick() {
-            if (this.panda.canPerformAction()) {
-                super.tick();
-            }
         }
     }
 
-    static class PandaPanicGoal extends PanicGoal {
-        private final Panda panda;
-
-        public PandaPanicGoal(Panda panda, double speed) {
-            super(panda, speed, DamageTypeTags.PANIC_ENVIRONMENTAL_CAUSES);
-            this.panda = panda;
-        }
-
-        @Override
-        public boolean canContinueToUse() {
-            if (this.panda.isSitting()) {
-                this.panda.getNavigation().stop();
-                return false;
-            } else {
-                return super.canContinueToUse();
-            }
-        }
-    }
+    private static class PandaRollGoal extends Goal {
 
-    static class PandaRollGoal extends Goal {
         private final Panda panda;
 
         public PandaRollGoal(Panda panda) {
@@ -1009,14 +1080,13 @@
                 if (!this.panda.canPerformAction()) {
                     return false;
                 } else {
-                    float f = this.panda.getYRot() * (float) (Math.PI / 180.0);
-                    float g = -Mth.sin(f);
-                    float h = Mth.cos(f);
-                    int i = (double)Math.abs(g) > 0.5 ? Mth.sign((double)g) : 0;
-                    int j = (double)Math.abs(h) > 0.5 ? Mth.sign((double)h) : 0;
-                    return this.panda.level().getBlockState(this.panda.blockPosition().offset(i, -1, j)).isAir()
-                        || this.panda.isPlayful() && this.panda.random.nextInt(reducedTickDelay(60)) == 1
-                        || this.panda.random.nextInt(reducedTickDelay(500)) == 1;
+                    float f = this.panda.getYRot() * 0.017453292F;
+                    float f1 = -Mth.sin(f);
+                    float f2 = Mth.cos(f);
+                    int i = (double) Math.abs(f1) > 0.5D ? Mth.sign((double) f1) : 0;
+                    int j = (double) Math.abs(f2) > 0.5D ? Mth.sign((double) f2) : 0;
+
+                    return this.panda.level().getBlockState(this.panda.blockPosition().offset(i, -1, j)).isAir() ? true : (this.panda.isPlayful() && this.panda.random.nextInt(reducedTickDelay(60)) == 1 ? true : this.panda.random.nextInt(reducedTickDelay(500)) == 1);
                 }
             } else {
                 return false;
@@ -1039,93 +1109,31 @@
         }
     }
 
-    class PandaSitGoal extends Goal {
-        private int cooldown;
+    private static class PandaHurtByTargetGoal extends HurtByTargetGoal {
 
-        public PandaSitGoal() {
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE));
-        }
+        private final Panda panda;
 
-        @Override
-        public boolean canUse() {
-            return this.cooldown <= Panda.this.tickCount
-                && !Panda.this.isBaby()
-                && !Panda.this.isInWater()
-                && Panda.this.canPerformAction()
-                && Panda.this.getUnhappyCounter() <= 0
-                && (
-                    !Panda.this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty()
-                        || !Panda.this.level()
-                            .getEntitiesOfClass(ItemEntity.class, Panda.this.getBoundingBox().inflate(6.0, 6.0, 6.0), Panda::canPickUpAndEat)
-                            .isEmpty()
-                );
+        public PandaHurtByTargetGoal(Panda panda, Class<?>... noRevengeTypes) {
+            super(panda, noRevengeTypes);
+            this.panda = panda;
         }
 
         @Override
         public boolean canContinueToUse() {
-            return !Panda.this.isInWater()
-                && (Panda.this.isLazy() || Panda.this.random.nextInt(reducedTickDelay(600)) != 1)
-                && Panda.this.random.nextInt(reducedTickDelay(2000)) != 1;
-        }
-
-        @Override
-        public void tick() {
-            if (!Panda.this.isSitting() && !Panda.this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty()) {
-                Panda.this.tryToSit();
-            }
-        }
-
-        @Override
-        public void start() {
-            if (Panda.this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty()) {
-                List<ItemEntity> list = Panda.this.level()
-                    .getEntitiesOfClass(ItemEntity.class, Panda.this.getBoundingBox().inflate(8.0, 8.0, 8.0), Panda::canPickUpAndEat);
-                if (!list.isEmpty()) {
-                    Panda.this.getNavigation().moveTo(list.getFirst(), 1.2F);
-                }
+            if (!this.panda.gotBamboo && !this.panda.didBite) {
+                return super.canContinueToUse();
             } else {
-                Panda.this.tryToSit();
+                this.panda.setTarget((LivingEntity) null);
+                return false;
             }
-
-            this.cooldown = 0;
         }
 
         @Override
-        public void stop() {
-            ItemStack itemStack = Panda.this.getItemBySlot(EquipmentSlot.MAINHAND);
-            if (!itemStack.isEmpty()) {
-                Panda.this.spawnAtLocation(getServerLevel(Panda.this.level()), itemStack);
-                Panda.this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
-                int i = Panda.this.isLazy() ? Panda.this.random.nextInt(50) + 10 : Panda.this.random.nextInt(150) + 10;
-                this.cooldown = Panda.this.tickCount + i * 20;
+        protected void alertOther(Mob mob, LivingEntity target) {
+            if (mob instanceof Panda && mob.isAggressive()) {
+                mob.setTarget(target, EntityTargetEvent.TargetReason.TARGET_ATTACKED_ENTITY, true); // CraftBukkit
             }
 
-            Panda.this.sit(false);
-        }
-    }
-
-    static class PandaSneezeGoal extends Goal {
-        private final Panda panda;
-
-        public PandaSneezeGoal(Panda panda) {
-            this.panda = panda;
-        }
-
-        @Override
-        public boolean canUse() {
-            return this.panda.isBaby()
-                && this.panda.canPerformAction()
-                && (this.panda.isWeak() && this.panda.random.nextInt(reducedTickDelay(500)) == 1 || this.panda.random.nextInt(reducedTickDelay(6000)) == 1);
-        }
-
-        @Override
-        public boolean canContinueToUse() {
-            return false;
-        }
-
-        @Override
-        public void start() {
-            this.panda.sneeze(true);
         }
     }
 }
