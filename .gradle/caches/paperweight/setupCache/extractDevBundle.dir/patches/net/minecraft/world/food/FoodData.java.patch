--- a/net/minecraft/world/food/FoodData.java
+++ b/net/minecraft/world/food/FoodData.java
@@ -1,21 +1,32 @@
 package net.minecraft.world.food;
 
+import net.minecraft.world.level.GameRules;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.protocol.game.ClientboundSetHealthPacket;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.Mth;
 import net.minecraft.world.Difficulty;
-import net.minecraft.world.level.GameRules;
+import net.minecraft.world.item.ItemStack;
+// CraftBukkit end
 
 public class FoodData {
+
     public int foodLevel = 20;
     public float saturationLevel = 5.0F;
     public float exhaustionLevel;
     private int tickTimer;
+    // CraftBukkit start
+    public int saturatedRegenRate = 10;
+    public int unsaturatedRegenRate = 80;
+    public int starvationRate = 80;
+    // CraftBukkit end
+
+    public FoodData() {}
 
     private void add(int nutrition, float saturation) {
         this.foodLevel = Mth.clamp(nutrition + this.foodLevel, 0, 20);
-        this.saturationLevel = Mth.clamp(saturation + this.saturationLevel, 0.0F, (float)this.foodLevel);
+        this.saturationLevel = Mth.clamp(saturation + this.saturationLevel, 0.0F, (float) this.foodLevel);
     }
 
     public void eat(int food, float saturationModifier) {
@@ -26,39 +37,66 @@
         this.add(foodComponent.nutrition(), foodComponent.saturation());
     }
 
+    // CraftBukkit start
+    public void eat(FoodProperties foodinfo, ItemStack itemstack, ServerPlayer entityplayer) {
+        int oldFoodLevel = this.foodLevel;
+
+        org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(entityplayer, foodinfo.nutrition() + oldFoodLevel, itemstack);
+
+        if (!event.isCancelled()) {
+            this.add(event.getFoodLevel() - oldFoodLevel, foodinfo.saturation());
+        }
+
+        entityplayer.getBukkitEntity().sendHealthUpdate();
+    }
+    // CraftBukkit end
+
     public void tick(ServerPlayer player) {
-        ServerLevel serverLevel = player.serverLevel();
-        Difficulty difficulty = serverLevel.getDifficulty();
+        ServerLevel worldserver = player.serverLevel();
+        Difficulty enumdifficulty = worldserver.getDifficulty();
+
         if (this.exhaustionLevel > 4.0F) {
             this.exhaustionLevel -= 4.0F;
             if (this.saturationLevel > 0.0F) {
                 this.saturationLevel = Math.max(this.saturationLevel - 1.0F, 0.0F);
-            } else if (difficulty != Difficulty.PEACEFUL) {
-                this.foodLevel = Math.max(this.foodLevel - 1, 0);
+            } else if (enumdifficulty != Difficulty.PEACEFUL) {
+                // CraftBukkit start
+                org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(player, Math.max(this.foodLevel - 1, 0));
+
+                if (!event.isCancelled()) {
+                    this.foodLevel = event.getFoodLevel();
+                }
+
+                player.connection.send(new ClientboundSetHealthPacket(player.getBukkitEntity().getScaledHealth(), this.foodLevel, this.saturationLevel));
+                // CraftBukkit end
             }
         }
 
-        boolean bl = serverLevel.getGameRules().getBoolean(GameRules.RULE_NATURAL_REGENERATION);
-        if (bl && this.saturationLevel > 0.0F && player.isHurt() && this.foodLevel >= 20) {
-            this.tickTimer++;
-            if (this.tickTimer >= 10) {
+        boolean flag = worldserver.getGameRules().getBoolean(GameRules.RULE_NATURAL_REGENERATION);
+
+        if (flag && this.saturationLevel > 0.0F && player.isHurt() && this.foodLevel >= 20) {
+            ++this.tickTimer;
+            if (this.tickTimer >= this.saturatedRegenRate) { // CraftBukkit
                 float f = Math.min(this.saturationLevel, 6.0F);
-                player.heal(f / 6.0F);
-                this.addExhaustion(f);
+
+                player.heal(f / 6.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.SATIATED, true); // CraftBukkit - added RegainReason // Paper - This is fast regen
+                // this.addExhaustion(f); CraftBukkit - EntityExhaustionEvent
+                player.causeFoodExhaustion(f, org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.REGEN); // CraftBukkit - EntityExhaustionEvent
                 this.tickTimer = 0;
             }
-        } else if (bl && this.foodLevel >= 18 && player.isHurt()) {
-            this.tickTimer++;
-            if (this.tickTimer >= 80) {
-                player.heal(1.0F);
-                this.addExhaustion(6.0F);
+        } else if (flag && this.foodLevel >= 18 && player.isHurt()) {
+            ++this.tickTimer;
+            if (this.tickTimer >= this.unsaturatedRegenRate) { // CraftBukkit - add regen rate manipulation
+                player.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.SATIATED); // CraftBukkit - added RegainReason
+                // this.addExhaustion(6.0F); CraftBukkit - EntityExhaustionEvent
+                player.causeFoodExhaustion(player.level().spigotConfig.regenExhaustion, org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.REGEN); // CraftBukkit - EntityExhaustionEvent // Spigot - Change to use configurable value
                 this.tickTimer = 0;
             }
         } else if (this.foodLevel <= 0) {
-            this.tickTimer++;
-            if (this.tickTimer >= 80) {
-                if (player.getHealth() > 10.0F || difficulty == Difficulty.HARD || player.getHealth() > 1.0F && difficulty == Difficulty.NORMAL) {
-                    player.hurtServer(serverLevel, player.damageSources().starve(), 1.0F);
+            ++this.tickTimer;
+            if (this.tickTimer >= this.starvationRate) { // CraftBukkit - add regen rate manipulation
+                if (player.getHealth() > 10.0F || enumdifficulty == Difficulty.HARD || player.getHealth() > 1.0F && enumdifficulty == Difficulty.NORMAL) {
+                    player.hurtServer(worldserver, player.damageSources().starve(), 1.0F);
                 }
 
                 this.tickTimer = 0;
@@ -66,6 +104,7 @@
         } else {
             this.tickTimer = 0;
         }
+
     }
 
     public void readAdditionalSaveData(CompoundTag nbt) {
@@ -75,6 +114,7 @@
             this.saturationLevel = nbt.getFloat("foodSaturationLevel");
             this.exhaustionLevel = nbt.getFloat("foodExhaustionLevel");
         }
+
     }
 
     public void addAdditionalSaveData(CompoundTag nbt) {
