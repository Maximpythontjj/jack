--- a/net/minecraft/world/entity/ConversionType.java
+++ b/net/minecraft/world/entity/ConversionType.java
@@ -1,5 +1,10 @@
 package net.minecraft.world.entity;
 
+import java.util.Iterator;
+import java.util.Objects;
+import java.util.Optional;
+import java.util.Set;
+import net.minecraft.core.BlockPos;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
@@ -7,38 +12,51 @@
 import net.minecraft.world.entity.monster.Zombie;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.scores.Scoreboard;
+import org.bukkit.event.entity.EntityRemoveEvent;
+// CraftBukkit end
 
 public enum ConversionType {
+
     SINGLE(true) {
         @Override
         void convert(Mob oldEntity, Mob newEntity, ConversionParams context) {
             Entity entity = oldEntity.getFirstPassenger();
+
             newEntity.copyPosition(oldEntity);
             newEntity.setDeltaMovement(oldEntity.getDeltaMovement());
+            Entity entity1;
+
             if (entity != null) {
                 entity.stopRiding();
                 entity.boardingCooldown = 0;
+                Iterator iterator = newEntity.getPassengers().iterator();
 
-                for (Entity entity2 : newEntity.getPassengers()) {
-                    entity2.stopRiding();
-                    entity2.remove(Entity.RemovalReason.DISCARDED);
+                while (iterator.hasNext()) {
+                    entity1 = (Entity) iterator.next();
+                    entity1.stopRiding();
+                    entity1.remove(Entity.RemovalReason.DISCARDED, EntityRemoveEvent.Cause.TRANSFORMATION); // CraftBukkit - add Bukkit remove cause
                 }
 
                 entity.startRiding(newEntity);
             }
 
-            Entity entity3 = oldEntity.getVehicle();
-            if (entity3 != null) {
+            Entity entity2 = oldEntity.getVehicle();
+
+            if (entity2 != null) {
                 oldEntity.stopRiding();
-                newEntity.startRiding(entity3);
+                newEntity.startRiding(entity2);
             }
 
             if (context.keepEquipment()) {
-                for (EquipmentSlot equipmentSlot : EquipmentSlot.VALUES) {
-                    ItemStack itemStack = oldEntity.getItemBySlot(equipmentSlot);
-                    if (!itemStack.isEmpty()) {
-                        newEntity.setItemSlot(equipmentSlot, itemStack.copyAndClear());
-                        newEntity.setDropChance(equipmentSlot, oldEntity.getEquipmentDropChance(equipmentSlot));
+                Iterator iterator1 = EquipmentSlot.VALUES.iterator();
+
+                while (iterator1.hasNext()) {
+                    EquipmentSlot enumitemslot = (EquipmentSlot) iterator1.next();
+                    ItemStack itemstack = oldEntity.getItemBySlot(enumitemslot);
+
+                    if (!itemstack.isEmpty()) {
+                        newEntity.setItemSlot(enumitemslot, itemstack.copyAndClear());
+                        newEntity.setDropChance(enumitemslot, oldEntity.getEquipmentDropChance(enumitemslot));
                     }
                 }
             }
@@ -49,10 +67,13 @@
             newEntity.hurtTime = oldEntity.hurtTime;
             newEntity.yBodyRot = oldEntity.yBodyRot;
             newEntity.setOnGround(oldEntity.onGround());
-            oldEntity.getSleepingPos().ifPresent(newEntity::setSleepingPos);
-            Entity entity4 = oldEntity.getLeashHolder();
-            if (entity4 != null) {
-                newEntity.setLeashedTo(entity4, true);
+            Optional<BlockPos> optional = oldEntity.getSleepingPos(); // CraftBukkit - decompile error
+
+            Objects.requireNonNull(newEntity);
+            optional.ifPresent(newEntity::setSleepingPos);
+            entity1 = oldEntity.getLeashHolder();
+            if (entity1 != null) {
+                newEntity.setLeashedTo(entity1, true);
             }
 
             this.convertCommon(oldEntity, newEntity, context);
@@ -62,12 +83,14 @@
         @Override
         void convert(Mob oldEntity, Mob newEntity, ConversionParams context) {
             Entity entity = oldEntity.getFirstPassenger();
+
             if (entity != null) {
                 entity.stopRiding();
             }
 
-            Entity entity2 = oldEntity.getLeashHolder();
-            if (entity2 != null) {
+            Entity entity1 = oldEntity.getLeashHolder();
+
+            if (entity1 != null) {
                 oldEntity.dropLeash(true, true);
             }
 
@@ -77,8 +100,8 @@
 
     private final boolean discardAfterConversion;
 
-    ConversionType(final boolean discardOldEntity) {
-        this.discardAfterConversion = discardOldEntity;
+    ConversionType(final boolean flag) {
+        this.discardAfterConversion = flag;
     }
 
     public boolean shouldDiscardAfterConversion() {
@@ -89,25 +112,31 @@
 
     void convertCommon(Mob oldEntity, Mob newEntity, ConversionParams context) {
         newEntity.setAbsorptionAmount(oldEntity.getAbsorptionAmount());
+        Iterator iterator = oldEntity.getActiveEffects().iterator();
 
-        for (MobEffectInstance mobEffectInstance : oldEntity.getActiveEffects()) {
-            newEntity.addEffect(new MobEffectInstance(mobEffectInstance));
+        while (iterator.hasNext()) {
+            MobEffectInstance mobeffect = (MobEffectInstance) iterator.next();
+
+            newEntity.addEffect(new MobEffectInstance(mobeffect));
         }
 
         if (oldEntity.isBaby()) {
             newEntity.setBaby(true);
         }
 
-        if (oldEntity instanceof AgeableMob ageableMob && newEntity instanceof AgeableMob ageableMob2) {
-            ageableMob2.setAge(ageableMob.getAge());
-            ageableMob2.forcedAge = ageableMob.forcedAge;
-            ageableMob2.forcedAgeTimer = ageableMob.forcedAgeTimer;
+        if (oldEntity instanceof AgeableMob entityageable) {
+            if (newEntity instanceof AgeableMob entityageable1) {
+                entityageable1.setAge(entityageable.getAge());
+                entityageable1.forcedAge = entityageable.forcedAge;
+                entityageable1.forcedAgeTimer = entityageable.forcedAgeTimer;
+            }
         }
 
-        Brain<?> brain = oldEntity.getBrain();
-        Brain<?> brain2 = newEntity.getBrain();
-        if (brain.checkMemory(MemoryModuleType.ANGRY_AT, MemoryStatus.REGISTERED) && brain.hasMemoryValue(MemoryModuleType.ANGRY_AT)) {
-            brain2.setMemory(MemoryModuleType.ANGRY_AT, brain.getMemory(MemoryModuleType.ANGRY_AT));
+        Brain<?> behaviorcontroller = oldEntity.getBrain();
+        Brain<?> behaviorcontroller1 = newEntity.getBrain();
+
+        if (behaviorcontroller.checkMemory(MemoryModuleType.ANGRY_AT, MemoryStatus.REGISTERED) && behaviorcontroller.hasMemoryValue(MemoryModuleType.ANGRY_AT)) {
+            behaviorcontroller1.setMemory(MemoryModuleType.ANGRY_AT, behaviorcontroller.getMemory(MemoryModuleType.ANGRY_AT));
         }
 
         if (context.preserveCanPickUpLoot()) {
@@ -130,17 +159,24 @@
         newEntity.setNoGravity(oldEntity.isNoGravity());
         newEntity.setPortalCooldown(oldEntity.getPortalCooldown());
         newEntity.setSilent(oldEntity.isSilent());
-        oldEntity.getTags().forEach(newEntity::addTag);
+        Set<String> set = oldEntity.getTags(); // CraftBukkit - decompile error
+
+        Objects.requireNonNull(newEntity);
+        set.forEach(newEntity::addTag);
         if (context.team() != null) {
             Scoreboard scoreboard = newEntity.level().getScoreboard();
+
             scoreboard.addPlayerToTeam(newEntity.getStringUUID(), context.team());
             if (oldEntity.getTeam() != null && oldEntity.getTeam() == context.team()) {
                 scoreboard.removePlayerFromTeam(oldEntity.getStringUUID(), oldEntity.getTeam());
             }
         }
 
-        if (oldEntity instanceof Zombie zombie && zombie.canBreakDoors() && newEntity instanceof Zombie zombie2) {
-            zombie2.setCanBreakDoors(true);
+        if (oldEntity instanceof Zombie entityzombie) {
+            if (entityzombie.canBreakDoors() && newEntity instanceof Zombie entityzombie1) {
+                entityzombie1.setCanBreakDoors(true);
+            }
         }
+
     }
 }
