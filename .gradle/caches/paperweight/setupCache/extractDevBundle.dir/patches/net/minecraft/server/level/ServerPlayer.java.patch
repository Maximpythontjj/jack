--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -4,11 +4,15 @@
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Either;
 import com.mojang.logging.LogUtils;
+import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import java.net.InetSocketAddress;
+import java.net.SocketAddress;
 import java.util.Collection;
 import java.util.HashSet;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.Set;
@@ -42,6 +46,7 @@
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.HoverEvent;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.OutgoingChatMessage;
 import net.minecraft.network.chat.RemoteChatSession;
 import net.minecraft.network.protocol.Packet;
@@ -99,10 +104,6 @@
 import net.minecraft.util.Unit;
 import net.minecraft.util.profiling.Profiler;
 import net.minecraft.util.profiling.ProfilerFiller;
-import net.minecraft.world.Container;
-import net.minecraft.world.Difficulty;
-import net.minecraft.world.InteractionHand;
-import net.minecraft.world.MenuProvider;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.DamageTypes;
 import net.minecraft.world.effect.MobEffectInstance;
@@ -131,15 +132,16 @@
 import net.minecraft.world.entity.player.ChatVisiblity;
 import net.minecraft.world.entity.player.Input;
 import net.minecraft.world.entity.player.Inventory;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.entity.projectile.ThrownEnderpearl;
 import net.minecraft.world.entity.vehicle.AbstractBoat;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
+import net.minecraft.world.food.FoodData;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.ContainerListener;
 import net.minecraft.world.inventory.ContainerSynchronizer;
 import net.minecraft.world.inventory.HorseInventoryMenu;
+import net.minecraft.world.inventory.InventoryMenu;
 import net.minecraft.world.inventory.ResultSlot;
 import net.minecraft.world.inventory.Slot;
 import net.minecraft.world.item.Item;
@@ -150,8 +152,6 @@
 import net.minecraft.world.item.WrittenBookItem;
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.item.crafting.RecipeHolder;
-import net.minecraft.world.item.enchantment.EnchantmentHelper;
-import net.minecraft.world.item.trading.MerchantOffers;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
@@ -159,12 +159,14 @@
 import net.minecraft.world.level.biome.BiomeManager;
 import net.minecraft.world.level.block.BedBlock;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.ChestBlock;
 import net.minecraft.world.level.block.HorizontalDirectionalBlock;
 import net.minecraft.world.level.block.RespawnAnchorBlock;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.CommandBlockEntity;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.portal.TeleportTransition;
 import net.minecraft.world.level.saveddata.maps.MapId;
@@ -175,26 +177,61 @@
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.ScoreAccess;
 import net.minecraft.world.scores.ScoreHolder;
+import org.slf4j.Logger;
+import net.minecraft.world.Container;
+import net.minecraft.world.Difficulty;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.MenuProvider;
+// CraftBukkit start
+import net.minecraft.world.damagesource.CombatTracker;
+import net.minecraft.world.item.enchantment.EnchantmentEffectComponents;
+import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import net.minecraft.world.item.trading.MerchantOffers;
+import net.minecraft.world.scores.Scoreboard;
 import net.minecraft.world.scores.Team;
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
-import org.slf4j.Logger;
+import io.papermc.paper.adventure.PaperAdventure; // Paper
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.WeatherType;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.CraftWorldBorder;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.event.CraftPortalEvent;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftDimensionUtil;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.EntityExhaustionEvent;
+import org.bukkit.event.player.PlayerBedLeaveEvent;
+import org.bukkit.event.player.PlayerChangedMainHandEvent;
+import org.bukkit.event.player.PlayerChangedWorldEvent;
+import org.bukkit.event.player.PlayerDropItemEvent;
+import org.bukkit.event.player.PlayerLocaleChangeEvent;
+import org.bukkit.event.player.PlayerPortalEvent;
+import org.bukkit.event.player.PlayerRespawnEvent;
+import org.bukkit.event.player.PlayerSpawnChangeEvent;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
+import org.bukkit.inventory.MainHand;
+// CraftBukkit end
+
+public class ServerPlayer extends net.minecraft.world.entity.player.Player implements ca.spottedleaf.moonrise.patches.chunk_system.player.ChunkSystemServerPlayer { // Paper - rewrite chunk system
 
-public class ServerPlayer extends Player {
     private static final Logger LOGGER = LogUtils.getLogger();
+    public long lastSave = MinecraftServer.currentTick; // Paper - Incremental chunk and player saving
     private static final int NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_XZ = 32;
     private static final int NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_Y = 10;
     private static final int FLY_STAT_RECORDING_SPEED = 25;
-    public static final double BLOCK_INTERACTION_DISTANCE_VERIFICATION_BUFFER = 1.0;
-    public static final double ENTITY_INTERACTION_DISTANCE_VERIFICATION_BUFFER = 3.0;
+    public static final double BLOCK_INTERACTION_DISTANCE_VERIFICATION_BUFFER = 1.0D;
+    public static final double ENTITY_INTERACTION_DISTANCE_VERIFICATION_BUFFER = 3.0D;
     public static final int ENDER_PEARL_TICKET_RADIUS = 2;
     public static final String ENDER_PEARLS_TAG = "ender_pearls";
     public static final String ENDER_PEARL_DIMENSION_TAG = "ender_pearl_dimension";
-    private static final AttributeModifier CREATIVE_BLOCK_INTERACTION_RANGE_MODIFIER = new AttributeModifier(
-        ResourceLocation.withDefaultNamespace("creative_mode_block_range"), 0.5, AttributeModifier.Operation.ADD_VALUE
-    );
-    private static final AttributeModifier CREATIVE_ENTITY_INTERACTION_RANGE_MODIFIER = new AttributeModifier(
-        ResourceLocation.withDefaultNamespace("creative_mode_entity_range"), 2.0, AttributeModifier.Operation.ADD_VALUE
-    );
+    private static final AttributeModifier CREATIVE_BLOCK_INTERACTION_RANGE_MODIFIER = new AttributeModifier(ResourceLocation.withDefaultNamespace("creative_mode_block_range"), 0.5D, AttributeModifier.Operation.ADD_VALUE);
+    private static final AttributeModifier CREATIVE_ENTITY_INTERACTION_RANGE_MODIFIER = new AttributeModifier(ResourceLocation.withDefaultNamespace("creative_mode_entity_range"), 2.0D, AttributeModifier.Operation.ADD_VALUE);
     public ServerGamePacketListenerImpl connection;
     public final MinecraftServer server;
     public final ServerPlayerGameMode gameMode;
@@ -211,10 +248,10 @@
     private boolean lastFoodSaturationZero = true;
     public int lastSentExp = -99999999;
     public int spawnInvulnerableTime = 60;
-    private ChatVisiblity chatVisibility = ChatVisiblity.FULL;
-    public ParticleStatus particleStatus = ParticleStatus.ALL;
-    private boolean canChatColor = true;
-    private long lastActionTime = Util.getMillis();
+    private ChatVisiblity chatVisibility;
+    public ParticleStatus particleStatus;
+    private boolean canChatColor;
+    private long lastActionTime;
     @Nullable
     private Entity camera;
     public boolean isChangingDimension;
@@ -224,17 +261,18 @@
     private Vec3 levitationStartPos;
     private int levitationStartTime;
     private boolean disconnected;
-    private int requestedViewDistance = 2;
-    public String language = "en_us";
+    private int requestedViewDistance;
+    public String language = null; // CraftBukkit - default  // Paper - default to null
+    public java.util.Locale adventure$locale = java.util.Locale.US; // Paper
     @Nullable
     private Vec3 startingToFallPosition;
     @Nullable
     private Vec3 enteredNetherPosition;
     @Nullable
     private Vec3 enteredLavaOnVehiclePosition;
-    private SectionPos lastSectionPos = SectionPos.of(0, 0, 0);
-    private ChunkTrackingView chunkTrackingView = ChunkTrackingView.EMPTY;
-    private ResourceKey<Level> respawnDimension = Level.OVERWORLD;
+    private SectionPos lastSectionPos;
+    private ChunkTrackingView chunkTrackingView;
+    private ResourceKey<Level> respawnDimension;
     @Nullable
     private BlockPos respawnPosition;
     private boolean respawnForced;
@@ -243,104 +281,277 @@
     private boolean textFilteringEnabled;
     private boolean allowsListing;
     private boolean spawnExtraParticlesOnFall;
-    public WardenSpawnTracker wardenSpawnTracker = new WardenSpawnTracker(0, 0, 0);
+    public WardenSpawnTracker wardenSpawnTracker;
     @Nullable
     private BlockPos raidOmenPosition;
-    private Vec3 lastKnownClientMovement = Vec3.ZERO;
-    private Input lastClientInput = Input.EMPTY;
-    private final Set<ThrownEnderpearl> enderPearls = new HashSet<>();
-    public final ContainerSynchronizer containerSynchronizer = new ContainerSynchronizer() {
-        @Override
-        public void sendInitialData(AbstractContainerMenu handler, NonNullList<ItemStack> stacks, ItemStack cursorStack, int[] properties) {
-            ServerPlayer.this.connection.send(new ClientboundContainerSetContentPacket(handler.containerId, handler.incrementStateId(), stacks, cursorStack));
+    private Vec3 lastKnownClientMovement;
+    private Input lastClientInput;
+    private final Set<ThrownEnderpearl> enderPearls;
+    public final ContainerSynchronizer containerSynchronizer;
+    private final ContainerListener containerListener;
+    @Nullable
+    private RemoteChatSession chatSession;
+    @Nullable
+    public final Object object;
+    private final CommandSource commandSource;
+    private int containerCounter;
+    public boolean wonGame;
+    private int containerUpdateDelay; // Paper - Configurable container update tick rate
+    public long loginTime; // Paper - Replace OfflinePlayer#getLastPlayed
+    public int patrolSpawnDelay; // Paper - Pillager patrol spawn settings and per player options
+    // Paper start - cancellable death event
+    public boolean queueHealthUpdatePacket;
+    public net.minecraft.network.protocol.game.ClientboundSetHealthPacket queuedHealthUpdatePacket;
+    // Paper end - cancellable death event
+    // Paper start - Optional per player mob spawns
+    public static final int MOBCATEGORY_TOTAL_ENUMS = net.minecraft.world.entity.MobCategory.values().length;
+    public final int[] mobCounts = new int[MOBCATEGORY_TOTAL_ENUMS]; // Paper
+    // Paper end - Optional per player mob spawns
+    public final int[] mobBackoffCounts = new int[MOBCATEGORY_TOTAL_ENUMS]; // Paper - per player mob count backoff
+
+    // CraftBukkit start
+    public CraftPlayer.TransferCookieConnection transferCookieConnection;
+    public String displayName;
+    public net.kyori.adventure.text.Component adventure$displayName; // Paper
+    public Component listName;
+    public int listOrder = 0;
+    public org.bukkit.Location compassTarget;
+    public int newExp = 0;
+    public int newLevel = 0;
+    public int newTotalExp = 0;
+    public boolean keepLevel = false;
+    public double maxHealthCache;
+    public boolean joining = true;
+    public boolean sentListPacket = false;
+    public boolean supressTrackerForLogin = false; // Paper - Fire PlayerJoinEvent when Player is actually ready
+    // CraftBukkit end
+    public boolean isRealPlayer; // Paper
+    public com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent playerNaturallySpawnedEvent; // Paper - PlayerNaturallySpawnCreaturesEvent
+    public @Nullable String clientBrandName = null; // Paper - Brand support
+    public org.bukkit.event.player.PlayerQuitEvent.QuitReason quitReason = null; // Paper - Add API for quit reason; there are a lot of changes to do if we change all methods leading to the event
+
+    // Paper start - rewrite chunk system
+    private ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.PlayerChunkLoaderData chunkLoader;
+    private final ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.ViewDistanceHolder viewDistanceHolder = new ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.ViewDistanceHolder();
+
+    @Override
+    public final boolean moonrise$isRealPlayer() {
+        return this.isRealPlayer;
+    }
+
+    @Override
+    public final void moonrise$setRealPlayer(final boolean real) {
+        this.isRealPlayer = real;
+    }
+
+    @Override
+    public final ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.PlayerChunkLoaderData moonrise$getChunkLoader() {
+        return this.chunkLoader;
+    }
+
+    @Override
+    public final void moonrise$setChunkLoader(final ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.PlayerChunkLoaderData loader) {
+        this.chunkLoader = loader;
+    }
+
+    @Override
+    public final ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.ViewDistanceHolder moonrise$getViewDistanceHolder() {
+        return this.viewDistanceHolder;
+    }
+    // Paper end - rewrite chunk system
+
+    public ServerPlayer(MinecraftServer server, ServerLevel world, GameProfile profile, ClientInformation clientOptions) {
+        super(world, world.getSharedSpawnPos(), world.getSharedSpawnAngle(), profile);
+        this.chatVisibility = ChatVisiblity.FULL;
+        this.particleStatus = ParticleStatus.ALL;
+        this.canChatColor = true;
+        this.lastActionTime = Util.getMillis();
+        this.requestedViewDistance = 2;
+        this.language =  null; // Paper - default to null
+        this.lastSectionPos = SectionPos.of(0, 0, 0);
+        this.chunkTrackingView = ChunkTrackingView.EMPTY;
+        this.respawnDimension = Level.OVERWORLD;
+        this.wardenSpawnTracker = new WardenSpawnTracker(0, 0, 0);
+        this.lastKnownClientMovement = Vec3.ZERO;
+        this.lastClientInput = Input.EMPTY;
+        this.enderPearls = new HashSet();
+        this.containerSynchronizer = new ContainerSynchronizer() {
+            @Override
+            public void sendInitialData(AbstractContainerMenu handler, NonNullList<ItemStack> stacks, ItemStack cursorStack, int[] properties) {
+                ServerPlayer.this.connection.send(new ClientboundContainerSetContentPacket(handler.containerId, handler.incrementStateId(), stacks, cursorStack));
+
+                for (int i = 0; i < properties.length; ++i) {
+                    this.broadcastDataValue(handler, i, properties[i]);
+                }
 
-            for (int i = 0; i < properties.length; i++) {
-                this.broadcastDataValue(handler, i, properties[i]);
             }
-        }
 
-        @Override
-        public void sendSlotChange(AbstractContainerMenu handler, int slot, ItemStack stack) {
-            ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(handler.containerId, handler.incrementStateId(), slot, stack));
-        }
+            // Paper start - Sync offhand slot in menus
+            @Override
+            public void sendOffHandSlotChange() {
+                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(ServerPlayer.this.inventoryMenu.containerId, ServerPlayer.this.inventoryMenu.incrementStateId(), net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT, ServerPlayer.this.inventoryMenu.getSlot(net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT).getItem().copy()));
+            }
+            // Paper end - Sync offhand slot in menus
 
-        @Override
-        public void sendCarriedChange(AbstractContainerMenu handler, ItemStack stack) {
-            ServerPlayer.this.connection.send(new ClientboundSetCursorItemPacket(stack.copy()));
-        }
+            @Override
+            public void sendSlotChange(AbstractContainerMenu handler, int slot, ItemStack stack) {
+                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(handler.containerId, handler.incrementStateId(), slot, stack));
+            }
 
-        @Override
-        public void sendDataChange(AbstractContainerMenu handler, int property, int value) {
-            this.broadcastDataValue(handler, property, value);
-        }
+            @Override
+            public void sendCarriedChange(AbstractContainerMenu handler, ItemStack stack) {
+                ServerPlayer.this.connection.send(new ClientboundSetCursorItemPacket(stack.copy()));
+            }
+
+            @Override
+            public void sendDataChange(AbstractContainerMenu handler, int property, int value) {
+                this.broadcastDataValue(handler, property, value);
+            }
+
+            private void broadcastDataValue(AbstractContainerMenu handler, int property, int value) {
+                ServerPlayer.this.connection.send(new ClientboundContainerSetDataPacket(handler.containerId, property, value));
+            }
+        };
+        this.containerListener = new ContainerListener() {
+            @Override
+            public void slotChanged(AbstractContainerMenu handler, int slotId, ItemStack stack) {
+                Slot slot = handler.getSlot(slotId);
+
+                if (!(slot instanceof ResultSlot)) {
+                    if (slot.container == ServerPlayer.this.getInventory()) {
+                        CriteriaTriggers.INVENTORY_CHANGED.trigger(ServerPlayer.this, ServerPlayer.this.getInventory(), stack);
+                    }
 
-        private void broadcastDataValue(AbstractContainerMenu handler, int property, int value) {
-            ServerPlayer.this.connection.send(new ClientboundContainerSetDataPacket(handler.containerId, property, value));
-        }
-    };
-    private final ContainerListener containerListener = new ContainerListener() {
-        @Override
-        public void slotChanged(AbstractContainerMenu handler, int slotId, ItemStack stack) {
-            Slot slot = handler.getSlot(slotId);
-            if (!(slot instanceof ResultSlot)) {
-                if (slot.container == ServerPlayer.this.getInventory()) {
-                    CriteriaTriggers.INVENTORY_CHANGED.trigger(ServerPlayer.this, ServerPlayer.this.getInventory(), stack);
                 }
             }
-        }
+            // Paper start - Add PlayerInventorySlotChangeEvent
+            @Override
+            public void slotChanged(AbstractContainerMenu handler, int slotId, ItemStack oldStack, ItemStack stack) {
+                Slot slot = handler.getSlot(slotId);
+                if (!(slot instanceof ResultSlot)) {
+                    if (slot.container == ServerPlayer.this.getInventory()) {
+                        if (io.papermc.paper.event.player.PlayerInventorySlotChangeEvent.getHandlerList().getRegisteredListeners().length == 0) {
+                            CriteriaTriggers.INVENTORY_CHANGED.trigger(ServerPlayer.this, ServerPlayer.this.getInventory(), stack);
+                            return;
+                        }
+                        io.papermc.paper.event.player.PlayerInventorySlotChangeEvent event = new io.papermc.paper.event.player.PlayerInventorySlotChangeEvent(ServerPlayer.this.getBukkitEntity(), slotId, CraftItemStack.asBukkitCopy(oldStack), CraftItemStack.asBukkitCopy(stack));
+                        event.callEvent();
+                        if (event.shouldTriggerAdvancements()) {
+                            CriteriaTriggers.INVENTORY_CHANGED.trigger(ServerPlayer.this, ServerPlayer.this.getInventory(), stack);
+                        }
+                    }
+                }
+            }
+            // Paper end - Add PlayerInventorySlotChangeEvent
 
-        @Override
-        public void dataChanged(AbstractContainerMenu handler, int property, int value) {
-        }
-    };
-    @Nullable
-    private RemoteChatSession chatSession;
-    @Nullable
-    public final Object object;
-    private final CommandSource commandSource = new CommandSource() {
-        @Override
-        public boolean acceptsSuccess() {
-            return ServerPlayer.this.serverLevel().getGameRules().getBoolean(GameRules.RULE_SENDCOMMANDFEEDBACK);
-        }
+            @Override
+            public void dataChanged(AbstractContainerMenu handler, int property, int value) {}
+        };
+        this.commandSource = new CommandSource() {
+            @Override
+            public boolean acceptsSuccess() {
+                return ServerPlayer.this.serverLevel().getGameRules().getBoolean(GameRules.RULE_SENDCOMMANDFEEDBACK);
+            }
 
-        @Override
-        public boolean acceptsFailure() {
-            return true;
-        }
+            @Override
+            public boolean acceptsFailure() {
+                return true;
+            }
 
-        @Override
-        public boolean shouldInformAdmins() {
-            return true;
-        }
+            @Override
+            public boolean shouldInformAdmins() {
+                return true;
+            }
 
-        @Override
-        public void sendSystemMessage(Component message) {
-            ServerPlayer.this.sendSystemMessage(message);
-        }
-    };
-    private int containerCounter;
-    public boolean wonGame;
+            @Override
+            public void sendSystemMessage(Component message) {
+                ServerPlayer.this.sendSystemMessage(message);
+            }
 
-    public ServerPlayer(MinecraftServer server, ServerLevel world, GameProfile profile, ClientInformation clientOptions) {
-        super(world, world.getSharedSpawnPos(), world.getSharedSpawnAngle(), profile);
+            // CraftBukkit start
+            @Override
+            public CommandSender getBukkitSender(CommandSourceStack wrapper) {
+                return ServerPlayer.this.getBukkitEntity();
+            }
+            // CraftBukkit end
+        };
         this.textFilter = server.createTextFilterForPlayer(this);
         this.gameMode = server.createGameModeForPlayer(this);
-        this.recipeBook = new ServerRecipeBook((key, adder) -> server.getRecipeManager().listDisplaysForRecipe(key, adder));
+        this.recipeBook = new ServerRecipeBook((resourcekey, consumer) -> {
+            server.getRecipeManager().listDisplaysForRecipe(resourcekey, consumer);
+        });
         this.server = server;
         this.stats = server.getPlayerList().getPlayerStats(this);
         this.advancements = server.getPlayerList().getPlayerAdvancements(this);
-        this.moveTo(this.adjustSpawnLocation(world, world.getSharedSpawnPos()).getBottomCenter(), 0.0F, 0.0F);
-        this.updateOptions(clientOptions);
+        // this.moveTo(this.adjustSpawnLocation(world, world.getSharedSpawnPos()).getBottomCenter(), 0.0F, 0.0F); // Paper - Don't move existing players to world spawn
+        this.updateOptionsNoEvents(clientOptions); // Paper - don't call options events on login
         this.object = null;
+
+        // CraftBukkit start
+        this.displayName = this.getScoreboardName();
+        this.adventure$displayName = net.kyori.adventure.text.Component.text(this.getScoreboardName()); // Paper
+        this.bukkitPickUpLoot = true;
+        this.maxHealthCache = this.getMaxHealth();
+    }
+
+    // Use method to resend items in hands in case of client desync, because the item use got cancelled.
+    // For example, when cancelling the leash event
+    @Deprecated // Paper - this shouldn't be used, use the regular sendAllDataToRemote call to resync all
+    public void resendItemInHands() {
+        this.containerMenu.findSlot(this.getInventory(), this.getInventory().selected).ifPresent(s -> {
+            this.containerSynchronizer.sendSlotChange(this.containerMenu, s, this.getMainHandItem());
+        });
+        this.containerSynchronizer.sendSlotChange(this.inventoryMenu, InventoryMenu.SHIELD_SLOT, this.getOffhandItem());
+    }
+
+    // Yes, this doesn't match Vanilla, but it's the best we can do for now.
+    // If this is an issue, PRs are welcome
+    public final BlockPos getSpawnPoint(ServerLevel worldserver) {
+        BlockPos blockposition = worldserver.getSharedSpawnPos();
+
+        if (worldserver.dimensionType().hasSkyLight() && worldserver.serverLevelData.getGameType() != GameType.ADVENTURE) {
+            int i = Math.max(0, this.server.getSpawnRadius(worldserver));
+            int j = Mth.floor(worldserver.getWorldBorder().getDistanceToBorder((double) blockposition.getX(), (double) blockposition.getZ()));
+
+            if (j < i) {
+                i = j;
+            }
+
+            if (j <= 1) {
+                i = 1;
+            }
+
+            long k = (long) (i * 2 + 1);
+            long l = k * k;
+            int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
+            int j1 = this.getCoprime(i1);
+            int k1 = RandomSource.create().nextInt(i1);
+
+            for (int l1 = 0; l1 < i1; ++l1) {
+                int i2 = (k1 + j1 * l1) % i1;
+                int j2 = i2 % (i * 2 + 1);
+                int k2 = i2 / (i * 2 + 1);
+                BlockPos blockposition1 = PlayerRespawnLogic.getOverworldRespawnPos(worldserver, blockposition.getX() + j2 - i, blockposition.getZ() + k2 - i);
+
+                if (blockposition1 != null) {
+                    return blockposition1;
+                }
+            }
+        }
+
+        return blockposition;
     }
+    // CraftBukkit end
 
     @Override
     public BlockPos adjustSpawnLocation(ServerLevel world, BlockPos basePos) {
-        AABB aABB = this.getDimensions(Pose.STANDING).makeBoundingBox(Vec3.ZERO);
-        BlockPos blockPos = basePos;
-        if (world.dimensionType().hasSkyLight() && world.getServer().getWorldData().getGameType() != GameType.ADVENTURE) {
+        AABB axisalignedbb = this.getDimensions(Pose.STANDING).makeBoundingBox(Vec3.ZERO);
+        BlockPos blockposition1 = basePos;
+
+        if (world.dimensionType().hasSkyLight() && world.serverLevelData.getGameType() != GameType.ADVENTURE) { // CraftBukkit
             int i = Math.max(0, this.server.getSpawnRadius(world));
-            int j = Mth.floor(world.getWorldBorder().getDistanceToBorder((double)basePos.getX(), (double)basePos.getZ()));
+            int j = Mth.floor(world.getWorldBorder().getDistanceToBorder((double) basePos.getX(), (double) basePos.getZ()));
+
             if (j < i) {
                 i = j;
             }
@@ -349,49 +560,61 @@
                 i = 1;
             }
 
-            long l = (long)(i * 2 + 1);
-            long m = l * l;
-            int k = m > 2147483647L ? Integer.MAX_VALUE : (int)m;
-            int n = this.getCoprime(k);
-            int o = RandomSource.create().nextInt(k);
+            long k = (long) (i * 2 + 1);
+            long l = k * k;
+            int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
+            int j1 = this.getCoprime(i1);
+            int k1 = RandomSource.create().nextInt(i1);
 
-            for (int p = 0; p < k; p++) {
-                int q = (o + n * p) % k;
-                int r = q % (i * 2 + 1);
-                int s = q / (i * 2 + 1);
-                int t = basePos.getX() + r - i;
-                int u = basePos.getZ() + s - i;
+            for (int l1 = 0; l1 < i1; ++l1) {
+                int i2 = (k1 + j1 * l1) % i1;
+                int j2 = i2 % (i * 2 + 1);
+                int k2 = i2 / (i * 2 + 1);
+                int l2 = basePos.getX() + j2 - i;
+                int i3 = basePos.getZ() + k2 - i;
 
                 try {
-                    blockPos = PlayerRespawnLogic.getOverworldRespawnPos(world, t, u);
-                    if (blockPos != null && this.noCollisionNoLiquid(world, aABB.move(blockPos.getBottomCenter()))) {
-                        return blockPos;
+                    blockposition1 = PlayerRespawnLogic.getOverworldRespawnPos(world, l2, i3);
+                    if (blockposition1 != null && this.noCollisionNoLiquid(world, axisalignedbb.move(blockposition1.getBottomCenter()))) {
+                        return blockposition1;
                     }
-                } catch (Exception var25) {
-                    int v = p;
-                    int w = i;
-                    CrashReport crashReport = CrashReport.forThrowable(var25, "Searching for spawn");
-                    CrashReportCategory crashReportCategory = crashReport.addCategory("Spawn Lookup");
-                    crashReportCategory.setDetail("Origin", basePos::toString);
-                    crashReportCategory.setDetail("Radius", () -> Integer.toString(w));
-                    crashReportCategory.setDetail("Candidate", () -> "[" + t + "," + u + "]");
-                    crashReportCategory.setDetail("Progress", () -> v + " out of " + k);
-                    throw new ReportedException(crashReport);
+                } catch (Exception exception) {
+                    CrashReport crashreport = CrashReport.forThrowable(exception, "Searching for spawn");
+                    CrashReportCategory crashreportsystemdetails = crashreport.addCategory("Spawn Lookup");
+
+                    Objects.requireNonNull(basePos);
+                    crashreportsystemdetails.setDetail("Origin", basePos::toString);
+                    // CraftBukkit start - decompile error
+                    int finalI = i;
+                    crashreportsystemdetails.setDetail("Radius", () -> {
+                        return Integer.toString(finalI);
+                        // CraftBukkit end
+                    });
+                    crashreportsystemdetails.setDetail("Candidate", () -> {
+                        return "[" + l2 + "," + i3 + "]";
+                    });
+                    // CraftBukkit start - decompile error
+                    int finalL1 = l1;
+                    crashreportsystemdetails.setDetail("Progress", () -> {
+                        return "" + finalL1 + " out of " + i1;
+                        // CraftBukkit end
+                    });
+                    throw new ReportedException(crashreport);
                 }
             }
 
-            blockPos = basePos;
+            blockposition1 = basePos;
         }
 
-        while (!this.noCollisionNoLiquid(world, aABB.move(blockPos.getBottomCenter())) && blockPos.getY() < world.getMaxY()) {
-            blockPos = blockPos.above();
+        while (!this.noCollisionNoLiquid(world, axisalignedbb.move(blockposition1.getBottomCenter())) && blockposition1.getY() < world.getMaxY()) {
+            blockposition1 = blockposition1.above();
         }
 
-        while (this.noCollisionNoLiquid(world, aABB.move(blockPos.below().getBottomCenter())) && blockPos.getY() > world.getMinY() + 1) {
-            blockPos = blockPos.below();
+        while (this.noCollisionNoLiquid(world, axisalignedbb.move(blockposition1.below().getBottomCenter())) && blockposition1.getY() > world.getMinY() + 1) {
+            blockposition1 = blockposition1.below();
         }
 
-        return blockPos;
+        return blockposition1;
     }
 
     private boolean noCollisionNoLiquid(ServerLevel world, AABB box) {
@@ -405,61 +628,90 @@
     @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
+        DataResult dataresult;
+        Logger logger;
+
         if (nbt.contains("warden_spawn_tracker", 10)) {
-            WardenSpawnTracker.CODEC
-                .parse(new Dynamic<>(NbtOps.INSTANCE, nbt.get("warden_spawn_tracker")))
-                .resultOrPartial(LOGGER::error)
-                .ifPresent(sculkShriekerWarningManager -> this.wardenSpawnTracker = sculkShriekerWarningManager);
+            dataresult = WardenSpawnTracker.CODEC.parse(new Dynamic(NbtOps.INSTANCE, nbt.get("warden_spawn_tracker")));
+            logger = ServerPlayer.LOGGER;
+            Objects.requireNonNull(logger);
+            ((DataResult<WardenSpawnTracker>) dataresult).resultOrPartial(logger::error).ifPresent((wardenspawntracker) -> {
+                this.wardenSpawnTracker = wardenspawntracker;
+            });
         }
 
         if (nbt.contains("enteredNetherPosition", 10)) {
-            CompoundTag compoundTag = nbt.getCompound("enteredNetherPosition");
-            this.enteredNetherPosition = new Vec3(compoundTag.getDouble("x"), compoundTag.getDouble("y"), compoundTag.getDouble("z"));
+            CompoundTag nbttagcompound1 = nbt.getCompound("enteredNetherPosition");
+
+            this.enteredNetherPosition = new Vec3(nbttagcompound1.getDouble("x"), nbttagcompound1.getDouble("y"), nbttagcompound1.getDouble("z"));
         }
 
         this.seenCredits = nbt.getBoolean("seenCredits");
         if (nbt.contains("recipeBook", 10)) {
-            this.recipeBook.fromNbt(nbt.getCompound("recipeBook"), recipeKey -> this.server.getRecipeManager().byKey(recipeKey).isPresent());
+            this.recipeBook.fromNbt(nbt.getCompound("recipeBook"), (resourcekey) -> {
+                return this.server.getRecipeManager().byKey(resourcekey).isPresent();
+            });
         }
+        this.getBukkitEntity().readExtraData(nbt); // CraftBukkit
 
         if (this.isSleeping()) {
             this.stopSleeping();
         }
 
+        // CraftBukkit start
+        String spawnWorld = nbt.getString("SpawnWorld");
+        CraftWorld oldWorld = (CraftWorld) Bukkit.getWorld(spawnWorld);
+        if (oldWorld != null) {
+            this.respawnDimension = oldWorld.getHandle().dimension();
+        }
+        // CraftBukkit end
+
         if (nbt.contains("SpawnX", 99) && nbt.contains("SpawnY", 99) && nbt.contains("SpawnZ", 99)) {
             this.respawnPosition = new BlockPos(nbt.getInt("SpawnX"), nbt.getInt("SpawnY"), nbt.getInt("SpawnZ"));
             this.respawnForced = nbt.getBoolean("SpawnForced");
             this.respawnAngle = nbt.getFloat("SpawnAngle");
             if (nbt.contains("SpawnDimension")) {
-                this.respawnDimension = Level.RESOURCE_KEY_CODEC
-                    .parse(NbtOps.INSTANCE, nbt.get("SpawnDimension"))
-                    .resultOrPartial(LOGGER::error)
-                    .orElse(Level.OVERWORLD);
+                DataResult<ResourceKey<Level>> dataresult1 = Level.RESOURCE_KEY_CODEC.parse(NbtOps.INSTANCE, nbt.get("SpawnDimension")); // CraftBukkit - decompile error
+                Logger logger1 = ServerPlayer.LOGGER;
+
+                Objects.requireNonNull(logger1);
+                this.respawnDimension = (ResourceKey) dataresult1.resultOrPartial(logger1::error).orElse(Level.OVERWORLD);
             }
         }
 
         this.spawnExtraParticlesOnFall = nbt.getBoolean("spawn_extra_particles_on_fall");
-        Tag tag = nbt.get("raid_omen_position");
-        if (tag != null) {
-            BlockPos.CODEC.parse(NbtOps.INSTANCE, tag).resultOrPartial(LOGGER::error).ifPresent(startRaidPos -> this.raidOmenPosition = startRaidPos);
+        Tag nbtbase = nbt.get("raid_omen_position");
+
+        if (nbtbase != null) {
+            dataresult = BlockPos.CODEC.parse(NbtOps.INSTANCE, nbtbase);
+            logger = ServerPlayer.LOGGER;
+            Objects.requireNonNull(logger);
+            ((DataResult<BlockPos>) dataresult).resultOrPartial(logger::error).ifPresent((blockposition) -> { // CraftBukkit - decompile error
+                this.raidOmenPosition = blockposition;
+            });
         }
+
     }
 
     @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
-        WardenSpawnTracker.CODEC
-            .encodeStart(NbtOps.INSTANCE, this.wardenSpawnTracker)
-            .resultOrPartial(LOGGER::error)
-            .ifPresent(encoded -> nbt.put("warden_spawn_tracker", encoded));
+        DataResult<Tag> dataresult = WardenSpawnTracker.CODEC.encodeStart(NbtOps.INSTANCE, this.wardenSpawnTracker); // CraftBukkit - decompile error
+        Logger logger = ServerPlayer.LOGGER;
+
+        Objects.requireNonNull(logger);
+        dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+            nbt.put("warden_spawn_tracker", nbtbase);
+        });
         this.storeGameTypes(nbt);
         nbt.putBoolean("seenCredits", this.seenCredits);
         if (this.enteredNetherPosition != null) {
-            CompoundTag compoundTag = new CompoundTag();
-            compoundTag.putDouble("x", this.enteredNetherPosition.x);
-            compoundTag.putDouble("y", this.enteredNetherPosition.y);
-            compoundTag.putDouble("z", this.enteredNetherPosition.z);
-            nbt.put("enteredNetherPosition", compoundTag);
+            CompoundTag nbttagcompound1 = new CompoundTag();
+
+            nbttagcompound1.putDouble("x", this.enteredNetherPosition.x);
+            nbttagcompound1.putDouble("y", this.enteredNetherPosition.y);
+            nbttagcompound1.putDouble("z", this.enteredNetherPosition.z);
+            nbt.put("enteredNetherPosition", nbttagcompound1);
         }
 
         this.saveParentVehicle(nbt);
@@ -471,18 +723,23 @@
             nbt.putInt("SpawnZ", this.respawnPosition.getZ());
             nbt.putBoolean("SpawnForced", this.respawnForced);
             nbt.putFloat("SpawnAngle", this.respawnAngle);
-            ResourceLocation.CODEC
-                .encodeStart(NbtOps.INSTANCE, this.respawnDimension.location())
-                .resultOrPartial(LOGGER::error)
-                .ifPresent(encoded -> nbt.put("SpawnDimension", encoded));
+            dataresult = ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.respawnDimension.location());
+            logger = ServerPlayer.LOGGER;
+            Objects.requireNonNull(logger);
+            dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+                nbt.put("SpawnDimension", nbtbase);
+            });
         }
+        this.getBukkitEntity().setExtraData(nbt); // CraftBukkit
 
         nbt.putBoolean("spawn_extra_particles_on_fall", this.spawnExtraParticlesOnFall);
         if (this.raidOmenPosition != null) {
-            BlockPos.CODEC
-                .encodeStart(NbtOps.INSTANCE, this.raidOmenPosition)
-                .resultOrPartial(LOGGER::error)
-                .ifPresent(encoded -> nbt.put("raid_omen_position", encoded));
+            dataresult = BlockPos.CODEC.encodeStart(NbtOps.INSTANCE, this.raidOmenPosition);
+            logger = ServerPlayer.LOGGER;
+            Objects.requireNonNull(logger);
+            dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+                nbt.put("raid_omen_position", nbtbase);
+            });
         }
 
         this.saveEnderPearls(nbt);
@@ -490,114 +747,192 @@
 
     private void saveParentVehicle(CompoundTag nbt) {
         Entity entity = this.getRootVehicle();
-        Entity entity2 = this.getVehicle();
-        if (entity2 != null && entity != this && entity.hasExactlyOnePlayerPassenger()) {
-            CompoundTag compoundTag = new CompoundTag();
-            CompoundTag compoundTag2 = new CompoundTag();
-            entity.save(compoundTag2);
-            compoundTag.putUUID("Attach", entity2.getUUID());
-            compoundTag.put("Entity", compoundTag2);
-            nbt.put("RootVehicle", compoundTag);
+        Entity entity1 = this.getVehicle();
+
+        // CraftBukkit start - handle non-persistent vehicles
+        boolean persistVehicle = true;
+        if (entity1 != null) {
+            Entity vehicle;
+            for (vehicle = entity1; vehicle != null; vehicle = vehicle.getVehicle()) {
+                if (!vehicle.persist) {
+                    persistVehicle = false;
+                    break;
+                }
+            }
+        }
+
+        if (persistVehicle && entity1 != null && entity != this && entity.hasExactlyOnePlayerPassenger() && !entity.isRemoved()) { // Paper - Ensure valid vehicle status
+            // CraftBukkit end
+            CompoundTag nbttagcompound1 = new CompoundTag();
+            CompoundTag nbttagcompound2 = new CompoundTag();
+
+            entity.save(nbttagcompound2);
+            nbttagcompound1.putUUID("Attach", entity1.getUUID());
+            nbttagcompound1.put("Entity", nbttagcompound2);
+            nbt.put("RootVehicle", nbttagcompound1);
         }
+
     }
 
     public void loadAndSpawnParentVehicle(Optional<CompoundTag> nbt) {
-        if (nbt.isPresent() && nbt.get().contains("RootVehicle", 10) && this.level() instanceof ServerLevel serverLevel) {
-            CompoundTag compoundTag = nbt.get().getCompound("RootVehicle");
-            Entity entity = EntityType.loadEntityRecursive(
-                compoundTag.getCompound("Entity"), serverLevel, EntitySpawnReason.LOAD, entityx -> !serverLevel.addWithUUID(entityx) ? null : entityx
-            );
-            if (entity == null) {
-                return;
-            }
+        if (nbt.isPresent() && ((CompoundTag) nbt.get()).contains("RootVehicle", 10)) {
+            Level world = this.level();
 
-            UUID uUID;
-            if (compoundTag.hasUUID("Attach")) {
-                uUID = compoundTag.getUUID("Attach");
-            } else {
-                uUID = null;
-            }
+            if (world instanceof ServerLevel) {
+                ServerLevel worldserver = (ServerLevel) world;
+                CompoundTag nbttagcompound = ((CompoundTag) nbt.get()).getCompound("RootVehicle");
+                Entity entity = EntityType.loadEntityRecursive(nbttagcompound.getCompound("Entity"), worldserver, EntitySpawnReason.LOAD, (entity1) -> {
+                    return !worldserver.addWithUUID(entity1, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.MOUNT) ? null : entity1; // CraftBukkit - decompile error // Paper - Entity#getEntitySpawnReason
+                });
 
-            if (entity.getUUID().equals(uUID)) {
-                this.startRiding(entity, true);
-            } else {
-                for (Entity entity2 : entity.getIndirectPassengers()) {
-                    if (entity2.getUUID().equals(uUID)) {
-                        this.startRiding(entity2, true);
-                        break;
+                if (entity == null) {
+                    return;
+                }
+
+                UUID uuid;
+
+                if (nbttagcompound.hasUUID("Attach")) {
+                    uuid = nbttagcompound.getUUID("Attach");
+                } else {
+                    uuid = null;
+                }
+
+                Iterator iterator;
+                Entity entity1;
+
+                if (entity.getUUID().equals(uuid)) {
+                    this.startRiding(entity, true);
+                } else {
+                    iterator = entity.getIndirectPassengers().iterator();
+
+                    while (iterator.hasNext()) {
+                        entity1 = (Entity) iterator.next();
+                        if (entity1.getUUID().equals(uuid)) {
+                            this.startRiding(entity1, true);
+                            break;
+                        }
                     }
                 }
-            }
 
-            if (!this.isPassenger()) {
-                LOGGER.warn("Couldn't reattach entity to player");
-                entity.discard();
+                if (!this.isPassenger()) {
+                    ServerPlayer.LOGGER.warn("Couldn't reattach entity to player");
+                    entity.discard(null); // CraftBukkit - add Bukkit remove cause
+                    iterator = entity.getIndirectPassengers().iterator();
 
-                for (Entity entity3 : entity.getIndirectPassengers()) {
-                    entity3.discard();
+                    while (iterator.hasNext()) {
+                        entity1 = (Entity) iterator.next();
+                        entity1.discard(null); // CraftBukkit - add Bukkit remove cause
+                    }
                 }
             }
         }
+
     }
 
     private void saveEnderPearls(CompoundTag nbt) {
         if (!this.enderPearls.isEmpty()) {
-            ListTag listTag = new ListTag();
+            ListTag nbttaglist = new ListTag();
+            Iterator iterator = this.enderPearls.iterator();
 
-            for (ThrownEnderpearl thrownEnderpearl : this.enderPearls) {
-                if (thrownEnderpearl.isRemoved()) {
-                    LOGGER.warn("Trying to save removed ender pearl, skipping");
+            while (iterator.hasNext()) {
+                ThrownEnderpearl entityenderpearl = (ThrownEnderpearl) iterator.next();
+                if (entityenderpearl.level().paperConfig().misc.legacyEnderPearlBehavior) continue; // Paper - Allow using old ender pearl behavior
+
+                if (entityenderpearl.isRemoved()) {
+                    ServerPlayer.LOGGER.warn("Trying to save removed ender pearl, skipping");
                 } else {
-                    CompoundTag compoundTag = new CompoundTag();
-                    thrownEnderpearl.save(compoundTag);
-                    ResourceLocation.CODEC
-                        .encodeStart(NbtOps.INSTANCE, thrownEnderpearl.level().dimension().location())
-                        .resultOrPartial(LOGGER::error)
-                        .ifPresent(dimension -> compoundTag.put("ender_pearl_dimension", dimension));
-                    listTag.add(compoundTag);
+                    CompoundTag nbttagcompound1 = new CompoundTag();
+
+                    entityenderpearl.save(nbttagcompound1);
+                    DataResult<Tag> dataresult = ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, entityenderpearl.level().dimension().location()); // CraftBukkit - decompile error
+                    Logger logger = ServerPlayer.LOGGER;
+
+                    Objects.requireNonNull(logger);
+                    dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+                        nbttagcompound1.put("ender_pearl_dimension", nbtbase);
+                    });
+                    nbttaglist.add(nbttagcompound1);
                 }
             }
 
-            nbt.put("ender_pearls", listTag);
+            nbt.put("ender_pearls", nbttaglist);
         }
+
     }
 
     public void loadAndSpawnEnderpearls(Optional<CompoundTag> nbt) {
-        if (nbt.isPresent() && nbt.get().contains("ender_pearls", 9) && nbt.get().get("ender_pearls") instanceof ListTag listTag) {
-            listTag.forEach(
-                enderPearlNbt -> {
-                    if (enderPearlNbt instanceof CompoundTag compoundTag && compoundTag.contains("ender_pearl_dimension")) {
-                        Optional<ResourceKey<Level>> optional = Level.RESOURCE_KEY_CODEC
-                            .parse(NbtOps.INSTANCE, compoundTag.get("ender_pearl_dimension"))
-                            .resultOrPartial(LOGGER::error);
-                        if (optional.isEmpty()) {
-                            LOGGER.warn("No dimension defined for ender pearl, skipping");
-                            return;
-                        }
+        if (nbt.isPresent() && ((CompoundTag) nbt.get()).contains("ender_pearls", 9)) {
+            Tag nbtbase = ((CompoundTag) nbt.get()).get("ender_pearls");
 
-                        ServerLevel serverLevel = this.level().getServer().getLevel(optional.get());
-                        if (serverLevel != null) {
-                            Entity entity = EntityType.loadEntityRecursive(
-                                compoundTag, serverLevel, EntitySpawnReason.LOAD, enderPearl -> !serverLevel.addWithUUID(enderPearl) ? null : enderPearl
-                            );
-                            if (entity != null) {
-                                placeEnderPearlTicket(serverLevel, entity.chunkPosition());
+            if (nbtbase instanceof ListTag) {
+                ListTag nbttaglist = (ListTag) nbtbase;
+
+                nbttaglist.forEach((nbtbase1) -> {
+                    if (nbtbase1 instanceof CompoundTag nbttagcompound) {
+                        if (nbttagcompound.contains("ender_pearl_dimension")) {
+                            DataResult<ResourceKey<Level>> dataresult = Level.RESOURCE_KEY_CODEC.parse(NbtOps.INSTANCE, nbttagcompound.get("ender_pearl_dimension")); // CraftBukkit - decompile error
+                            Logger logger = ServerPlayer.LOGGER;
+
+                            Objects.requireNonNull(logger);
+                            Optional<ResourceKey<Level>> optional1 = dataresult.resultOrPartial(logger::error);
+
+                            if (optional1.isEmpty()) {
+                                ServerPlayer.LOGGER.warn("No dimension defined for ender pearl, skipping");
+                                return;
+                            }
+
+                            ServerLevel worldserver = this.level().getServer().getLevel((ResourceKey) optional1.get());
+
+                            if (worldserver != null) {
+                                Entity entity = EntityType.loadEntityRecursive(nbttagcompound, worldserver, EntitySpawnReason.LOAD, (entity1) -> {
+                                    return !worldserver.addWithUUID(entity1) ? null : entity1;
+                                });
+
+                                if (entity != null) {
+                                    ServerPlayer.placeEnderPearlTicket(worldserver, entity.chunkPosition());
+                                } else {
+                                    ServerPlayer.LOGGER.warn("Failed to spawn player ender pearl in level ({}), skipping", optional1.get());
+                                }
                             } else {
-                                LOGGER.warn("Failed to spawn player ender pearl in level ({}), skipping", optional.get());
+                                ServerPlayer.LOGGER.warn("Trying to load ender pearl without level ({}) being loaded, skipping", optional1.get());
                             }
-                        } else {
-                            LOGGER.warn("Trying to load ender pearl without level ({}) being loaded, skipping", optional.get());
                         }
                     }
+
+                });
+            }
+        }
+
+    }
+
+    // CraftBukkit start - World fallback code, either respawn location or global spawn
+    public void spawnIn(Level world) {
+        this.setLevel(world);
+        if (world == null) {
+            this.unsetRemoved();
+            Vec3 position = null;
+            if (this.respawnDimension != null) {
+                world = this.server.getLevel(this.respawnDimension);
+                if (world != null && this.getRespawnPosition() != null) {
+                    position = ServerPlayer.findRespawnAndUseSpawnBlock((ServerLevel) world, this.getRespawnPosition(), this.getRespawnAngle(), false, false).map(ServerPlayer.RespawnPosAngle::position).orElse(null);
                 }
-            );
+            }
+            if (world == null || position == null) {
+                world = ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle();
+                position = Vec3.atCenterOf(world.getSharedSpawnPos());
+            }
+            this.setLevel(world);
+            this.setPosRaw(position.x(), position.y(), position.z()); // Paper - don't register to chunks yet
         }
+        this.gameMode.setLevel((ServerLevel) world);
     }
+    // CraftBukkit end
 
     public void setExperiencePoints(int points) {
-        float f = (float)this.getXpNeededForNextLevel();
-        float g = (f - 1.0F) / f;
-        this.experienceProgress = Mth.clamp((float)points / f, 0.0F, g);
+        float f = (float) this.getXpNeededForNextLevel();
+        float f1 = (f - 1.0F) / f;
+
+        this.experienceProgress = Mth.clamp((float) points / f, 0.0F, f1);
         this.lastSentExp = -1;
     }
 
@@ -651,20 +986,31 @@
 
     @Override
     public void tick() {
+        // CraftBukkit start
+        if (this.joining) {
+            this.joining = false;
+        }
+        // CraftBukkit end
         this.gameMode.tick();
         this.wardenSpawnTracker.tick();
-        this.spawnInvulnerableTime--;
+        --this.spawnInvulnerableTime;
         if (this.invulnerableTime > 0) {
-            this.invulnerableTime--;
+            --this.invulnerableTime;
         }
 
-        this.containerMenu.broadcastChanges();
-        if (!this.level().isClientSide && !this.containerMenu.stillValid(this)) {
-            this.closeContainer();
+        // Paper start - Configurable container update tick rate
+        if (--containerUpdateDelay <= 0) {
+            this.containerMenu.broadcastChanges();
+            containerUpdateDelay = this.level().paperConfig().tickRates.containerUpdate;
+        }
+        // Paper end - Configurable container update tick rate
+        if (!this.level().isClientSide && this.containerMenu != this.inventoryMenu && (this.isImmobile() || !this.containerMenu.stillValid(this))) { // Paper - Prevent opening inventories when frozen
+            this.closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.CANT_USE); // Paper - Inventory close reason
             this.containerMenu = this.inventoryMenu;
         }
 
         Entity entity = this.getCamera();
+
         if (entity != this) {
             if (entity.isAlive()) {
                 this.absMoveTo(entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot());
@@ -689,42 +1035,44 @@
     }
 
     private void updatePlayerAttributes() {
-        AttributeInstance attributeInstance = this.getAttribute(Attributes.BLOCK_INTERACTION_RANGE);
-        if (attributeInstance != null) {
+        AttributeInstance attributemodifiable = this.getAttribute(Attributes.BLOCK_INTERACTION_RANGE);
+
+        if (attributemodifiable != null) {
             if (this.isCreative()) {
-                attributeInstance.addOrUpdateTransientModifier(CREATIVE_BLOCK_INTERACTION_RANGE_MODIFIER);
+                attributemodifiable.addOrUpdateTransientModifier(ServerPlayer.CREATIVE_BLOCK_INTERACTION_RANGE_MODIFIER);
             } else {
-                attributeInstance.removeModifier(CREATIVE_BLOCK_INTERACTION_RANGE_MODIFIER);
+                attributemodifiable.removeModifier(ServerPlayer.CREATIVE_BLOCK_INTERACTION_RANGE_MODIFIER);
             }
         }
 
-        AttributeInstance attributeInstance2 = this.getAttribute(Attributes.ENTITY_INTERACTION_RANGE);
-        if (attributeInstance2 != null) {
+        AttributeInstance attributemodifiable1 = this.getAttribute(Attributes.ENTITY_INTERACTION_RANGE);
+
+        if (attributemodifiable1 != null) {
             if (this.isCreative()) {
-                attributeInstance2.addOrUpdateTransientModifier(CREATIVE_ENTITY_INTERACTION_RANGE_MODIFIER);
+                attributemodifiable1.addOrUpdateTransientModifier(ServerPlayer.CREATIVE_ENTITY_INTERACTION_RANGE_MODIFIER);
             } else {
-                attributeInstance2.removeModifier(CREATIVE_ENTITY_INTERACTION_RANGE_MODIFIER);
+                attributemodifiable1.removeModifier(ServerPlayer.CREATIVE_ENTITY_INTERACTION_RANGE_MODIFIER);
             }
         }
+
     }
 
     public void doTick() {
         try {
-            if (!this.isSpectator() || !this.touchingUnloadedChunk()) {
+            if (valid && !this.isSpectator() || !this.touchingUnloadedChunk()) { // Paper - don't tick dead players that are not in the world currently (pending respawn)
                 super.tick();
             }
 
-            for (int i = 0; i < this.getInventory().getContainerSize(); i++) {
-                ItemStack itemStack = this.getInventory().getItem(i);
-                if (!itemStack.isEmpty()) {
-                    this.synchronizeSpecialItemUpdates(itemStack);
+            for (int i = 0; i < this.getInventory().getContainerSize(); ++i) {
+                ItemStack itemstack = this.getInventory().getItem(i);
+
+                if (!itemstack.isEmpty()) {
+                    this.synchronizeSpecialItemUpdates(itemstack);
                 }
             }
 
-            if (this.getHealth() != this.lastSentHealth
-                || this.lastSentFood != this.foodData.getFoodLevel()
-                || this.foodData.getSaturationLevel() == 0.0F != this.lastFoodSaturationZero) {
-                this.connection.send(new ClientboundSetHealthPacket(this.getHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel()));
+            if (this.getHealth() != this.lastSentHealth || this.lastSentFood != this.foodData.getFoodLevel() || this.foodData.getSaturationLevel() == 0.0F != this.lastFoodSaturationZero) {
+                this.connection.send(new ClientboundSetHealthPacket(this.getBukkitEntity().getScaledHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel())); // CraftBukkit
                 this.lastSentHealth = this.getHealth();
                 this.lastSentFood = this.foodData.getFoodLevel();
                 this.lastFoodSaturationZero = this.foodData.getSaturationLevel() == 0.0F;
@@ -737,27 +1085,33 @@
 
             if (this.foodData.getFoodLevel() != this.lastRecordedFoodLevel) {
                 this.lastRecordedFoodLevel = this.foodData.getFoodLevel();
-                this.updateScoreForCriteria(ObjectiveCriteria.FOOD, Mth.ceil((float)this.lastRecordedFoodLevel));
+                this.updateScoreForCriteria(ObjectiveCriteria.FOOD, Mth.ceil((float) this.lastRecordedFoodLevel));
             }
 
             if (this.getAirSupply() != this.lastRecordedAirLevel) {
                 this.lastRecordedAirLevel = this.getAirSupply();
-                this.updateScoreForCriteria(ObjectiveCriteria.AIR, Mth.ceil((float)this.lastRecordedAirLevel));
+                this.updateScoreForCriteria(ObjectiveCriteria.AIR, Mth.ceil((float) this.lastRecordedAirLevel));
             }
 
             if (this.getArmorValue() != this.lastRecordedArmor) {
                 this.lastRecordedArmor = this.getArmorValue();
-                this.updateScoreForCriteria(ObjectiveCriteria.ARMOR, Mth.ceil((float)this.lastRecordedArmor));
+                this.updateScoreForCriteria(ObjectiveCriteria.ARMOR, Mth.ceil((float) this.lastRecordedArmor));
             }
 
             if (this.totalExperience != this.lastRecordedExperience) {
                 this.lastRecordedExperience = this.totalExperience;
-                this.updateScoreForCriteria(ObjectiveCriteria.EXPERIENCE, Mth.ceil((float)this.lastRecordedExperience));
+                this.updateScoreForCriteria(ObjectiveCriteria.EXPERIENCE, Mth.ceil((float) this.lastRecordedExperience));
             }
 
+            // CraftBukkit start - Force max health updates
+            if (this.maxHealthCache != this.getMaxHealth()) {
+                this.getBukkitEntity().updateScaledHealth();
+            }
+            // CraftBukkit end
+
             if (this.experienceLevel != this.lastRecordedLevel) {
                 this.lastRecordedLevel = this.experienceLevel;
-                this.updateScoreForCriteria(ObjectiveCriteria.LEVEL, Mth.ceil((float)this.lastRecordedLevel));
+                this.updateScoreForCriteria(ObjectiveCriteria.LEVEL, Mth.ceil((float) this.lastRecordedLevel));
             }
 
             if (this.totalExperience != this.lastSentExp) {
@@ -768,23 +1122,42 @@
             if (this.tickCount % 20 == 0) {
                 CriteriaTriggers.LOCATION.trigger(this);
             }
-        } catch (Throwable var4) {
-            CrashReport crashReport = CrashReport.forThrowable(var4, "Ticking player");
-            CrashReportCategory crashReportCategory = crashReport.addCategory("Player being ticked");
-            this.fillCrashReportCategory(crashReportCategory);
-            throw new ReportedException(crashReport);
+
+            // CraftBukkit start - initialize oldLevel, fire PlayerLevelChangeEvent, and tick client-sided world border
+            if (this.oldLevel == -1) {
+                this.oldLevel = this.experienceLevel;
+            }
+
+            if (this.oldLevel != this.experienceLevel) {
+                CraftEventFactory.callPlayerLevelChangeEvent(this.getBukkitEntity(), this.oldLevel, this.experienceLevel);
+                this.oldLevel = this.experienceLevel;
+            }
+
+            if (this.getBukkitEntity().hasClientWorldBorder()) {
+                ((CraftWorldBorder) this.getBukkitEntity().getWorldBorder()).getHandle().tick();
+            }
+            // CraftBukkit end
+        } catch (Throwable throwable) {
+            CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking player");
+            CrashReportCategory crashreportsystemdetails = crashreport.addCategory("Player being ticked");
+
+            this.fillCrashReportCategory(crashreportsystemdetails);
+            throw new ReportedException(crashreport);
         }
     }
 
     private void synchronizeSpecialItemUpdates(ItemStack stack) {
-        MapId mapId = stack.get(DataComponents.MAP_ID);
-        MapItemSavedData mapItemSavedData = MapItem.getSavedData(mapId, this.level());
-        if (mapItemSavedData != null) {
-            Packet<?> packet = mapItemSavedData.getUpdatePacket(mapId, this);
+        MapId mapid = (MapId) stack.get(DataComponents.MAP_ID);
+        MapItemSavedData worldmap = MapItem.getSavedData(mapid, this.level());
+
+        if (worldmap != null) {
+            Packet<?> packet = worldmap.getUpdatePacket(mapid, this);
+
             if (packet != null) {
                 this.connection.send(packet);
             }
         }
+
     }
 
     @Override
@@ -792,10 +1165,11 @@
         if (this.level().getDifficulty() == Difficulty.PEACEFUL && this.serverLevel().getGameRules().getBoolean(GameRules.RULE_NATURAL_REGENERATION)) {
             if (this.tickCount % 20 == 0) {
                 if (this.getHealth() < this.getMaxHealth()) {
-                    this.heal(1.0F);
+                    this.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit - added regain reason of "REGEN" for filtering purposes.
                 }
 
                 float f = this.foodData.getSaturationLevel();
+
                 if (f < 20.0F) {
                     this.foodData.setSaturation(f + 1.0F);
                 }
@@ -805,6 +1179,7 @@
                 this.foodData.setFoodLevel(this.foodData.getFoodLevel() + 1);
             }
         }
+
     }
 
     @Override
@@ -824,6 +1199,7 @@
                 CriteriaTriggers.FALL_AFTER_EXPLOSION.trigger(this, this.currentImpulseImpactPos, this.currentExplosionCause);
             }
         }
+
     }
 
     public void trackEnteredOrExitedLavaOnVehicle() {
@@ -838,41 +1214,129 @@
         if (this.enteredLavaOnVehiclePosition != null && (this.getVehicle() == null || !this.getVehicle().isInLava())) {
             this.enteredLavaOnVehiclePosition = null;
         }
+
     }
 
     private void updateScoreForCriteria(ObjectiveCriteria criterion, int score) {
-        this.getScoreboard().forAllObjectives(criterion, this, innerScore -> innerScore.set(score));
+        // CraftBukkit - Use our scores instead
+        this.level().getCraftServer().getScoreboardManager().forAllObjectives(criterion, this, (scoreaccess) -> {
+            scoreaccess.set(score);
+        });
     }
 
+    // Paper start - PlayerDeathEvent#getItemsToKeep
+    private static void processKeep(org.bukkit.event.entity.PlayerDeathEvent event, NonNullList<ItemStack> inv) {
+        List<org.bukkit.inventory.ItemStack> itemsToKeep = event.getItemsToKeep();
+        if (inv == null) {
+            // remainder of items left in toKeep - plugin added stuff on death that wasn't in the initial loot?
+            if (!itemsToKeep.isEmpty()) {
+                for (org.bukkit.inventory.ItemStack itemStack : itemsToKeep) {
+                    event.getEntity().getInventory().addItem(itemStack);
+                }
+            }
+
+            return;
+        }
+
+        for (int i = 0; i < inv.size(); ++i) {
+            ItemStack item = inv.get(i);
+            if (EnchantmentHelper.has(item, EnchantmentEffectComponents.PREVENT_EQUIPMENT_DROP) || itemsToKeep.isEmpty() || item.isEmpty()) {
+                inv.set(i, ItemStack.EMPTY);
+                continue;
+            }
+
+            final org.bukkit.inventory.ItemStack bukkitStack = item.getBukkitStack();
+            boolean keep = false;
+            final Iterator<org.bukkit.inventory.ItemStack> iterator = itemsToKeep.iterator();
+            while (iterator.hasNext()) {
+                final org.bukkit.inventory.ItemStack itemStack = iterator.next();
+                if (bukkitStack.equals(itemStack)) {
+                    iterator.remove();
+                    keep = true;
+                    break;
+                }
+            }
+
+            if (!keep) {
+                inv.set(i, ItemStack.EMPTY);
+            }
+        }
+    }
+    // Paper end - PlayerDeathEvent#getItemsToKeep
+
     @Override
     public void die(DamageSource damageSource) {
-        this.gameEvent(GameEvent.ENTITY_DIE);
-        boolean bl = this.serverLevel().getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
-        if (bl) {
-            Component component = this.getCombatTracker().getDeathMessage();
-            this.connection
-                .send(
-                    new ClientboundPlayerCombatKillPacket(this.getId(), component),
-                    PacketSendListener.exceptionallySend(
-                        () -> {
-                            int i = 256;
-                            String string = component.getString(256);
-                            Component component2 = Component.translatable(
-                                "death.attack.message_too_long", Component.literal(string).withStyle(ChatFormatting.YELLOW)
-                            );
-                            Component component3 = Component.translatable("death.attack.even_more_magic", this.getDisplayName())
-                                .withStyle(style -> style.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, component2)));
-                            return new ClientboundPlayerCombatKillPacket(this.getId(), component3);
-                        }
-                    )
-                );
-            Team team = this.getTeam();
-            if (team == null || team.getDeathMessageVisibility() == Team.Visibility.ALWAYS) {
-                this.server.getPlayerList().broadcastSystemMessage(component, false);
-            } else if (team.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OTHER_TEAMS) {
-                this.server.getPlayerList().broadcastSystemToTeam(this, component);
-            } else if (team.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OWN_TEAM) {
-                this.server.getPlayerList().broadcastSystemToAllExceptTeam(this, component);
+        // this.gameEvent(GameEvent.ENTITY_DIE); // Paper - move below event cancellation check
+        boolean flag = this.serverLevel().getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
+        // CraftBukkit start - fire PlayerDeathEvent
+        if (this.isRemoved()) {
+            return;
+        }
+        List<DefaultDrop> loot = new java.util.ArrayList<>(this.getInventory().getContainerSize()); // Paper - Restore vanilla drops behavior
+        boolean keepInventory = this.serverLevel().getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY) || this.isSpectator();
+
+        if (!keepInventory) {
+            for (ItemStack item : this.getInventory().getContents()) {
+                if (!item.isEmpty() && !EnchantmentHelper.has(item, EnchantmentEffectComponents.PREVENT_EQUIPMENT_DROP)) {
+                    loot.add(new DefaultDrop(item, stack -> this.drop(stack, true, false, false))); // Paper - Restore vanilla drops behavior; drop function taken from Inventory#dropAll (don't fire drop event)
+                }
+            }
+        }
+        if (this.shouldDropLoot() && this.serverLevel().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) { // Paper - fix player loottables running when mob loot gamerule is false
+        // SPIGOT-5071: manually add player loot tables (SPIGOT-5195 - ignores keepInventory rule)
+        this.dropFromLootTable(this.serverLevel(), damageSource, this.lastHurtByPlayerTime > 0);
+        // Paper - Restore vanilla drops behaviour; custom death loot is a noop on server player, remove.
+
+        loot.addAll(this.drops);
+        this.drops.clear(); // SPIGOT-5188: make sure to clear
+        } // Paper - fix player loottables running when mob loot gamerule is false
+
+        Component defaultMessage = this.getCombatTracker().getDeathMessage();
+
+        String deathmessage = defaultMessage.getString();
+        this.keepLevel = keepInventory; // SPIGOT-2222: pre-set keepLevel
+        org.bukkit.event.entity.PlayerDeathEvent event = CraftEventFactory.callPlayerDeathEvent(this, damageSource, loot, PaperAdventure.asAdventure(defaultMessage), keepInventory); // Paper - Adventure
+        // Paper start - cancellable death event
+        if (event.isCancelled()) {
+            // make compatible with plugins that might have already set the health in an event listener
+            if (this.getHealth() <= 0) {
+                this.setHealth((float) event.getReviveHealth());
+            }
+            return;
+        }
+        this.gameEvent(GameEvent.ENTITY_DIE); // moved from the top of this method
+        // Paper end
+
+        // SPIGOT-943 - only call if they have an inventory open
+        if (this.containerMenu != this.inventoryMenu) {
+            this.closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.DEATH); // Paper - Inventory close reason
+        }
+
+        net.kyori.adventure.text.Component deathMessage = event.deathMessage() != null ? event.deathMessage() : net.kyori.adventure.text.Component.empty(); // Paper - Adventure
+
+        if (deathMessage != null && deathMessage != net.kyori.adventure.text.Component.empty() && flag) { // Paper - Adventure // TODO: allow plugins to override?
+            Component ichatbasecomponent = PaperAdventure.asVanilla(deathMessage); // Paper - Adventure
+
+            this.connection.send(new ClientboundPlayerCombatKillPacket(this.getId(), ichatbasecomponent), PacketSendListener.exceptionallySend(() -> {
+                boolean flag1 = true;
+                String s = ichatbasecomponent.getString(256);
+                MutableComponent ichatmutablecomponent = Component.translatable("death.attack.message_too_long", Component.literal(s).withStyle(ChatFormatting.YELLOW));
+                MutableComponent ichatmutablecomponent1 = Component.translatable("death.attack.even_more_magic", this.getDisplayName()).withStyle((chatmodifier) -> {
+                    return chatmodifier.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, ichatmutablecomponent));
+                });
+
+                return new ClientboundPlayerCombatKillPacket(this.getId(), ichatmutablecomponent1);
+            }));
+            PlayerTeam scoreboardteam = this.getTeam();
+
+            if (scoreboardteam != null && scoreboardteam.getDeathMessageVisibility() != Team.Visibility.ALWAYS) {
+                if (scoreboardteam.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OTHER_TEAMS) {
+                    this.server.getPlayerList().broadcastSystemToTeam(this, ichatbasecomponent);
+                } else if (scoreboardteam.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OWN_TEAM) {
+                    this.server.getPlayerList().broadcastSystemToAllExceptTeam(this, ichatbasecomponent);
+                }
+            } else {
+                this.server.getPlayerList().broadcastSystemMessage(ichatbasecomponent, false);
             }
         } else {
             this.connection.send(new ClientboundPlayerCombatKillPacket(this.getId(), CommonComponents.EMPTY));
@@ -882,20 +1346,32 @@
         if (this.serverLevel().getGameRules().getBoolean(GameRules.RULE_FORGIVE_DEAD_PLAYERS)) {
             this.tellNeutralMobsThatIDied();
         }
-
-        if (!this.isSpectator()) {
-            this.dropAllDeathLoot(this.serverLevel(), damageSource);
+        // SPIGOT-5478 must be called manually now
+        if (event.shouldDropExperience()) this.dropExperience(this.serverLevel(), damageSource.getEntity()); // Paper - tie to event
+        // we clean the player's inventory after the EntityDeathEvent is called so plugins can get the exact state of the inventory.
+        if (!event.getKeepInventory()) {
+            // Paper start - PlayerDeathEvent#getItemsToKeep
+            for (NonNullList<ItemStack> inv : this.getInventory().compartments) {
+                processKeep(event, inv);
+            }
+            processKeep(event, null);
+            // Paper end - PlayerDeathEvent#getItemsToKeep
         }
 
-        this.getScoreboard().forAllObjectives(ObjectiveCriteria.DEATH_COUNT, this, ScoreAccess::increment);
-        LivingEntity livingEntity = this.getKillCredit();
-        if (livingEntity != null) {
-            this.awardStat(Stats.ENTITY_KILLED_BY.get(livingEntity.getType()));
-            livingEntity.awardKillScore(this, this.deathScore, damageSource);
-            this.createWitherRose(livingEntity);
+        this.setCamera(this); // Remove spectated target
+        // CraftBukkit end
+
+        // CraftBukkit - Get our scores instead
+        this.level().getCraftServer().getScoreboardManager().forAllObjectives(ObjectiveCriteria.DEATH_COUNT, this, ScoreAccess::increment);
+        LivingEntity entityliving = this.getKillCredit();
+
+        if (entityliving != null) {
+            this.awardStat(Stats.ENTITY_KILLED_BY.get(entityliving.getType()));
+            entityliving.awardKillScore(this, this.deathScore, damageSource);
+            this.createWitherRose(entityliving);
         }
 
-        this.level().broadcastEntityEvent(this, (byte)3);
+        this.level().broadcastEntityEvent(this, (byte) 3);
         this.awardStat(Stats.DEATHS);
         this.resetStat(Stats.CUSTOM.get(Stats.TIME_SINCE_DEATH));
         this.resetStat(Stats.CUSTOM.get(Stats.TIME_SINCE_REST));
@@ -907,12 +1383,13 @@
     }
 
     private void tellNeutralMobsThatIDied() {
-        AABB aABB = new AABB(this.blockPosition()).inflate(32.0, 10.0, 32.0);
-        this.level()
-            .getEntitiesOfClass(Mob.class, aABB, EntitySelector.NO_SPECTATORS)
-            .stream()
-            .filter(entity -> entity instanceof NeutralMob)
-            .forEach(entity -> ((NeutralMob)entity).playerDied(this.serverLevel(), this));
+        AABB axisalignedbb = (new AABB(this.blockPosition())).inflate(32.0D, 10.0D, 32.0D);
+
+        this.level().getEntitiesOfClass(Mob.class, axisalignedbb, EntitySelector.NO_SPECTATORS).stream().filter((entityinsentient) -> {
+            return entityinsentient instanceof NeutralMob;
+        }).forEach((entityinsentient) -> {
+            ((NeutralMob) entityinsentient).playerDied(this.serverLevel(), this);
+        });
     }
 
     @Override
@@ -920,10 +1397,12 @@
         if (entityKilled != this) {
             super.awardKillScore(entityKilled, score, damageSource);
             this.increaseScore(score);
-            this.getScoreboard().forAllObjectives(ObjectiveCriteria.KILL_COUNT_ALL, this, ScoreAccess::increment);
-            if (entityKilled instanceof Player) {
+            // CraftBukkit - Get our scores instead
+            this.level().getCraftServer().getScoreboardManager().forAllObjectives(ObjectiveCriteria.KILL_COUNT_ALL, this, ScoreAccess::increment);
+            if (entityKilled instanceof net.minecraft.world.entity.player.Player) {
                 this.awardStat(Stats.PLAYER_KILLS);
-                this.getScoreboard().forAllObjectives(ObjectiveCriteria.KILL_COUNT_PLAYERS, this, ScoreAccess::increment);
+                // CraftBukkit - Get our scores instead
+                this.level().getCraftServer().getScoreboardManager().forAllObjectives(ObjectiveCriteria.KILL_COUNT_PLAYERS, this, ScoreAccess::increment);
             } else {
                 this.awardStat(Stats.MOB_KILLS);
             }
@@ -935,13 +1414,17 @@
     }
 
     private void handleTeamKill(ScoreHolder targetScoreHolder, ScoreHolder aboutScoreHolder, ObjectiveCriteria[] criterions) {
-        PlayerTeam playerTeam = this.getScoreboard().getPlayersTeam(aboutScoreHolder.getScoreboardName());
-        if (playerTeam != null) {
-            int i = playerTeam.getColor().getId();
+        PlayerTeam scoreboardteam = this.getScoreboard().getPlayersTeam(aboutScoreHolder.getScoreboardName());
+
+        if (scoreboardteam != null) {
+            int i = scoreboardteam.getColor().getId();
+
             if (i >= 0 && i < criterions.length) {
-                this.getScoreboard().forAllObjectives(criterions[i], targetScoreHolder, ScoreAccess::increment);
+                // CraftBukkit - Get our scores instead
+                this.level().getCraftServer().getScoreboardManager().forAllObjectives(criterions[i], targetScoreHolder, ScoreAccess::increment);
             }
         }
+
     }
 
     @Override
@@ -949,79 +1432,141 @@
         if (this.isInvulnerableTo(world, source)) {
             return false;
         } else {
-            boolean bl = this.server.isDedicatedServer() && this.isPvpAllowed() && source.is(DamageTypeTags.IS_FALL);
-            if (!bl && this.spawnInvulnerableTime > 0 && !source.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
+            boolean flag = this.server.isDedicatedServer() && this.isPvpAllowed() && source.is(DamageTypeTags.IS_FALL);
+
+            if (!flag && this.spawnInvulnerableTime > 0 && !source.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
                 return false;
             } else {
                 Entity entity = source.getEntity();
-                if (entity instanceof Player player && !this.canHarmPlayer(player)) {
-                    return false;
+
+                if (entity instanceof net.minecraft.world.entity.player.Player) {
+                    net.minecraft.world.entity.player.Player entityhuman = (net.minecraft.world.entity.player.Player) entity;
+
+                    if (!this.canHarmPlayer(entityhuman)) {
+                        return false;
+                    }
                 }
 
-                if (entity instanceof AbstractArrow abstractArrow && abstractArrow.getOwner() instanceof Player player2 && !this.canHarmPlayer(player2)) {
-                    return false;
+                if (entity instanceof AbstractArrow) {
+                    AbstractArrow entityarrow = (AbstractArrow) entity;
+                    Entity entity1 = entityarrow.getOwner();
+
+                    if (entity1 instanceof net.minecraft.world.entity.player.Player) {
+                        net.minecraft.world.entity.player.Player entityhuman1 = (net.minecraft.world.entity.player.Player) entity1;
+
+                        if (!this.canHarmPlayer(entityhuman1)) {
+                            return false;
+                        }
+                    }
                 }
 
-                return super.hurtServer(world, source, amount);
+                // Paper start - cancellable death events
+                //return super.hurt(source, amount);
+                this.queueHealthUpdatePacket = true;
+                boolean damaged = super.hurtServer(world, source, amount);
+                this.queueHealthUpdatePacket = false;
+                if (this.queuedHealthUpdatePacket != null) {
+                    this.connection.send(this.queuedHealthUpdatePacket);
+                    this.queuedHealthUpdatePacket = null;
+                }
+                return damaged;
+                // Paper end
             }
         }
     }
 
     @Override
-    public boolean canHarmPlayer(Player player) {
-        return this.isPvpAllowed() && super.canHarmPlayer(player);
+    public boolean canHarmPlayer(net.minecraft.world.entity.player.Player player) {
+        return !this.isPvpAllowed() ? false : super.canHarmPlayer(player);
     }
 
     private boolean isPvpAllowed() {
-        return this.server.isPvpAllowed();
+        // CraftBukkit - this.server.isPvpAllowed() -> this.world.pvpMode
+        return this.level().pvpMode;
     }
 
-    public TeleportTransition findRespawnPositionAndUseSpawnBlock(boolean alive, TeleportTransition.PostTeleportTransition postDimensionTransition) {
-        BlockPos blockPos = this.getRespawnPosition();
+    // CraftBukkit start
+    public TeleportTransition findRespawnPositionAndUseSpawnBlock(boolean flag, TeleportTransition.PostTeleportTransition teleporttransition_a, PlayerRespawnEvent.RespawnReason reason) {
+        TeleportTransition teleportTransition;
+        boolean isBedSpawn = false;
+        boolean isAnchorSpawn = false;
+        // CraftBukkit end
+        BlockPos blockposition = this.getRespawnPosition();
         float f = this.getRespawnAngle();
-        boolean bl = this.isRespawnForced();
-        ServerLevel serverLevel = this.server.getLevel(this.getRespawnDimension());
-        if (serverLevel != null && blockPos != null) {
-            Optional<ServerPlayer.RespawnPosAngle> optional = findRespawnAndUseSpawnBlock(serverLevel, blockPos, f, bl, alive);
+        boolean flag1 = this.isRespawnForced();
+        ServerLevel worldserver = this.server.getLevel(this.getRespawnDimension());
+
+        if (worldserver != null && blockposition != null) {
+            Optional<ServerPlayer.RespawnPosAngle> optional = ServerPlayer.findRespawnAndUseSpawnBlock(worldserver, blockposition, f, flag1, flag);
+
             if (optional.isPresent()) {
-                ServerPlayer.RespawnPosAngle respawnPosAngle = optional.get();
-                return new TeleportTransition(serverLevel, respawnPosAngle.position(), Vec3.ZERO, respawnPosAngle.yaw(), 0.0F, postDimensionTransition);
+                ServerPlayer.RespawnPosAngle entityplayer_respawnposangle = (ServerPlayer.RespawnPosAngle) optional.get();
+
+                // CraftBukkit start
+                isBedSpawn = entityplayer_respawnposangle.isBedSpawn();
+                isAnchorSpawn = entityplayer_respawnposangle.isAnchorSpawn();
+                teleportTransition = new TeleportTransition(worldserver, entityplayer_respawnposangle.position(), Vec3.ZERO, entityplayer_respawnposangle.yaw(), 0.0F, teleporttransition_a);
+                // CraftBukkit end
             } else {
-                return TeleportTransition.missingRespawnBlock(this.server.overworld(), this, postDimensionTransition);
+                teleportTransition = TeleportTransition.missingRespawnBlock(this.server.overworld(), this, teleporttransition_a); // CraftBukkit
             }
         } else {
-            return new TeleportTransition(this.server.overworld(), this, postDimensionTransition);
+            teleportTransition = new TeleportTransition(this.server.overworld(), this, teleporttransition_a); // CraftBukkit
+        }
+        // CraftBukkit start
+        if (reason == null) {
+            return teleportTransition;
+        }
+
+        Player respawnPlayer = this.getBukkitEntity();
+        Location location = CraftLocation.toBukkit(teleportTransition.position(), teleportTransition.newLevel().getWorld(), teleportTransition.yRot(), teleportTransition.xRot());
+
+        // Paper start - respawn flags
+        com.google.common.collect.ImmutableSet.Builder<org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag> builder = com.google.common.collect.ImmutableSet.builder();
+        if (reason == org.bukkit.event.player.PlayerRespawnEvent.RespawnReason.END_PORTAL) {
+            builder.add(org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag.END_PORTAL);
+        }
+        PlayerRespawnEvent respawnEvent = new PlayerRespawnEvent(respawnPlayer, location, isBedSpawn, isAnchorSpawn, reason, builder);
+        // Paper end - respawn flags
+        this.level().getCraftServer().getPluginManager().callEvent(respawnEvent);
+        // Spigot Start
+        if (this.connection.isDisconnected()) {
+            return null;
         }
+        // Spigot End
+
+        location = respawnEvent.getRespawnLocation();
+
+        return new TeleportTransition(((CraftWorld) location.getWorld()).getHandle(), CraftLocation.toVec3D(location), teleportTransition.deltaMovement(), location.getYaw(), location.getPitch(), teleportTransition.missingRespawnBlock(), teleportTransition.asPassenger(), teleportTransition.relatives(), teleportTransition.postTeleportTransition(), teleportTransition.cause());
+        // CraftBukkit end
     }
 
-    public static Optional<ServerPlayer.RespawnPosAngle> findRespawnAndUseSpawnBlock(
-        ServerLevel world, BlockPos pos, float spawnAngle, boolean spawnForced, boolean alive
-    ) {
-        BlockState blockState = world.getBlockState(pos);
-        Block block = blockState.getBlock();
-        if (block instanceof RespawnAnchorBlock && (spawnForced || blockState.getValue(RespawnAnchorBlock.CHARGE) > 0) && RespawnAnchorBlock.canSetSpawn(world)
-            )
-         {
+    public static Optional<ServerPlayer.RespawnPosAngle> findRespawnAndUseSpawnBlock(ServerLevel world, BlockPos pos, float spawnAngle, boolean spawnForced, boolean alive) {
+        BlockState iblockdata = world.getBlockState(pos);
+        Block block = iblockdata.getBlock();
+
+        if (block instanceof RespawnAnchorBlock && (spawnForced || (Integer) iblockdata.getValue(RespawnAnchorBlock.CHARGE) > 0) && RespawnAnchorBlock.canSetSpawn(world)) {
             Optional<Vec3> optional = RespawnAnchorBlock.findStandUpPosition(EntityType.PLAYER, world, pos);
+
             if (!spawnForced && alive && optional.isPresent()) {
-                world.setBlock(pos, blockState.setValue(RespawnAnchorBlock.CHARGE, Integer.valueOf(blockState.getValue(RespawnAnchorBlock.CHARGE) - 1)), 3);
+                world.setBlock(pos, (BlockState) iblockdata.setValue(RespawnAnchorBlock.CHARGE, (Integer) iblockdata.getValue(RespawnAnchorBlock.CHARGE) - 1), 3);
             }
 
-            return optional.map(respawnPos -> ServerPlayer.RespawnPosAngle.of(respawnPos, pos));
+            return optional.map((vec3d) -> {
+                return ServerPlayer.RespawnPosAngle.of(vec3d, pos, false, true); // CraftBukkit
+            });
         } else if (block instanceof BedBlock && BedBlock.canSetSpawn(world)) {
-            return BedBlock.findStandUpPosition(EntityType.PLAYER, world, pos, blockState.getValue(BedBlock.FACING), spawnAngle)
-                .map(respawnPos -> ServerPlayer.RespawnPosAngle.of(respawnPos, pos));
+            return BedBlock.findStandUpPosition(EntityType.PLAYER, world, pos, (Direction) iblockdata.getValue(BedBlock.FACING), spawnAngle).map((vec3d) -> {
+                return ServerPlayer.RespawnPosAngle.of(vec3d, pos, true, false); // CraftBukkit
+            });
         } else if (!spawnForced) {
             return Optional.empty();
         } else {
-            boolean bl = block.isPossibleToRespawnInThis(blockState);
-            BlockState blockState2 = world.getBlockState(pos.above());
-            boolean bl2 = blockState2.getBlock().isPossibleToRespawnInThis(blockState2);
-            return bl && bl2
-                ? Optional.of(
-                    new ServerPlayer.RespawnPosAngle(new Vec3((double)pos.getX() + 0.5, (double)pos.getY() + 0.1, (double)pos.getZ() + 0.5), spawnAngle)
-                )
-                : Optional.empty();
+            boolean flag2 = block.isPossibleToRespawnInThis(iblockdata);
+            BlockState iblockdata1 = world.getBlockState(pos.above());
+            boolean flag3 = iblockdata1.getBlock().isPossibleToRespawnInThis(iblockdata1);
+
+            return flag2 && flag3 ? Optional.of(new ServerPlayer.RespawnPosAngle(new Vec3((double) pos.getX() + 0.5D, (double) pos.getY() + 0.1D, (double) pos.getZ() + 0.5D), spawnAngle, false, false)) : Optional.empty(); // CraftBukkit
         }
     }
 
@@ -1033,88 +1578,172 @@
             this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.WIN_GAME, 0.0F));
             this.seenCredits = true;
         }
+
     }
 
     @Nullable
     @Override
-    public ServerPlayer teleport(TeleportTransition teleportTransition) {
+    public ServerPlayer teleport(TeleportTransition teleportTarget) {
+        if (this.isSleeping()) return null; // CraftBukkit - SPIGOT-3154
         if (this.isRemoved()) {
             return null;
         } else {
-            if (teleportTransition.missingRespawnBlock()) {
+            if (teleportTarget.missingRespawnBlock()) {
                 this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.NO_RESPAWN_BLOCK_AVAILABLE, 0.0F));
             }
 
-            ServerLevel serverLevel = teleportTransition.newLevel();
-            ServerLevel serverLevel2 = this.serverLevel();
-            ResourceKey<Level> resourceKey = serverLevel2.dimension();
-            if (!teleportTransition.asPassenger()) {
+            ServerLevel worldserver = teleportTarget.newLevel();
+            ServerLevel worldserver1 = this.serverLevel();
+            // CraftBukkit start
+            ResourceKey<LevelStem> resourcekey = worldserver1.getTypeKey();
+
+            Location enter = this.getBukkitEntity().getLocation();
+            PositionMoveRotation absolutePosition = PositionMoveRotation.calculateAbsolute(PositionMoveRotation.of(this), PositionMoveRotation.of(teleportTarget), teleportTarget.relatives());
+            Location exit = /* (worldserver == null) ? null : // Paper - always non-null */CraftLocation.toBukkit(absolutePosition.position(), worldserver.getWorld(), absolutePosition.yRot(), absolutePosition.xRot());
+            PlayerTeleportEvent tpEvent = new PlayerTeleportEvent(this.getBukkitEntity(), enter, exit, teleportTarget.cause());
+            // Paper start - gateway-specific teleport event
+            if (this.portalProcess != null && this.portalProcess.isSamePortal(((net.minecraft.world.level.block.EndGatewayBlock) net.minecraft.world.level.block.Blocks.END_GATEWAY)) && this.serverLevel().getBlockEntity(this.portalProcess.getEntryPosition()) instanceof net.minecraft.world.level.block.entity.TheEndGatewayBlockEntity theEndGatewayBlockEntity) {
+                tpEvent = new com.destroystokyo.paper.event.player.PlayerTeleportEndGatewayEvent(this.getBukkitEntity(), enter, exit, new org.bukkit.craftbukkit.block.CraftEndGateway(this.serverLevel().getWorld(), theEndGatewayBlockEntity));
+            }
+            // Paper end - gateway-specific teleport event
+            Bukkit.getServer().getPluginManager().callEvent(tpEvent);
+            Location newExit = tpEvent.getTo();
+            if (tpEvent.isCancelled() || newExit == null) {
+                return null;
+            }
+            if (!newExit.equals(exit)) {
+                worldserver = ((CraftWorld) newExit.getWorld()).getHandle();
+                teleportTarget = new TeleportTransition(worldserver, CraftLocation.toVec3D(newExit), Vec3.ZERO, newExit.getYaw(), newExit.getPitch(), teleportTarget.missingRespawnBlock(), teleportTarget.asPassenger(), Set.of(), teleportTarget.postTeleportTransition(), teleportTarget.cause());
+            }
+            // CraftBukkit end
+
+            if (!teleportTarget.asPassenger()) {
                 this.stopRiding();
             }
 
-            if (serverLevel.dimension() == resourceKey) {
-                this.connection.teleport(PositionMoveRotation.of(teleportTransition), teleportTransition.relatives());
+            // CraftBukkit start
+            if (worldserver != null && worldserver.dimension() == worldserver1.dimension()) {
+                this.connection.internalTeleport(PositionMoveRotation.of(teleportTarget), teleportTarget.relatives());
+                // CraftBukkit end
                 this.connection.resetPosition();
-                teleportTransition.postTeleportTransition().onTransition(this);
+                teleportTarget.postTeleportTransition().onTransition(this);
                 return this;
             } else {
+                // CraftBukkit start
+                /*
                 this.isChangingDimension = true;
-                LevelData levelData = serverLevel.getLevelData();
-                this.connection.send(new ClientboundRespawnPacket(this.createCommonSpawnInfo(serverLevel), (byte)3));
-                this.connection.send(new ClientboundChangeDifficultyPacket(levelData.getDifficulty(), levelData.isDifficultyLocked()));
-                PlayerList playerList = this.server.getPlayerList();
-                playerList.sendPlayerPermissionLevel(this);
-                serverLevel2.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
+                WorldData worlddata = worldserver.getLevelData();
+
+                this.connection.send(new PacketPlayOutRespawn(this.createCommonSpawnInfo(worldserver), (byte) 3));
+                this.connection.send(new PacketPlayOutServerDifficulty(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
+                PlayerList playerlist = this.server.getPlayerList();
+
+                playerlist.sendPlayerPermissionLevel(this);
+                worldserver1.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
                 this.unsetRemoved();
-                ProfilerFiller profilerFiller = Profiler.get();
-                profilerFiller.push("moving");
-                if (resourceKey == Level.OVERWORLD && serverLevel.dimension() == Level.NETHER) {
+                */
+                // CraftBukkit end
+                ProfilerFiller gameprofilerfiller = Profiler.get();
+
+                gameprofilerfiller.push("moving");
+                if (worldserver != null && resourcekey == LevelStem.OVERWORLD && worldserver.getTypeKey() == LevelStem.NETHER) { // CraftBukkit - empty to fall through to null to event
                     this.enteredNetherPosition = this.position();
                 }
 
-                profilerFiller.pop();
-                profilerFiller.push("placing");
-                this.setServerLevel(serverLevel);
-                this.connection.teleport(PositionMoveRotation.of(teleportTransition), teleportTransition.relatives());
+                gameprofilerfiller.pop();
+                gameprofilerfiller.push("placing");
+                // CraftBukkit start
+                this.isChangingDimension = true; // CraftBukkit - Set teleport invulnerability only if player changing worlds
+                LevelData worlddata = worldserver.getLevelData();
+
+                this.connection.send(new ClientboundRespawnPacket(this.createCommonSpawnInfo(worldserver), (byte) 3));
+                this.connection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
+                PlayerList playerlist = this.server.getPlayerList();
+
+                playerlist.sendPlayerPermissionLevel(this);
+                worldserver1.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
+                this.unsetRemoved();
+                // CraftBukkit end
+                this.setServerLevel(worldserver);
+                this.connection.internalTeleport(PositionMoveRotation.of(teleportTarget), teleportTarget.relatives()); // CraftBukkit - use internal teleport without event
                 this.connection.resetPosition();
-                serverLevel.addDuringTeleport(this);
-                profilerFiller.pop();
-                this.triggerDimensionChangeTriggers(serverLevel2);
+                worldserver.addDuringTeleport(this);
+                gameprofilerfiller.pop();
+                this.triggerDimensionChangeTriggers(worldserver1);
                 this.stopUsingItem();
                 this.connection.send(new ClientboundPlayerAbilitiesPacket(this.getAbilities()));
-                playerList.sendLevelInfo(this, serverLevel);
-                playerList.sendAllPlayerInfo(this);
-                playerList.sendActivePlayerEffects(this);
-                teleportTransition.postTeleportTransition().onTransition(this);
+                playerlist.sendLevelInfo(this, worldserver);
+                playerlist.sendAllPlayerInfo(this);
+                playerlist.sendActivePlayerEffects(this);
+                teleportTarget.postTeleportTransition().onTransition(this);
                 this.lastSentExp = -1;
                 this.lastSentHealth = -1.0F;
                 this.lastSentFood = -1;
+
+                // CraftBukkit start
+                PlayerChangedWorldEvent changeEvent = new PlayerChangedWorldEvent(this.getBukkitEntity(), worldserver1.getWorld());
+                this.level().getCraftServer().getPluginManager().callEvent(changeEvent);
+                // CraftBukkit end
+                // Paper start - Reset shield blocking on dimension change
+                if (this.isBlocking()) {
+                    this.stopUsingItem();
+                }
+                // Paper end - Reset shield blocking on dimension change
                 return this;
             }
         }
     }
 
+    // CraftBukkit start
+    @Override
+    public CraftPortalEvent callPortalEvent(Entity entity, Location exit, TeleportCause cause, int searchRadius, int creationRadius) {
+        Location enter = this.getBukkitEntity().getLocation();
+        PlayerPortalEvent event = new PlayerPortalEvent(this.getBukkitEntity(), enter, exit, cause, searchRadius, true, creationRadius);
+        Bukkit.getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null) {
+            return null;
+        }
+        return new CraftPortalEvent(event);
+    }
+    // CraftBukkit end
+
     @Override
     public void forceSetRotation(float yaw, float pitch) {
         this.connection.send(new ClientboundPlayerRotationPacket(yaw, pitch));
     }
 
     public void triggerDimensionChangeTriggers(ServerLevel origin) {
-        ResourceKey<Level> resourceKey = origin.dimension();
-        ResourceKey<Level> resourceKey2 = this.level().dimension();
-        CriteriaTriggers.CHANGED_DIMENSION.trigger(this, resourceKey, resourceKey2);
-        if (resourceKey == Level.NETHER && resourceKey2 == Level.OVERWORLD && this.enteredNetherPosition != null) {
+        ResourceKey<Level> resourcekey = origin.dimension();
+        ResourceKey<Level> resourcekey1 = this.level().dimension();
+        // CraftBukkit start
+        ResourceKey<Level> maindimensionkey = CraftDimensionUtil.getMainDimensionKey(origin);
+        ResourceKey<Level> maindimensionkey1 = CraftDimensionUtil.getMainDimensionKey(this.level());
+
+        // Paper start - Add option for strict advancement dimension checks
+        if (io.papermc.paper.configuration.GlobalConfiguration.get().misc.strictAdvancementDimensionCheck) {
+            maindimensionkey = resourcekey;
+            maindimensionkey1 = resourcekey1;
+        }
+        // Paper end - Add option for strict advancement dimension checks
+        CriteriaTriggers.CHANGED_DIMENSION.trigger(this, maindimensionkey, maindimensionkey1);
+        if (maindimensionkey != resourcekey || maindimensionkey1 != resourcekey1) {
+            CriteriaTriggers.CHANGED_DIMENSION.trigger(this, resourcekey, resourcekey1);
+        }
+
+        if (maindimensionkey == Level.NETHER && maindimensionkey1 == Level.OVERWORLD && this.enteredNetherPosition != null) {
+            // CraftBukkit end
             CriteriaTriggers.NETHER_TRAVEL.trigger(this, this.enteredNetherPosition);
         }
 
-        if (resourceKey2 != Level.NETHER) {
+        if (maindimensionkey1 != Level.NETHER) { // CraftBukkit
             this.enteredNetherPosition = null;
         }
+
     }
 
     @Override
     public boolean broadcastToPlayer(ServerPlayer spectator) {
-        return spectator.isSpectator() ? this.getCamera() == this : !this.isSpectator() && super.broadcastToPlayer(spectator);
+        return spectator.isSpectator() ? this.getCamera() == this : (this.isSpectator() ? false : super.broadcastToPlayer(spectator));
     }
 
     @Override
@@ -1123,49 +1752,77 @@
         this.containerMenu.broadcastChanges();
     }
 
-    @Override
-    public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos pos) {
-        Direction direction = this.level().getBlockState(pos).getValue(HorizontalDirectionalBlock.FACING);
-        if (this.isSleeping() || !this.isAlive()) {
-            return Either.left(Player.BedSleepingProblem.OTHER_PROBLEM);
-        } else if (!this.level().dimensionType().natural()) {
-            return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_HERE);
-        } else if (!this.bedInRange(pos, direction)) {
-            return Either.left(Player.BedSleepingProblem.TOO_FAR_AWAY);
-        } else if (this.bedBlocked(pos, direction)) {
-            return Either.left(Player.BedSleepingProblem.OBSTRUCTED);
-        } else {
-            this.setRespawnPosition(this.level().dimension(), pos, this.getYRot(), false, true);
-            if (this.level().isDay()) {
-                return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
+    // CraftBukkit start - moved bed result checks from below into separate method
+    private Either<net.minecraft.world.entity.player.Player.BedSleepingProblem, Unit> getBedResult(BlockPos blockposition, Direction enumdirection) {
+        if (!this.isSleeping() && this.isAlive()) {
+            if (!this.level().dimensionType().natural() || !this.level().dimensionType().bedWorks()) {
+                return Either.left(net.minecraft.world.entity.player.Player.BedSleepingProblem.NOT_POSSIBLE_HERE);
+            } else if (!this.bedInRange(blockposition, enumdirection)) {
+                return Either.left(net.minecraft.world.entity.player.Player.BedSleepingProblem.TOO_FAR_AWAY);
+            } else if (this.bedBlocked(blockposition, enumdirection)) {
+                return Either.left(net.minecraft.world.entity.player.Player.BedSleepingProblem.OBSTRUCTED);
             } else {
-                if (!this.isCreative()) {
-                    double d = 8.0;
-                    double e = 5.0;
-                    Vec3 vec3 = Vec3.atBottomCenterOf(pos);
-                    List<Monster> list = this.level()
-                        .getEntitiesOfClass(
-                            Monster.class,
-                            new AABB(vec3.x() - 8.0, vec3.y() - 5.0, vec3.z() - 8.0, vec3.x() + 8.0, vec3.y() + 5.0, vec3.z() + 8.0),
-                            entity -> entity.isPreventingPlayerRest(this.serverLevel(), this)
-                        );
-                    if (!list.isEmpty()) {
-                        return Either.left(Player.BedSleepingProblem.NOT_SAFE);
+                this.setRespawnPosition(this.level().dimension(), blockposition, this.getYRot(), false, true, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.BED); // Paper - Add PlayerSetSpawnEvent
+                if (this.level().isDay()) {
+                    return Either.left(net.minecraft.world.entity.player.Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
+                } else {
+                    if (!this.isCreative()) {
+                        double d0 = 8.0D;
+                        double d1 = 5.0D;
+                        Vec3 vec3d = Vec3.atBottomCenterOf(blockposition);
+                        List<Monster> list = this.level().getEntitiesOfClass(Monster.class, new AABB(vec3d.x() - 8.0D, vec3d.y() - 5.0D, vec3d.z() - 8.0D, vec3d.x() + 8.0D, vec3d.y() + 5.0D, vec3d.z() + 8.0D), (entitymonster) -> {
+                            return entitymonster.isPreventingPlayerRest(this.serverLevel(), this);
+                        });
+
+                        if (!list.isEmpty()) {
+                            return Either.left(net.minecraft.world.entity.player.Player.BedSleepingProblem.NOT_SAFE);
+                        }
                     }
-                }
 
-                Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed(pos).ifRight(unit -> {
-                    this.awardStat(Stats.SLEEP_IN_BED);
-                    CriteriaTriggers.SLEPT_IN_BED.trigger(this);
-                });
-                if (!this.serverLevel().canSleepThroughNights()) {
-                    this.displayClientMessage(Component.translatable("sleep.not_possible"), true);
+                    return Either.right(Unit.INSTANCE);
                 }
+            }
+        } else {
+            return Either.left(net.minecraft.world.entity.player.Player.BedSleepingProblem.OTHER_PROBLEM);
+        }
+    }
 
-                ((ServerLevel)this.level()).updateSleepingPlayerList();
-                return either;
+    @Override
+    public Either<net.minecraft.world.entity.player.Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos blockposition, boolean force) {
+        Direction enumdirection = (Direction) this.level().getBlockState(blockposition).getValue(HorizontalDirectionalBlock.FACING);
+        Either<net.minecraft.world.entity.player.Player.BedSleepingProblem, Unit> bedResult = this.getBedResult(blockposition, enumdirection);
+
+        if (bedResult.left().orElse(null) == net.minecraft.world.entity.player.Player.BedSleepingProblem.OTHER_PROBLEM) {
+            return bedResult; // return immediately if the result is not bypassable by plugins
+        }
+
+        if (force) {
+            bedResult = Either.right(Unit.INSTANCE);
+        }
+
+        bedResult = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerBedEnterEvent(this, blockposition, bedResult);
+        if (bedResult.left().isPresent()) {
+            return bedResult;
+        }
+
+        {
+            {
+                {
+                    Either<net.minecraft.world.entity.player.Player.BedSleepingProblem, Unit> either = super.startSleepInBed(blockposition, force).ifRight((unit) -> {
+                        this.awardStat(Stats.SLEEP_IN_BED);
+                        CriteriaTriggers.SLEPT_IN_BED.trigger(this);
+                    });
+
+                    if (!this.serverLevel().canSleepThroughNights()) {
+                        this.displayClientMessage(Component.translatable("sleep.not_possible"), true);
+                    }
+
+                    ((ServerLevel) this.level()).updateSleepingPlayerList();
+                    return either;
+                }
             }
         }
+        // CraftBukkit end
     }
 
     @Override
@@ -1179,25 +1836,46 @@
     }
 
     private boolean isReachableBedBlock(BlockPos pos) {
-        Vec3 vec3 = Vec3.atBottomCenterOf(pos);
-        return Math.abs(this.getX() - vec3.x()) <= 3.0 && Math.abs(this.getY() - vec3.y()) <= 2.0 && Math.abs(this.getZ() - vec3.z()) <= 3.0;
+        Vec3 vec3d = Vec3.atBottomCenterOf(pos);
+
+        return Math.abs(this.getX() - vec3d.x()) <= 3.0D && Math.abs(this.getY() - vec3d.y()) <= 2.0D && Math.abs(this.getZ() - vec3d.z()) <= 3.0D;
     }
 
     private boolean bedBlocked(BlockPos pos, Direction direction) {
-        BlockPos blockPos = pos.above();
-        return !this.freeAt(blockPos) || !this.freeAt(blockPos.relative(direction.getOpposite()));
+        BlockPos blockposition1 = pos.above();
+
+        return !this.freeAt(blockposition1) || !this.freeAt(blockposition1.relative(direction.getOpposite()));
     }
 
     @Override
     public void stopSleepInBed(boolean skipSleepTimer, boolean updateSleepingPlayers) {
+        if (!this.isSleeping()) return; // CraftBukkit - Can't leave bed if not in one!
+        // CraftBukkit start - fire PlayerBedLeaveEvent
+        CraftPlayer player = this.getBukkitEntity();
+        BlockPos bedPosition = this.getSleepingPos().orElse(null);
+
+        org.bukkit.block.Block bed;
+        if (bedPosition != null) {
+            bed = this.level().getWorld().getBlockAt(bedPosition.getX(), bedPosition.getY(), bedPosition.getZ());
+        } else {
+            bed = this.level().getWorld().getBlockAt(player.getLocation());
+        }
+
+        PlayerBedLeaveEvent event = new PlayerBedLeaveEvent(player, bed, true);
+        this.level().getCraftServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return;
+        }
+        // CraftBukkit end
         if (this.isSleeping()) {
             this.serverLevel().getChunkSource().broadcastAndSend(this, new ClientboundAnimatePacket(this, 2));
         }
 
         super.stopSleepInBed(skipSleepTimer, updateSleepingPlayers);
         if (this.connection != null) {
-            this.connection.teleport(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
+            this.connection.teleport(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot(), TeleportCause.EXIT_BED); // CraftBukkit
         }
+
     }
 
     @Override
@@ -1208,33 +1886,35 @@
 
     @Override
     public boolean isInvulnerableTo(ServerLevel world, DamageSource source) {
-        return super.isInvulnerableTo(world, source) || this.isChangingDimension() && !source.is(DamageTypes.ENDER_PEARL);
+        return super.isInvulnerableTo(world, source) || (this.isChangingDimension() && !source.is(DamageTypes.ENDER_PEARL)) || (!this.level().paperConfig().collisions.allowPlayerCrammingDamage && source.is(DamageTypes.CRAMMING)); // Paper - disable player cramming;
     }
 
     @Override
-    protected void checkFallDamage(double heightDifference, boolean onGround, BlockState state, BlockPos landedPosition) {
-    }
+    protected void checkFallDamage(double heightDifference, boolean onGround, BlockState state, BlockPos landedPosition) {}
 
     @Override
     protected void onChangedBlock(ServerLevel world, BlockPos pos) {
         if (!this.isSpectator()) {
             super.onChangedBlock(world, pos);
         }
+
     }
 
     public void doCheckFallDamage(double xDifference, double yDifference, double zDifference, boolean onGround) {
         if (!this.touchingUnloadedChunk()) {
             this.checkSupportingBlock(onGround, new Vec3(xDifference, yDifference, zDifference));
-            BlockPos blockPos = this.getOnPosLegacy();
-            BlockState blockState = this.level().getBlockState(blockPos);
+            BlockPos blockposition = this.getOnPosLegacy();
+            BlockState iblockdata = this.level().getBlockState(blockposition);
+
             if (this.spawnExtraParticlesOnFall && onGround && this.fallDistance > 0.0F) {
-                Vec3 vec3 = blockPos.getCenter().add(0.0, 0.5, 0.0);
-                int i = (int)Mth.clamp(50.0F * this.fallDistance, 0.0F, 200.0F);
-                this.serverLevel().sendParticles(new BlockParticleOption(ParticleTypes.BLOCK, blockState), vec3.x, vec3.y, vec3.z, i, 0.3F, 0.3F, 0.3F, 0.15F);
+                Vec3 vec3d = blockposition.getCenter().add(0.0D, 0.5D, 0.0D);
+                int i = (int) Mth.clamp(50.0F * this.fallDistance, 0.0F, 200.0F);
+
+                this.serverLevel().sendParticles(new BlockParticleOption(ParticleTypes.BLOCK, iblockdata), vec3d.x, vec3d.y, vec3d.z, i, 0.30000001192092896D, 0.30000001192092896D, 0.30000001192092896D, 0.15000000596046448D);
                 this.spawnExtraParticlesOnFall = false;
             }
 
-            super.checkFallDamage(yDifference, onGround, blockState, blockPos);
+            super.checkFallDamage(yDifference, onGround, iblockdata, blockposition);
         }
     }
 
@@ -1251,6 +1931,7 @@
         if (this.level().tickRateManager().runsNormally()) {
             super.pushEntities();
         }
+
     }
 
     @Override
@@ -1259,8 +1940,9 @@
         this.connection.send(new ClientboundOpenSignEditorPacket(sign.getBlockPos(), front));
     }
 
-    public void nextContainerCounter() {
+    public int nextContainerCounter() { // CraftBukkit - void -> int
         this.containerCounter = this.containerCounter % 100 + 1;
+        return this.containerCounter; // CraftBukkit
     }
 
     @Override
@@ -1268,23 +1950,56 @@
         if (factory == null) {
             return OptionalInt.empty();
         } else {
+            // CraftBukkit start - SPIGOT-6552: Handle inventory closing in CraftEventFactory#callInventoryOpenEvent(...)
+            /*
             if (this.containerMenu != this.inventoryMenu) {
                 this.closeContainer();
             }
+            */
+            // CraftBukkit end
 
             this.nextContainerCounter();
-            AbstractContainerMenu abstractContainerMenu = factory.createMenu(this.containerCounter, this.getInventory(), this);
-            if (abstractContainerMenu == null) {
+            AbstractContainerMenu container = factory.createMenu(this.containerCounter, this.getInventory(), this);
+
+            Component title = null; // Paper - Add titleOverride to InventoryOpenEvent
+            // CraftBukkit start - Inventory open hook
+            if (container != null) {
+                container.setTitle(factory.getDisplayName());
+
+                boolean cancelled = false;
+                // Paper start - Add titleOverride to InventoryOpenEvent
+                final com.mojang.datafixers.util.Pair<net.kyori.adventure.text.Component, AbstractContainerMenu> result = CraftEventFactory.callInventoryOpenEventWithTitle(this, container, cancelled);
+                container = result.getSecond();
+                title = PaperAdventure.asVanilla(result.getFirst());
+                // Paper end - Add titleOverride to InventoryOpenEvent
+                if (container == null && !cancelled) { // Let pre-cancelled events fall through
+                    // SPIGOT-5263 - close chest if cancelled
+                    if (factory instanceof Container) {
+                        ((Container) factory).stopOpen(this);
+                    } else if (factory instanceof ChestBlock.DoubleInventory) {
+                        // SPIGOT-5355 - double chests too :(
+                        ((ChestBlock.DoubleInventory) factory).inventorylargechest.stopOpen(this);
+                        // Paper start - Fix InventoryOpenEvent cancellation
+                    } else if (!this.enderChestInventory.isActiveChest(null)) {
+                        this.enderChestInventory.stopOpen(this);
+                        // Paper end - Fix InventoryOpenEvent cancellation
+                    }
+                    return OptionalInt.empty();
+                }
+            }
+            // CraftBukkit end
+            if (container == null) {
                 if (this.isSpectator()) {
                     this.displayClientMessage(Component.translatable("container.spectatorCantOpen").withStyle(ChatFormatting.RED), true);
                 }
 
                 return OptionalInt.empty();
             } else {
-                this.connection
-                    .send(new ClientboundOpenScreenPacket(abstractContainerMenu.containerId, abstractContainerMenu.getType(), factory.getDisplayName()));
-                this.initMenu(abstractContainerMenu);
-                this.containerMenu = abstractContainerMenu;
+                // CraftBukkit start
+                this.containerMenu = container;
+                if (!this.isImmobile()) this.connection.send(new ClientboundOpenScreenPacket(container.containerId, container.getType(), Objects.requireNonNullElseGet(title, container::getTitle))); // Paper - Add titleOverride to InventoryOpenEvent
+                // CraftBukkit end
+                this.initMenu(container);
                 return OptionalInt.of(this.containerCounter);
             }
         }
@@ -1297,14 +2012,26 @@
 
     @Override
     public void openHorseInventory(AbstractHorse horse, Container inventory) {
+        // CraftBukkit start - Inventory open hook
+        this.nextContainerCounter();
+        AbstractContainerMenu container = new HorseInventoryMenu(this.containerCounter, this.getInventory(), inventory, horse, horse.getInventoryColumns());
+        container.setTitle(horse.getDisplayName());
+        container = CraftEventFactory.callInventoryOpenEvent(this, container);
+
+        if (container == null) {
+            inventory.stopOpen(this);
+            return;
+        }
+        // CraftBukkit end
         if (this.containerMenu != this.inventoryMenu) {
-            this.closeContainer();
+            this.closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.OPEN_NEW); // Paper - Inventory close reason
         }
 
-        this.nextContainerCounter();
+        // this.nextContainerCounter(); // CraftBukkit - moved up
         int i = horse.getInventoryColumns();
+
         this.connection.send(new ClientboundHorseScreenOpenPacket(this.containerCounter, i, horse.getId()));
-        this.containerMenu = new HorseInventoryMenu(this.containerCounter, this.getInventory(), inventory, horse, i);
+        this.containerMenu = container; // CraftBukkit
         this.initMenu(this.containerMenu);
     }
 
@@ -1317,6 +2044,7 @@
 
             this.connection.send(new ClientboundOpenBookPacket(hand));
         }
+
     }
 
     @Override
@@ -1326,9 +2054,28 @@
 
     @Override
     public void closeContainer() {
+        // Paper start - Inventory close reason
+        this.closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.UNKNOWN);
+    }
+    @Override
+    public void closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason reason) {
+        CraftEventFactory.handleInventoryCloseEvent(this, reason); // CraftBukkit
+        // Paper end - Inventory close reason
         this.connection.send(new ClientboundContainerClosePacket(this.containerMenu.containerId));
         this.doCloseContainer();
     }
+    // Paper start - special close for unloaded inventory
+    @Override
+    public void closeUnloadedInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason reason) {
+        // copied from above
+        CraftEventFactory.handleInventoryCloseEvent(this, reason); // CraftBukkit
+        // Paper end
+        // copied from below
+        this.connection.send(new ClientboundContainerClosePacket(this.containerMenu.containerId));
+        this.containerMenu = this.inventoryMenu;
+        // do not run close logic
+    }
+    // Paper end - special close for unloaded inventory
 
     @Override
     public void doCloseContainer() {
@@ -1339,67 +2086,72 @@
 
     @Override
     public void rideTick() {
-        double d = this.getX();
-        double e = this.getY();
-        double f = this.getZ();
+        double d0 = this.getX();
+        double d1 = this.getY();
+        double d2 = this.getZ();
+
         super.rideTick();
-        this.checkRidingStatistics(this.getX() - d, this.getY() - e, this.getZ() - f);
+        this.checkRidingStatistics(this.getX() - d0, this.getY() - d1, this.getZ() - d2);
     }
 
     public void checkMovementStatistics(double deltaX, double deltaY, double deltaZ) {
-        if (!this.isPassenger() && !didNotMove(deltaX, deltaY, deltaZ)) {
+        if (!this.isPassenger() && !ServerPlayer.didNotMove(deltaX, deltaY, deltaZ)) {
+            int i;
+
             if (this.isSwimming()) {
-                int i = Math.round((float)Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
+                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
                 if (i > 0) {
                     this.awardStat(Stats.SWIM_ONE_CM, i);
-                    this.causeFoodExhaustion(0.01F * (float)i * 0.01F);
+                    this.causeFoodExhaustion(this.level().spigotConfig.swimMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.SWIM); // CraftBukkit - EntityExhaustionEvent // Spigot
                 }
             } else if (this.isEyeInFluid(FluidTags.WATER)) {
-                int j = Math.round((float)Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
-                if (j > 0) {
-                    this.awardStat(Stats.WALK_UNDER_WATER_ONE_CM, j);
-                    this.causeFoodExhaustion(0.01F * (float)j * 0.01F);
+                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
+                if (i > 0) {
+                    this.awardStat(Stats.WALK_UNDER_WATER_ONE_CM, i);
+                    this.causeFoodExhaustion(this.level().spigotConfig.swimMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.WALK_UNDERWATER); // CraftBukkit - EntityExhaustionEvent // Spigot
                 }
             } else if (this.isInWater()) {
-                int k = Math.round((float)Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
-                if (k > 0) {
-                    this.awardStat(Stats.WALK_ON_WATER_ONE_CM, k);
-                    this.causeFoodExhaustion(0.01F * (float)k * 0.01F);
+                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
+                if (i > 0) {
+                    this.awardStat(Stats.WALK_ON_WATER_ONE_CM, i);
+                    this.causeFoodExhaustion(this.level().spigotConfig.swimMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.WALK_ON_WATER); // CraftBukkit - EntityExhaustionEvent // Spigot
                 }
             } else if (this.onClimbable()) {
-                if (deltaY > 0.0) {
-                    this.awardStat(Stats.CLIMB_ONE_CM, (int)Math.round(deltaY * 100.0));
+                if (deltaY > 0.0D) {
+                    this.awardStat(Stats.CLIMB_ONE_CM, (int) Math.round(deltaY * 100.0D));
                 }
             } else if (this.onGround()) {
-                int l = Math.round((float)Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
-                if (l > 0) {
+                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
+                if (i > 0) {
                     if (this.isSprinting()) {
-                        this.awardStat(Stats.SPRINT_ONE_CM, l);
-                        this.causeFoodExhaustion(0.1F * (float)l * 0.01F);
+                        this.awardStat(Stats.SPRINT_ONE_CM, i);
+                        this.causeFoodExhaustion(this.level().spigotConfig.sprintMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.SPRINT); // CraftBukkit - EntityExhaustionEvent // Spigot
                     } else if (this.isCrouching()) {
-                        this.awardStat(Stats.CROUCH_ONE_CM, l);
-                        this.causeFoodExhaustion(0.0F * (float)l * 0.01F);
+                        this.awardStat(Stats.CROUCH_ONE_CM, i);
+                        this.causeFoodExhaustion(this.level().spigotConfig.otherMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.CROUCH); // CraftBukkit - EntityExhaustionEvent // Spigot
                     } else {
-                        this.awardStat(Stats.WALK_ONE_CM, l);
-                        this.causeFoodExhaustion(0.0F * (float)l * 0.01F);
+                        this.awardStat(Stats.WALK_ONE_CM, i);
+                        this.causeFoodExhaustion(this.level().spigotConfig.otherMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.WALK); // CraftBukkit - EntityExhaustionEvent // Spigot
                     }
                 }
             } else if (this.isFallFlying()) {
-                int m = Math.round((float)Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
-                this.awardStat(Stats.AVIATE_ONE_CM, m);
+                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
+                this.awardStat(Stats.AVIATE_ONE_CM, i);
             } else {
-                int n = Math.round((float)Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
-                if (n > 25) {
-                    this.awardStat(Stats.FLY_ONE_CM, n);
+                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
+                if (i > 25) {
+                    this.awardStat(Stats.FLY_ONE_CM, i);
                 }
             }
+
         }
     }
 
     private void checkRidingStatistics(double deltaX, double deltaY, double deltaZ) {
-        if (this.isPassenger() && !didNotMove(deltaX, deltaY, deltaZ)) {
-            int i = Math.round((float)Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
+        if (this.isPassenger() && !ServerPlayer.didNotMove(deltaX, deltaY, deltaZ)) {
+            int i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
             Entity entity = this.getVehicle();
+
             if (entity instanceof AbstractMinecart) {
                 this.awardStat(Stats.MINECART_ONE_CM, i);
             } else if (entity instanceof AbstractBoat) {
@@ -1411,23 +2163,26 @@
             } else if (entity instanceof Strider) {
                 this.awardStat(Stats.STRIDER_ONE_CM, i);
             }
+
         }
     }
 
     private static boolean didNotMove(double deltaX, double deltaY, double deltaZ) {
-        return deltaX == 0.0 && deltaY == 0.0 && deltaZ == 0.0;
+        return deltaX == 0.0D && deltaY == 0.0D && deltaZ == 0.0D;
     }
 
     @Override
     public void awardStat(Stat<?> stat, int amount) {
         this.stats.increment(this, stat, amount);
-        this.getScoreboard().forAllObjectives(stat, this, score -> score.add(amount));
+        this.level().getCraftServer().getScoreboardManager().forAllObjectives(stat, this, (scoreaccess) -> {
+            scoreaccess.add(amount);
+        });
     }
 
     @Override
     public void resetStat(Stat<?> stat) {
         this.stats.setValue(this, stat, 0);
-        this.getScoreboard().forAllObjectives(stat, this, ScoreAccess::reset);
+        this.level().getCraftServer().getScoreboardManager().forAllObjectives(stat, this, ScoreAccess::reset); // CraftBukkit - Get our scores instead
     }
 
     @Override
@@ -1442,10 +2197,11 @@
 
     @Override
     public void awardRecipesByKey(List<ResourceKey<Recipe<?>>> recipes) {
-        List<RecipeHolder<?>> list = recipes.stream()
-            .flatMap(recipeKey -> this.server.getRecipeManager().byKey((ResourceKey<Recipe<?>>)recipeKey).stream())
-            .collect(Collectors.toList());
-        this.awardRecipes(list);
+        List<RecipeHolder<?>> list1 = (List) recipes.stream().flatMap((resourcekey) -> {
+            return this.server.getRecipeManager().byKey(resourcekey).stream();
+        }).collect(Collectors.toList());
+
+        this.awardRecipes(list1);
     }
 
     @Override
@@ -1458,10 +2214,11 @@
         super.jumpFromGround();
         this.awardStat(Stats.JUMP);
         if (this.isSprinting()) {
-            this.causeFoodExhaustion(0.2F);
+            this.causeFoodExhaustion(this.level().spigotConfig.jumpSprintExhaustion, EntityExhaustionEvent.ExhaustionReason.JUMP_SPRINT); // CraftBukkit - EntityExhaustionEvent // Spigot - Change to use configurable value
         } else {
-            this.causeFoodExhaustion(0.05F);
+            this.causeFoodExhaustion(this.level().spigotConfig.jumpWalkExhaustion, EntityExhaustionEvent.ExhaustionReason.JUMP); // CraftBukkit - EntityExhaustionEvent // Spigot - Change to use configurable value
         }
+
     }
 
     @Override
@@ -1473,9 +2230,17 @@
     public void disconnect() {
         this.disconnected = true;
         this.ejectPassengers();
+
+        // Paper start - Workaround vehicle not tracking the passenger disconnection dismount
+        if (this.isPassenger() && this.getVehicle() instanceof ServerPlayer) {
+            this.stopRiding();
+        }
+        // Paper end - Workaround vehicle not tracking the passenger disconnection dismount
+
         if (this.isSleeping()) {
             this.stopSleepInBed(true, false);
         }
+
     }
 
     public boolean hasDisconnected() {
@@ -1484,6 +2249,7 @@
 
     public void resetSentInfo() {
         this.lastSentHealth = -1.0E8F;
+        this.lastSentExp = -1; // CraftBukkit - Added to reset
     }
 
     @Override
@@ -1494,9 +2260,10 @@
     @Override
     public void completeUsingItem() {
         if (!this.useItem.isEmpty() && this.isUsingItem()) {
-            this.connection.send(new ClientboundEntityEventPacket(this, (byte)9));
+            this.connection.send(new ClientboundEntityEventPacket(this, (byte) 9));
             super.completeUsingItem();
         }
+
     }
 
     @Override
@@ -1506,8 +2273,9 @@
     }
 
     public void lookAt(EntityAnchorArgument.Anchor anchorPoint, Entity targetEntity, EntityAnchorArgument.Anchor targetAnchor) {
-        Vec3 vec3 = targetAnchor.apply(targetEntity);
-        super.lookAt(anchorPoint, vec3);
+        Vec3 vec3d = targetAnchor.apply(targetEntity);
+
+        super.lookAt(anchorPoint, vec3d);
         this.connection.send(new ClientboundPlayerLookAtPacket(anchorPoint, targetEntity, targetAnchor));
     }
 
@@ -1518,12 +2286,15 @@
         this.onUpdateAbilities();
         if (alive) {
             this.getAttributes().assignBaseValues(oldPlayer.getAttributes());
-            this.getAttributes().assignPermanentModifiers(oldPlayer.getAttributes());
+            // this.getAttributes().assignPermanentModifiers(entityplayer.getAttributes()); // CraftBukkit
             this.setHealth(oldPlayer.getHealth());
             this.foodData = oldPlayer.foodData;
+            Iterator iterator = oldPlayer.getActiveEffects().iterator();
 
-            for (MobEffectInstance mobEffectInstance : oldPlayer.getActiveEffects()) {
-                this.addEffect(new MobEffectInstance(mobEffectInstance));
+            while (iterator.hasNext()) {
+                MobEffectInstance mobeffect = (MobEffectInstance) iterator.next();
+
+                // this.addEffect(new MobEffect(mobeffect)); // CraftBukkit
             }
 
             this.getInventory().replaceWith(oldPlayer.getInventory());
@@ -1534,7 +2305,7 @@
             this.portalProcess = oldPlayer.portalProcess;
         } else {
             this.getAttributes().assignBaseValues(oldPlayer.getAttributes());
-            this.setHealth(this.getMaxHealth());
+            // this.setHealth(this.getMaxHealth()); // CraftBukkit
             if (this.serverLevel().getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY) || oldPlayer.isSpectator()) {
                 this.getInventory().replaceWith(oldPlayer.getInventory());
                 this.experienceLevel = oldPlayer.experienceLevel;
@@ -1546,11 +2317,11 @@
 
         this.enchantmentSeed = oldPlayer.enchantmentSeed;
         this.enderChestInventory = oldPlayer.enderChestInventory;
-        this.getEntityData().set(DATA_PLAYER_MODE_CUSTOMISATION, oldPlayer.getEntityData().get(DATA_PLAYER_MODE_CUSTOMISATION));
+        this.getEntityData().set(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION, (Byte) oldPlayer.getEntityData().get(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION));
         this.lastSentExp = -1;
         this.lastSentHealth = -1.0F;
         this.lastSentFood = -1;
-        this.recipeBook.copyOverData(oldPlayer.recipeBook);
+        // this.recipeBook.copyOverData(entityplayer.recipeBook); // CraftBukkit
         this.seenCredits = oldPlayer.seenCredits;
         this.enteredNetherPosition = oldPlayer.enteredNetherPosition;
         this.chunkTrackingView = oldPlayer.chunkTrackingView;
@@ -1581,21 +2352,23 @@
     @Override
     protected void onEffectsRemoved(Collection<MobEffectInstance> effects) {
         super.onEffectsRemoved(effects);
+        Iterator iterator = effects.iterator();
 
-        for (MobEffectInstance mobEffectInstance : effects) {
-            this.connection.send(new ClientboundRemoveMobEffectPacket(this.getId(), mobEffectInstance.getEffect()));
-            if (mobEffectInstance.is(MobEffects.LEVITATION)) {
+        while (iterator.hasNext()) {
+            MobEffectInstance mobeffect = (MobEffectInstance) iterator.next();
+
+            this.connection.send(new ClientboundRemoveMobEffectPacket(this.getId(), mobeffect.getEffect()));
+            if (mobeffect.is(MobEffects.LEVITATION)) {
                 this.levitationStartPos = null;
             }
         }
 
-        CriteriaTriggers.EFFECTS_CHANGED.trigger(this, null);
+        CriteriaTriggers.EFFECTS_CHANGED.trigger(this, (Entity) null);
     }
 
     @Override
     public void teleportTo(double destX, double destY, double destZ) {
-        this.connection
-            .teleport(new PositionMoveRotation(new Vec3(destX, destY, destZ), Vec3.ZERO, 0.0F, 0.0F), Relative.union(Relative.DELTA, Relative.ROTATION));
+        this.connection.teleport(new PositionMoveRotation(new Vec3(destX, destY, destZ), Vec3.ZERO, 0.0F, 0.0F), Relative.union(Relative.DELTA, Relative.ROTATION));
     }
 
     @Override
@@ -1604,23 +2377,25 @@
     }
 
     @Override
-    public boolean teleportTo(ServerLevel world, double destX, double destY, double destZ, Set<Relative> flags, float yaw, float pitch, boolean resetCamera) {
-        ChunkPos chunkPos = new ChunkPos(BlockPos.containing(destX, destY, destZ));
-        world.getChunkSource().addRegionTicket(TicketType.POST_TELEPORT, chunkPos, 1, this.getId());
+    public boolean teleportTo(ServerLevel worldserver, double d0, double d1, double d2, Set<Relative> set, float f, float f1, boolean flag, TeleportCause cause) { // CraftBukkit
+        ChunkPos chunkcoordintpair = new ChunkPos(BlockPos.containing(d0, d1, d2));
+
+        worldserver.getChunkSource().addRegionTicket(TicketType.POST_TELEPORT, chunkcoordintpair, 1, this.getId());
         if (this.isSleeping()) {
             this.stopSleepInBed(true, true);
         }
 
-        if (resetCamera) {
+        if (flag) {
             this.setCamera(this);
         }
 
-        boolean bl = super.teleportTo(world, destX, destY, destZ, flags, yaw, pitch, resetCamera);
-        if (bl) {
-            this.setYHeadRot(flags.contains(Relative.Y_ROT) ? this.getYHeadRot() + yaw : yaw);
+        boolean flag1 = super.teleportTo(worldserver, d0, d1, d2, set, f, f1, flag, cause); // CraftBukkit
+
+        if (flag1) {
+            this.setYHeadRot(set.contains(Relative.Y_ROT) ? this.getYHeadRot() + f : f);
         }
 
-        return bl;
+        return flag1;
     }
 
     @Override
@@ -1648,29 +2423,38 @@
     }
 
     public ServerLevel serverLevel() {
-        return (ServerLevel)this.level();
+        return (ServerLevel) this.level();
     }
 
     public boolean setGameMode(GameType gameMode) {
-        boolean bl = this.isSpectator();
-        if (!this.gameMode.changeGameModeForPlayer(gameMode)) {
-            return false;
+        // Paper start - Expand PlayerGameModeChangeEvent
+        org.bukkit.event.player.PlayerGameModeChangeEvent event = this.setGameMode(gameMode, org.bukkit.event.player.PlayerGameModeChangeEvent.Cause.UNKNOWN, null);
+        return event == null ? false : event.isCancelled();
+    }
+    @Nullable
+    public org.bukkit.event.player.PlayerGameModeChangeEvent setGameMode(GameType gameMode, org.bukkit.event.player.PlayerGameModeChangeEvent.Cause cause, @Nullable net.kyori.adventure.text.Component message) {
+        boolean flag = this.isSpectator();
+
+        org.bukkit.event.player.PlayerGameModeChangeEvent event = this.gameMode.changeGameModeForPlayer(gameMode, cause, message);
+        if (event == null || event.isCancelled()) {
+            return null;
+            // Paper end - Expand PlayerGameModeChangeEvent
         } else {
-            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.CHANGE_GAME_MODE, (float)gameMode.getId()));
+            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.CHANGE_GAME_MODE, (float) gameMode.getId()));
             if (gameMode == GameType.SPECTATOR) {
                 this.removeEntitiesOnShoulder();
                 this.stopRiding();
                 EnchantmentHelper.stopLocationBasedEffects(this);
             } else {
                 this.setCamera(this);
-                if (bl) {
+                if (flag) {
                     EnchantmentHelper.runLocationChangedEffects(this.serverLevel(), this);
                 }
             }
 
             this.onUpdateAbilities();
             this.updateEffectVisibility();
-            return true;
+            return event; // Paper - Expand PlayerGameModeChangeEvent
         }
     }
 
@@ -1689,17 +2473,7 @@
     }
 
     public CommandSourceStack createCommandSourceStack() {
-        return new CommandSourceStack(
-            this.commandSource(),
-            this.position(),
-            this.getRotationVector(),
-            this.serverLevel(),
-            this.getPermissionLevel(),
-            this.getName().getString(),
-            this.getDisplayName(),
-            this.server,
-            this
-        );
+        return new CommandSourceStack(this.commandSource(), this.position(), this.getRotationVector(), this.serverLevel(), this.getPermissionLevel(), this.getName().getString(), this.getDisplayName(), this.server, this);
     }
 
     public void sendSystemMessage(Component message) {
@@ -1708,65 +2482,88 @@
 
     public void sendSystemMessage(Component message, boolean overlay) {
         if (this.acceptsSystemMessages(overlay)) {
-            this.connection
-                .send(
-                    new ClientboundSystemChatPacket(message, overlay),
-                    PacketSendListener.exceptionallySend(
-                        () -> {
-                            if (this.acceptsSystemMessages(false)) {
-                                int i = 256;
-                                String string = message.getString(256);
-                                Component component2 = Component.literal(string).withStyle(ChatFormatting.YELLOW);
-                                return new ClientboundSystemChatPacket(
-                                    Component.translatable("multiplayer.message_not_delivered", component2).withStyle(ChatFormatting.RED), false
-                                );
-                            } else {
-                                return null;
-                            }
-                        }
-                    )
-                );
+            this.connection.send(new ClientboundSystemChatPacket(message, overlay), PacketSendListener.exceptionallySend(() -> {
+                if (this.acceptsSystemMessages(false)) {
+                    boolean flag1 = true;
+                    String s = message.getString(256);
+                    MutableComponent ichatmutablecomponent = Component.literal(s).withStyle(ChatFormatting.YELLOW);
+
+                    return new ClientboundSystemChatPacket(Component.translatable("multiplayer.message_not_delivered", ichatmutablecomponent).withStyle(ChatFormatting.RED), false);
+                } else {
+                    return null;
+                }
+            }));
         }
     }
 
     public void sendChatMessage(OutgoingChatMessage message, boolean filterMaskEnabled, ChatType.Bound params) {
+        // Paper start
+        this.sendChatMessage(message, filterMaskEnabled, params, null);
+    }
+    public void sendChatMessage(OutgoingChatMessage message, boolean filterMaskEnabled, ChatType.Bound params, @Nullable Component unsigned) {
+        // Paper end
         if (this.acceptsChatMessages()) {
-            message.sendToPlayer(this, filterMaskEnabled, params);
+            message.sendToPlayer(this, filterMaskEnabled, params, unsigned); // Paper
         }
+
     }
 
     public String getIpAddress() {
-        return this.connection.getRemoteAddress() instanceof InetSocketAddress inetSocketAddress
-            ? InetAddresses.toAddrString(inetSocketAddress.getAddress())
-            : "<unknown>";
+        SocketAddress socketaddress = this.connection.getRemoteAddress();
+
+        if (socketaddress instanceof InetSocketAddress inetsocketaddress) {
+            return InetAddresses.toAddrString(inetsocketaddress.getAddress());
+        } else {
+            return "<unknown>";
+        }
     }
 
     public void updateOptions(ClientInformation clientOptions) {
+        // Paper start - settings event
+        new com.destroystokyo.paper.event.player.PlayerClientOptionsChangeEvent(this.getBukkitEntity(), Util.make(new java.util.IdentityHashMap<>(), map -> {
+            map.put(com.destroystokyo.paper.ClientOption.LOCALE, clientOptions.language());
+            map.put(com.destroystokyo.paper.ClientOption.VIEW_DISTANCE, clientOptions.viewDistance());
+            map.put(com.destroystokyo.paper.ClientOption.CHAT_VISIBILITY, com.destroystokyo.paper.ClientOption.ChatVisibility.valueOf(clientOptions.chatVisibility().name()));
+            map.put(com.destroystokyo.paper.ClientOption.CHAT_COLORS_ENABLED, clientOptions.chatColors());
+            map.put(com.destroystokyo.paper.ClientOption.SKIN_PARTS, new com.destroystokyo.paper.PaperSkinParts(clientOptions.modelCustomisation()));
+            map.put(com.destroystokyo.paper.ClientOption.MAIN_HAND, clientOptions.mainHand() == HumanoidArm.LEFT ? MainHand.LEFT : MainHand.RIGHT);
+            map.put(com.destroystokyo.paper.ClientOption.TEXT_FILTERING_ENABLED, clientOptions.textFilteringEnabled());
+            map.put(com.destroystokyo.paper.ClientOption.ALLOW_SERVER_LISTINGS, clientOptions.allowsListing());
+            map.put(com.destroystokyo.paper.ClientOption.PARTICLE_VISIBILITY, com.destroystokyo.paper.ClientOption.ParticleVisibility.valueOf(clientOptions.particleStatus().name()));
+        })).callEvent();
+        // Paper end - settings event
+        // CraftBukkit start
+        if (this.getMainArm() != clientOptions.mainHand()) {
+            PlayerChangedMainHandEvent event = new PlayerChangedMainHandEvent(this.getBukkitEntity(), this.getMainArm() == HumanoidArm.LEFT ? MainHand.LEFT : MainHand.RIGHT);
+            this.server.server.getPluginManager().callEvent(event);
+        }
+        if (this.language == null || !this.language.equals(clientOptions.language())) { // Paper
+            PlayerLocaleChangeEvent event = new PlayerLocaleChangeEvent(this.getBukkitEntity(), clientOptions.language());
+            this.server.server.getPluginManager().callEvent(event);
+        }
+        // CraftBukkit end
+        // Paper start - don't call options events on login
+        this.updateOptionsNoEvents(clientOptions);
+    }
+    public void updateOptionsNoEvents(ClientInformation clientOptions) {
+        // Paper end
         this.language = clientOptions.language();
+        this.adventure$locale = java.util.Objects.requireNonNullElse(net.kyori.adventure.translation.Translator.parseLocale(this.language), java.util.Locale.US); // Paper
         this.requestedViewDistance = clientOptions.viewDistance();
         this.chatVisibility = clientOptions.chatVisibility();
         this.canChatColor = clientOptions.chatColors();
         this.textFilteringEnabled = clientOptions.textFilteringEnabled();
         this.allowsListing = clientOptions.allowsListing();
         this.particleStatus = clientOptions.particleStatus();
-        this.getEntityData().set(DATA_PLAYER_MODE_CUSTOMISATION, (byte)clientOptions.modelCustomisation());
-        this.getEntityData().set(DATA_PLAYER_MAIN_HAND, (byte)clientOptions.mainHand().getId());
+        this.getEntityData().set(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION, (byte) clientOptions.modelCustomisation());
+        this.getEntityData().set(ServerPlayer.DATA_PLAYER_MAIN_HAND, (byte) clientOptions.mainHand().getId());
     }
 
     public ClientInformation clientInformation() {
-        int i = this.getEntityData().get(DATA_PLAYER_MODE_CUSTOMISATION);
-        HumanoidArm humanoidArm = HumanoidArm.BY_ID.apply(this.getEntityData().get(DATA_PLAYER_MAIN_HAND));
-        return new ClientInformation(
-            this.language,
-            this.requestedViewDistance,
-            this.chatVisibility,
-            this.canChatColor,
-            i,
-            humanoidArm,
-            this.textFilteringEnabled,
-            this.allowsListing,
-            this.particleStatus
-        );
+        byte b0 = (Byte) this.getEntityData().get(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION);
+        HumanoidArm enummainhand = (HumanoidArm) HumanoidArm.BY_ID.apply((Byte) this.getEntityData().get(ServerPlayer.DATA_PLAYER_MAIN_HAND));
+
+        return new ClientInformation(this.language, this.requestedViewDistance, this.chatVisibility, this.canChatColor, b0, enummainhand, this.textFilteringEnabled, this.allowsListing, this.particleStatus);
     }
 
     public boolean canChatInColor() {
@@ -1778,7 +2575,7 @@
     }
 
     private boolean acceptsSystemMessages(boolean overlay) {
-        return this.chatVisibility != ChatVisiblity.HIDDEN || overlay;
+        return this.chatVisibility == ChatVisiblity.HIDDEN ? overlay : true;
     }
 
     private boolean acceptsChatMessages() {
@@ -1818,18 +2615,39 @@
         } else {
             super.updateInvisibilityStatus();
         }
+
     }
 
     public Entity getCamera() {
-        return (Entity)(this.camera == null ? this : this.camera);
+        return (Entity) (this.camera == null ? this : this.camera);
     }
 
     public void setCamera(@Nullable Entity entity) {
-        Entity entity2 = this.getCamera();
-        this.camera = (Entity)(entity == null ? this : entity);
-        if (entity2 != this.camera) {
-            if (this.camera.level() instanceof ServerLevel serverLevel) {
-                this.teleportTo(serverLevel, this.camera.getX(), this.camera.getY(), this.camera.getZ(), Set.of(), this.getYRot(), this.getXRot(), false);
+        Entity entity1 = this.getCamera();
+
+        this.camera = (Entity) (entity == null ? this : entity);
+        if (entity1 != this.camera) {
+            // Paper start - Add PlayerStartSpectatingEntityEvent and PlayerStopSpectatingEntity
+            if (this.camera == this) {
+                com.destroystokyo.paper.event.player.PlayerStopSpectatingEntityEvent playerStopSpectatingEntityEvent = new com.destroystokyo.paper.event.player.PlayerStopSpectatingEntityEvent(this.getBukkitEntity(), entity1.getBukkitEntity());
+                if (!playerStopSpectatingEntityEvent.callEvent()) {
+                    this.camera = entity1; // rollback camera entity again
+                    return;
+                }
+            } else {
+                com.destroystokyo.paper.event.player.PlayerStartSpectatingEntityEvent playerStartSpectatingEntityEvent = new com.destroystokyo.paper.event.player.PlayerStartSpectatingEntityEvent(this.getBukkitEntity(), entity1.getBukkitEntity(), entity.getBukkitEntity());
+                if (!playerStartSpectatingEntityEvent.callEvent()) {
+                    this.camera = entity1; // rollback camera entity again
+                    return;
+                }
+            }
+            // Paper end - Add PlayerStartSpectatingEntityEvent and PlayerStopSpectatingEntity
+            Level world = this.camera.level();
+
+            if (world instanceof ServerLevel) {
+                ServerLevel worldserver = (ServerLevel) world;
+
+                this.teleportTo(worldserver, this.camera.getX(), this.camera.getY(), this.camera.getZ(), Set.of(), this.getYRot(), this.getXRot(), false, TeleportCause.SPECTATE); // CraftBukkit
             }
 
             if (entity != null) {
@@ -1839,6 +2657,7 @@
             this.connection.send(new ClientboundSetCameraPacket(this.camera));
             this.connection.resetPosition();
         }
+
     }
 
     @Override
@@ -1846,6 +2665,7 @@
         if (!this.isChangingDimension) {
             super.processPortalCooldown();
         }
+
     }
 
     @Override
@@ -1855,6 +2675,7 @@
         } else {
             super.attack(target);
         }
+
     }
 
     public long getLastActionTime() {
@@ -1863,11 +2684,11 @@
 
     @Nullable
     public Component getTabListDisplayName() {
-        return null;
+        return this.listName; // CraftBukkit
     }
 
     public int getTabListOrder() {
-        return 0;
+        return this.listOrder; // CraftBukkit
     }
 
     @Override
@@ -1909,11 +2730,44 @@
         this.setRespawnPosition(player.getRespawnDimension(), player.getRespawnPosition(), player.getRespawnAngle(), player.isRespawnForced(), false);
     }
 
+    @Deprecated // Paper - Add PlayerSetSpawnEvent
     public void setRespawnPosition(ResourceKey<Level> dimension, @Nullable BlockPos pos, float angle, boolean forced, boolean sendMessage) {
+        // Paper start - Add PlayerSetSpawnEvent
+        this.setRespawnPosition(dimension, pos, angle, forced, sendMessage, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.UNKNOWN);
+    }
+    @Deprecated
+    public boolean setRespawnPosition(ResourceKey<Level> dimension, @Nullable BlockPos pos, float angle, boolean forced, boolean sendMessage, PlayerSpawnChangeEvent.Cause cause) {
+        return this.setRespawnPosition(dimension, pos, angle, forced, sendMessage, cause == PlayerSpawnChangeEvent.Cause.RESET ?
+            com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLAYER_RESPAWN : com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.valueOf(cause.name()));
+    }
+    public boolean setRespawnPosition(ResourceKey<Level> dimension, @Nullable BlockPos pos, float angle, boolean forced, boolean sendMessage, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause cause) {
+        Location spawnLoc = null;
+        boolean willNotify = false;
         if (pos != null) {
-            boolean bl = pos.equals(this.respawnPosition) && dimension.equals(this.respawnDimension);
-            if (sendMessage && !bl) {
-                this.sendSystemMessage(Component.translatable("block.minecraft.set_spawn"));
+            boolean flag2 = pos.equals(this.respawnPosition) && dimension.equals(this.respawnDimension);
+            spawnLoc = io.papermc.paper.util.MCUtil.toLocation(this.getServer().getLevel(dimension), pos);
+            spawnLoc.setYaw(angle);
+            willNotify = sendMessage && !flag2;
+        }
+
+        PlayerSpawnChangeEvent dumbEvent = new PlayerSpawnChangeEvent(this.getBukkitEntity(), spawnLoc, forced,
+            cause == com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLAYER_RESPAWN ? PlayerSpawnChangeEvent.Cause.RESET : PlayerSpawnChangeEvent.Cause.valueOf(cause.name()));
+        dumbEvent.callEvent();
+
+        com.destroystokyo.paper.event.player.PlayerSetSpawnEvent event = new com.destroystokyo.paper.event.player.PlayerSetSpawnEvent(this.getBukkitEntity(), cause, dumbEvent.getNewSpawn(), dumbEvent.isForced(), willNotify, willNotify ? net.kyori.adventure.text.Component.translatable("block.minecraft.set_spawn") : null);
+        event.setCancelled(dumbEvent.isCancelled());
+        if (!event.callEvent()) {
+            return false;
+        }
+        if (event.getLocation() != null) {
+            dimension = event.getLocation().getWorld() != null ? ((CraftWorld) event.getLocation().getWorld()).getHandle().dimension() : dimension;
+            pos = io.papermc.paper.util.MCUtil.toBlockPosition(event.getLocation());
+            angle = event.getLocation().getYaw();
+            forced = event.isForced();
+            // Paper end - Add PlayerSetSpawnEvent
+
+            if (event.willNotifyPlayer() && event.getNotification() != null) { // Paper - Add PlayerSetSpawnEvent
+                this.sendSystemMessage(PaperAdventure.asVanilla(event.getNotification())); // Paper - Add PlayerSetSpawnEvent
             }
 
             this.respawnPosition = pos;
@@ -1926,6 +2780,8 @@
             this.respawnAngle = 0.0F;
             this.respawnForced = false;
         }
+
+        return true; // Paper - Add PlayerSetSpawnEvent
     }
 
     public SectionPos getLastSectionPos() {
@@ -1946,31 +2802,62 @@
 
     @Override
     public void playNotifySound(SoundEvent sound, SoundSource category, float volume, float pitch) {
-        this.connection
-            .send(
-                new ClientboundSoundPacket(
-                    BuiltInRegistries.SOUND_EVENT.wrapAsHolder(sound), category, this.getX(), this.getY(), this.getZ(), volume, pitch, this.random.nextLong()
-                )
-            );
+        this.connection.send(new ClientboundSoundPacket(BuiltInRegistries.SOUND_EVENT.wrapAsHolder(sound), category, this.getX(), this.getY(), this.getZ(), volume, pitch, this.random.nextLong()));
     }
 
     @Override
-    public ItemEntity drop(ItemStack stack, boolean throwRandomly, boolean retainOwnership) {
-        ItemEntity itemEntity = this.createItemStackToDrop(stack, throwRandomly, retainOwnership);
-        if (itemEntity == null) {
+    public ItemEntity drop(ItemStack itemstack, boolean flag, boolean flag1, boolean callEvent) { // CraftBukkit - SPIGOT-2942: Add boolean to call event
+        ItemEntity entityitem = this.createItemStackToDrop(itemstack, flag, flag1);
+
+        if (entityitem == null) {
             return null;
         } else {
-            this.level().addFreshEntity(itemEntity);
-            ItemStack itemStack = itemEntity.getItem();
-            if (retainOwnership) {
-                if (!itemStack.isEmpty()) {
-                    this.awardStat(Stats.ITEM_DROPPED.get(itemStack.getItem()), stack.getCount());
+            // CraftBukkit start - fire PlayerDropItemEvent
+            if (callEvent) {
+                Player player = (Player) this.getBukkitEntity();
+                org.bukkit.entity.Item drop = (org.bukkit.entity.Item) entityitem.getBukkitEntity();
+
+                PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
+                this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) {
+                    org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
+                    if (flag1 && (cur == null || cur.getAmount() == 0)) {
+                        // The complete stack was dropped
+                        player.getInventory().setItemInHand(drop.getItemStack());
+                    } else if (flag1 && cur.isSimilar(drop.getItemStack()) && cur.getAmount() < cur.getMaxStackSize() && drop.getItemStack().getAmount() == 1) {
+                        // Only one item is dropped
+                        cur.setAmount(cur.getAmount() + 1);
+                        player.getInventory().setItemInHand(cur);
+                    } else {
+                        // Fallback
+                        player.getInventory().addItem(drop.getItemStack());
+                    }
+                    return null;
+                }
+            }
+            // CraftBukkit end
+
+            this.level().addFreshEntity(entityitem);
+            ItemStack itemstack1 = entityitem.getItem();
+
+            if (flag1) {
+                if (!itemstack1.isEmpty()) {
+                    this.awardStat(Stats.ITEM_DROPPED.get(itemstack1.getItem()), itemstack1.getCount()); // Paper - Fix PlayerDropItemEvent using wrong item
                 }
 
                 this.awardStat(Stats.DROP);
             }
 
-            return itemEntity;
+            // Paper start - remove player from map on drop
+            if (itemstack.getItem() == net.minecraft.world.item.Items.FILLED_MAP) {
+                net.minecraft.world.level.saveddata.maps.MapItemSavedData worldmap = net.minecraft.world.item.MapItem.getSavedData(itemstack, this.level());
+                if (worldmap != null) {
+                    worldmap.tickCarriedBy(this, itemstack);
+                    }
+                }
+            // Paper end
+            return entityitem;
         }
     }
 
@@ -1979,33 +2866,39 @@
         if (stack.isEmpty()) {
             return null;
         } else {
-            double d = this.getEyeY() - 0.3F;
-            ItemEntity itemEntity = new ItemEntity(this.level(), this.getX(), d, this.getZ(), stack);
-            itemEntity.setPickUpDelay(40);
+            double d0 = this.getEyeY() - 0.30000001192092896D;
+            // Paper start
+            ItemStack tmp = stack.copy();
+            stack.setCount(0);
+            stack = tmp;
+            // Paper end
+            ItemEntity entityitem = new ItemEntity(this.level(), this.getX(), d0, this.getZ(), stack);
+
+            entityitem.setPickUpDelay(40);
             if (retainOwnership) {
-                itemEntity.setThrower(this);
+                entityitem.setThrower(this);
             }
 
+            float f;
+            float f1;
+
             if (throwRandomly) {
-                float f = this.random.nextFloat() * 0.5F;
-                float g = this.random.nextFloat() * (float) (Math.PI * 2);
-                itemEntity.setDeltaMovement((double)(-Mth.sin(g) * f), 0.2F, (double)(Mth.cos(g) * f));
+                f = this.random.nextFloat() * 0.5F;
+                f1 = this.random.nextFloat() * 6.2831855F;
+                entityitem.setDeltaMovement((double) (-Mth.sin(f1) * f), 0.20000000298023224D, (double) (Mth.cos(f1) * f));
             } else {
-                float h = 0.3F;
-                float i = Mth.sin(this.getXRot() * (float) (Math.PI / 180.0));
-                float j = Mth.cos(this.getXRot() * (float) (Math.PI / 180.0));
-                float k = Mth.sin(this.getYRot() * (float) (Math.PI / 180.0));
-                float l = Mth.cos(this.getYRot() * (float) (Math.PI / 180.0));
-                float m = this.random.nextFloat() * (float) (Math.PI * 2);
-                float n = 0.02F * this.random.nextFloat();
-                itemEntity.setDeltaMovement(
-                    (double)(-k * j * 0.3F) + Math.cos((double)m) * (double)n,
-                    (double)(-i * 0.3F + 0.1F + (this.random.nextFloat() - this.random.nextFloat()) * 0.1F),
-                    (double)(l * j * 0.3F) + Math.sin((double)m) * (double)n
-                );
+                f = 0.3F;
+                f1 = Mth.sin(this.getXRot() * 0.017453292F);
+                float f2 = Mth.cos(this.getXRot() * 0.017453292F);
+                float f3 = Mth.sin(this.getYRot() * 0.017453292F);
+                float f4 = Mth.cos(this.getYRot() * 0.017453292F);
+                float f5 = this.random.nextFloat() * 6.2831855F;
+                float f6 = 0.02F * this.random.nextFloat();
+
+                entityitem.setDeltaMovement((double) (-f3 * f2 * 0.3F) + Math.cos((double) f5) * (double) f6, (double) (-f1 * 0.3F + 0.1F + (this.random.nextFloat() - this.random.nextFloat()) * 0.1F), (double) (f4 * f2 * 0.3F) + Math.sin((double) f5) * (double) f6);
             }
 
-            return itemEntity;
+            return entityitem;
         }
     }
 
@@ -2024,25 +2917,33 @@
     }
 
     private GameType calculateGameModeForNewPlayer(@Nullable GameType backupGameMode) {
-        GameType gameType = this.server.getForcedGameType();
-        if (gameType != null) {
-            return gameType;
-        } else {
-            return backupGameMode != null ? backupGameMode : this.server.getDefaultGameType();
-        }
+        GameType enumgamemode1 = this.server.getForcedGameType();
+
+        return enumgamemode1 != null ? enumgamemode1 : (backupGameMode != null ? backupGameMode : this.server.getDefaultGameType());
     }
 
     public void loadGameTypes(@Nullable CompoundTag nbt) {
-        this.gameMode
-            .setGameModeForPlayer(this.calculateGameModeForNewPlayer(readPlayerMode(nbt, "playerGameType")), readPlayerMode(nbt, "previousPlayerGameType"));
+        // Paper start - Expand PlayerGameModeChangeEvent
+        if (this.server.getForcedGameType() != null && this.server.getForcedGameType() != ServerPlayer.readPlayerMode(nbt, "playerGameType")) {
+            if (new org.bukkit.event.player.PlayerGameModeChangeEvent(this.getBukkitEntity(), org.bukkit.GameMode.getByValue(this.server.getDefaultGameType().getId()), org.bukkit.event.player.PlayerGameModeChangeEvent.Cause.DEFAULT_GAMEMODE, null).callEvent()) {
+                this.gameMode.setGameModeForPlayer(this.server.getForcedGameType(), GameType.DEFAULT_MODE);
+            } else {
+                this.gameMode.setGameModeForPlayer(ServerPlayer.readPlayerMode(nbt,"playerGameType"), ServerPlayer.readPlayerMode(nbt, "previousPlayerGameType"));
+            }
+            return;
+        }
+        // Paper end - Expand PlayerGameModeChangeEvent
+        this.gameMode.setGameModeForPlayer(this.calculateGameModeForNewPlayer(ServerPlayer.readPlayerMode(nbt, "playerGameType")), ServerPlayer.readPlayerMode(nbt, "previousPlayerGameType"));
     }
 
     private void storeGameTypes(CompoundTag nbt) {
         nbt.putInt("playerGameType", this.gameMode.getGameModeForPlayer().getId());
-        GameType gameType = this.gameMode.getPreviousGameModeForPlayer();
-        if (gameType != null) {
-            nbt.putInt("previousPlayerGameType", gameType.getId());
+        GameType enumgamemode = this.gameMode.getPreviousGameModeForPlayer();
+
+        if (enumgamemode != null) {
+            nbt.putInt("previousPlayerGameType", enumgamemode.getId());
         }
+
     }
 
     @Override
@@ -2051,7 +2952,7 @@
     }
 
     public boolean shouldFilterMessageTo(ServerPlayer player) {
-        return player != this && (this.textFilteringEnabled || player.textFilteringEnabled);
+        return player == this ? false : this.textFilteringEnabled || player.textFilteringEnabled;
     }
 
     @Override
@@ -2066,10 +2967,13 @@
     }
 
     public boolean drop(boolean entireStack) {
-        Inventory inventory = this.getInventory();
-        ItemStack itemStack = inventory.removeFromSelected(entireStack);
-        this.containerMenu.findSlot(inventory, inventory.selected).ifPresent(index -> this.containerMenu.setRemoteSlot(index, inventory.getSelected()));
-        return this.drop(itemStack, false, true) != null;
+        Inventory playerinventory = this.getInventory();
+        ItemStack itemstack = playerinventory.removeFromSelected(entireStack);
+
+        this.containerMenu.findSlot(playerinventory, playerinventory.selected).ifPresent((i) -> {
+            this.containerMenu.setRemoteSlot(i, playerinventory.getSelected());
+        });
+        return this.drop(itemstack, false, true) != null;
     }
 
     @Override
@@ -2077,6 +2981,7 @@
         if (!this.getInventory().add(stack)) {
             this.drop(stack, false);
         }
+
     }
 
     public boolean allowsListing() {
@@ -2096,9 +3001,11 @@
     public void onItemPickup(ItemEntity item) {
         super.onItemPickup(item);
         Entity entity = item.getOwner();
+
         if (entity != null) {
             CriteriaTriggers.THROWN_ITEM_PICKED_UP_BY_PLAYER.trigger(this, item.getItem(), entity);
         }
+
     }
 
     public void setChatSession(RemoteChatSession session) {
@@ -2112,7 +3019,7 @@
 
     @Override
     public void indicateDamage(double deltaX, double deltaZ) {
-        this.hurtDir = (float)(Mth.atan2(deltaZ, deltaX) * 180.0F / (float)Math.PI - (double)this.getYRot());
+        this.hurtDir = (float) (Mth.atan2(deltaZ, deltaX) * 57.2957763671875D - (double) this.getYRot());
         this.connection.send(new ClientboundHurtAnimationPacket(this));
     }
 
@@ -2121,8 +3028,10 @@
         if (super.startRiding(entity, force)) {
             entity.positionRider(this);
             this.connection.teleport(new PositionMoveRotation(this.position(), Vec3.ZERO, 0.0F, 0.0F), Relative.ROTATION);
-            if (entity instanceof LivingEntity livingEntity) {
-                this.server.getPlayerList().sendActiveEffects(livingEntity, this.connection);
+            if (entity instanceof LivingEntity) {
+                LivingEntity entityliving = (LivingEntity) entity;
+
+                this.server.getPlayerList().sendActiveEffects(entityliving, this.connection);
             }
 
             return true;
@@ -2133,28 +3042,29 @@
 
     @Override
     public void stopRiding() {
+        // Paper start - Force entity dismount during teleportation
+        this.stopRiding(false);
+    }
+    @Override
+    public void stopRiding(boolean suppressCancellation) {
+        // Paper end - Force entity dismount during teleportation
         Entity entity = this.getVehicle();
-        super.stopRiding();
-        if (entity instanceof LivingEntity livingEntity) {
-            for (MobEffectInstance mobEffectInstance : livingEntity.getActiveEffects()) {
-                this.connection.send(new ClientboundRemoveMobEffectPacket(entity.getId(), mobEffectInstance.getEffect()));
+
+        super.stopRiding(suppressCancellation); // Paper - Force entity dismount during teleportation
+        if (entity instanceof LivingEntity entityliving) {
+            Iterator iterator = entityliving.getActiveEffects().iterator();
+
+            while (iterator.hasNext()) {
+                MobEffectInstance mobeffect = (MobEffectInstance) iterator.next();
+
+                this.connection.send(new ClientboundRemoveMobEffectPacket(entity.getId(), mobeffect.getEffect()));
             }
         }
+
     }
 
     public CommonPlayerSpawnInfo createCommonSpawnInfo(ServerLevel world) {
-        return new CommonPlayerSpawnInfo(
-            world.dimensionTypeRegistration(),
-            world.dimension(),
-            BiomeManager.obfuscateSeed(world.getSeed()),
-            this.gameMode.getGameModeForPlayer(),
-            this.gameMode.getPreviousGameModeForPlayer(),
-            world.isDebug(),
-            world.isFlat(),
-            this.getLastDeathLocation(),
-            this.getPortalCooldown(),
-            world.getSeaLevel()
-        );
+        return new CommonPlayerSpawnInfo(world.dimensionTypeRegistration(), world.dimension(), BiomeManager.obfuscateSeed(world.getSeed()), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), world.isDebug(), world.isFlat(), this.getLastDeathLocation(), this.getPortalCooldown(), world.getSeaLevel());
     }
 
     public void setRaidOmenPosition(BlockPos startRaidPos) {
@@ -2173,6 +3083,7 @@
     @Override
     public Vec3 getKnownMovement() {
         Entity entity = this.getVehicle();
+
         return entity != null && entity.getControllingPassenger() != this ? entity.getKnownMovement() : this.lastKnownClientMovement;
     }
 
@@ -2201,8 +3112,9 @@
 
     public Vec3 getLastClientMoveIntent() {
         float f = this.lastClientInput.left() == this.lastClientInput.right() ? 0.0F : (this.lastClientInput.left() ? 1.0F : -1.0F);
-        float g = this.lastClientInput.forward() == this.lastClientInput.backward() ? 0.0F : (this.lastClientInput.forward() ? 1.0F : -1.0F);
-        return getInputVector(new Vec3((double)f, 0.0, (double)g), 1.0F, this.getYRot());
+        float f1 = this.lastClientInput.forward() == this.lastClientInput.backward() ? 0.0F : (this.lastClientInput.forward() ? 1.0F : -1.0F);
+
+        return getInputVector(new Vec3((double) f, 0.0D, (double) f1), 1.0F, this.getYRot());
     }
 
     public void registerEnderPearl(ThrownEnderpearl enderPearl) {
@@ -2218,29 +3130,179 @@
     }
 
     public long registerAndUpdateEnderPearlTicket(ThrownEnderpearl enderPearl) {
-        if (enderPearl.level() instanceof ServerLevel serverLevel) {
-            ChunkPos chunkPos = enderPearl.chunkPosition();
+        Level world = enderPearl.level();
+
+        if (world instanceof ServerLevel worldserver) {
+            ChunkPos chunkcoordintpair = enderPearl.chunkPosition();
+
             this.registerEnderPearl(enderPearl);
-            serverLevel.resetEmptyTime();
-            return placeEnderPearlTicket(serverLevel, chunkPos) - 1L;
+            worldserver.resetEmptyTime();
+            return ServerPlayer.placeEnderPearlTicket(worldserver, chunkcoordintpair) - 1L;
         } else {
             return 0L;
         }
     }
 
     public static long placeEnderPearlTicket(ServerLevel world, ChunkPos chunkPos) {
-        world.getChunkSource().addRegionTicket(TicketType.ENDER_PEARL, chunkPos, 2, chunkPos);
+        if (!world.paperConfig().misc.legacyEnderPearlBehavior) world.getChunkSource().addRegionTicket(TicketType.ENDER_PEARL, chunkPos, 2, chunkPos); // Paper - Allow using old ender pearl behavior
         return TicketType.ENDER_PEARL.timeout();
     }
 
-    public static record RespawnPosAngle(Vec3 position, float yaw) {
-        public static ServerPlayer.RespawnPosAngle of(Vec3 respawnPos, BlockPos currentPos) {
-            return new ServerPlayer.RespawnPosAngle(respawnPos, calculateLookAtYaw(respawnPos, currentPos));
+    // CraftBukkit start
+    public static record RespawnPosAngle(Vec3 position, float yaw, boolean isBedSpawn, boolean isAnchorSpawn) {
+
+        public static ServerPlayer.RespawnPosAngle of(Vec3 vec3d, BlockPos blockposition, boolean isBedSpawn, boolean isAnchorSpawn) {
+            return new ServerPlayer.RespawnPosAngle(vec3d, calculateLookAtYaw(vec3d, blockposition), isBedSpawn, isAnchorSpawn);
+            // CraftBukkit end
         }
 
         private static float calculateLookAtYaw(Vec3 respawnPos, BlockPos currentPos) {
-            Vec3 vec3 = Vec3.atBottomCenterOf(currentPos).subtract(respawnPos).normalize();
-            return (float)Mth.wrapDegrees(Mth.atan2(vec3.z, vec3.x) * 180.0F / (float)Math.PI - 90.0);
+            Vec3 vec3d1 = Vec3.atBottomCenterOf(currentPos).subtract(respawnPos).normalize();
+
+            return (float) Mth.wrapDegrees(Mth.atan2(vec3d1.z, vec3d1.x) * 57.2957763671875D - 90.0D);
+        }
+    }
+
+    // CraftBukkit start - Add per-player time and weather.
+    public long timeOffset = 0;
+    public boolean relativeTime = true;
+
+    public long getPlayerTime() {
+        if (this.relativeTime) {
+            // Adds timeOffset to the current server time.
+            return this.level().getDayTime() + this.timeOffset;
+        } else {
+            // Adds timeOffset to the beginning of this day.
+            return this.level().getDayTime() - (this.level().getDayTime() % 24000) + this.timeOffset;
         }
     }
+
+    public WeatherType weather = null;
+
+    public WeatherType getPlayerWeather() {
+        return this.weather;
+    }
+
+    public void setPlayerWeather(WeatherType type, boolean plugin) {
+        if (!plugin && this.weather != null) {
+            return;
+        }
+
+        if (plugin) {
+            this.weather = type;
+        }
+
+        if (type == WeatherType.DOWNFALL) {
+            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.STOP_RAINING, 0));
+        } else {
+            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0));
+        }
+    }
+
+    private float pluginRainPosition;
+    private float pluginRainPositionPrevious;
+
+    public void updateWeather(float oldRain, float newRain, float oldThunder, float newThunder) {
+        if (this.weather == null) {
+            // Vanilla
+            if (oldRain != newRain) {
+                this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, newRain));
+            }
+        } else {
+            // Plugin
+            if (this.pluginRainPositionPrevious != this.pluginRainPosition) {
+                this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, this.pluginRainPosition));
+            }
+        }
+
+        if (oldThunder != newThunder) {
+            if (this.weather == WeatherType.DOWNFALL || this.weather == null) {
+                this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, newThunder));
+            } else {
+                this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, 0));
+            }
+        }
+    }
+
+    public void tickWeather() {
+        if (this.weather == null) return;
+
+        this.pluginRainPositionPrevious = this.pluginRainPosition;
+        if (this.weather == WeatherType.DOWNFALL) {
+            this.pluginRainPosition += 0.01;
+        } else {
+            this.pluginRainPosition -= 0.01;
+        }
+
+        this.pluginRainPosition = Mth.clamp(this.pluginRainPosition, 0.0F, 1.0F);
+    }
+
+    public void resetPlayerWeather() {
+        this.weather = null;
+        this.setPlayerWeather(this.level().getLevelData().isRaining() ? WeatherType.DOWNFALL : WeatherType.CLEAR, false);
+    }
+
+    @Override
+    public String toString() {
+        return super.toString() + "(" + this.getScoreboardName() + " at " + this.getX() + "," + this.getY() + "," + this.getZ() + ")";
+    }
+
+    // SPIGOT-1903, MC-98153
+    public void forceSetPositionRotation(double x, double y, double z, float yaw, float pitch) {
+        this.moveTo(x, y, z, yaw, pitch);
+        this.connection.resetPosition();
+    }
+
+    @Override
+    public boolean isImmobile() {
+        return super.isImmobile() || (this.connection != null && this.connection.isDisconnected()); // Paper - Fix duplication bugs
+    }
+
+    @Override
+    public Scoreboard getScoreboard() {
+        return this.getBukkitEntity().getScoreboard().getHandle();
+    }
+
+    public void reset() {
+        float exp = 0;
+
+        if (this.keepLevel) { // CraftBukkit - SPIGOT-6687: Only use keepLevel (was pre-set with RULE_KEEPINVENTORY value in PlayerDeathEvent)
+            exp = this.experienceProgress;
+            this.newTotalExp = this.totalExperience;
+            this.newLevel = this.experienceLevel;
+        }
+
+        this.setHealth(this.getMaxHealth());
+        this.stopUsingItem(); // CraftBukkit - SPIGOT-6682: Clear active item on reset
+        this.setAirSupply(this.getMaxAirSupply()); // Paper - Reset players airTicks on respawn
+        this.setRemainingFireTicks(0);
+        this.fallDistance = 0;
+        this.foodData = new FoodData();
+        this.experienceLevel = this.newLevel;
+        this.totalExperience = this.newTotalExp;
+        this.experienceProgress = 0;
+        this.deathTime = 0;
+        this.setArrowCount(0, true); // CraftBukkit - ArrowBodyCountChangeEvent
+        this.removeAllEffects(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.DEATH);
+        this.effectsDirty = true;
+        this.containerMenu = this.inventoryMenu;
+        this.lastHurtByPlayer = null;
+        this.lastHurtByMob = null;
+        this.combatTracker = new CombatTracker(this);
+        this.lastSentExp = -1;
+        if (this.keepLevel) { // CraftBukkit - SPIGOT-6687: Only use keepLevel (was pre-set with RULE_KEEPINVENTORY value in PlayerDeathEvent)
+            this.experienceProgress = exp;
+        } else {
+            this.giveExperiencePoints(this.newExp);
+        }
+        this.keepLevel = false;
+        this.setDeltaMovement(0, 0, 0); // CraftBukkit - SPIGOT-6948: Reset velocity on death
+        this.skipDropExperience = false; // CraftBukkit - SPIGOT-7462: Reset experience drop skip, so that further deaths drop xp
+    }
+
+    @Override
+    public CraftPlayer getBukkitEntity() {
+        return (CraftPlayer) super.getBukkitEntity();
+    }
+    // CraftBukkit end
 }
