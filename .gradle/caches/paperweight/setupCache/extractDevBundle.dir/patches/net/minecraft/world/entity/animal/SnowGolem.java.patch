--- a/net/minecraft/world/entity/animal/SnowGolem.java
+++ b/net/minecraft/world/entity/animal/SnowGolem.java
@@ -2,6 +2,7 @@
 
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Holder;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
@@ -15,6 +16,7 @@
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
@@ -40,8 +42,12 @@
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
 
 public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackMob {
+
     private static final EntityDataAccessor<Byte> DATA_PUMPKIN_ID = SynchedEntityData.defineId(SnowGolem.class, EntityDataSerializers.BYTE);
     private static final byte PUMPKIN_FLAG = 16;
 
@@ -51,21 +57,23 @@
 
     @Override
     protected void registerGoals() {
-        this.goalSelector.addGoal(1, new RangedAttackGoal(this, 1.25, 20, 10.0F));
-        this.goalSelector.addGoal(2, new WaterAvoidingRandomStrollGoal(this, 1.0, 1.0000001E-5F));
+        this.goalSelector.addGoal(1, new RangedAttackGoal(this, 1.25D, 20, 10.0F));
+        this.goalSelector.addGoal(2, new WaterAvoidingRandomStrollGoal(this, 1.0D, 1.0000001E-5F));
         this.goalSelector.addGoal(3, new LookAtPlayerGoal(this, Player.class, 6.0F));
         this.goalSelector.addGoal(4, new RandomLookAroundGoal(this));
-        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Mob.class, 10, true, false, (entity, serverLevel) -> entity instanceof Enemy));
+        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Mob.class, 10, true, false, (entityliving, worldserver) -> {
+            return entityliving instanceof Enemy;
+        }));
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 4.0).add(Attributes.MOVEMENT_SPEED, 0.2F);
+        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 4.0D).add(Attributes.MOVEMENT_SPEED, 0.20000000298023224D);
     }
 
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         super.defineSynchedData(builder);
-        builder.define(DATA_PUMPKIN_ID, (byte)16);
+        builder.define(SnowGolem.DATA_PUMPKIN_ID, (byte) 16);
     }
 
     @Override
@@ -80,6 +88,7 @@
         if (nbt.contains("Pumpkin")) {
             this.setPumpkin(nbt.getBoolean("Pumpkin"));
         }
+
     }
 
     @Override
@@ -90,41 +99,52 @@
     @Override
     public void aiStep() {
         super.aiStep();
-        if (this.level() instanceof ServerLevel serverLevel) {
+        Level world = this.level();
+
+        if (world instanceof ServerLevel worldserver) {
             if (this.level().getBiome(this.blockPosition()).is(BiomeTags.SNOW_GOLEM_MELTS)) {
-                this.hurtServer(serverLevel, this.damageSources().onFire(), 1.0F);
+                this.hurtServer(worldserver, this.damageSources().melting(), 1.0F); // CraftBukkit - DamageSources.ON_FIRE -> CraftEventFactory.MELTING
             }
 
-            if (!serverLevel.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+            if (!worldserver.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
                 return;
             }
 
-            BlockState blockState = Blocks.SNOW.defaultBlockState();
+            BlockState iblockdata = Blocks.SNOW.defaultBlockState();
 
-            for (int i = 0; i < 4; i++) {
-                int j = Mth.floor(this.getX() + (double)((float)(i % 2 * 2 - 1) * 0.25F));
+            for (int i = 0; i < 4; ++i) {
+                int j = Mth.floor(this.getX() + (double) ((float) (i % 2 * 2 - 1) * 0.25F));
                 int k = Mth.floor(this.getY());
-                int l = Mth.floor(this.getZ() + (double)((float)(i / 2 % 2 * 2 - 1) * 0.25F));
-                BlockPos blockPos = new BlockPos(j, k, l);
-                if (this.level().getBlockState(blockPos).isAir() && blockState.canSurvive(this.level(), blockPos)) {
-                    this.level().setBlockAndUpdate(blockPos, blockState);
-                    this.level().gameEvent(GameEvent.BLOCK_PLACE, blockPos, GameEvent.Context.of(this, blockState));
+                int l = Mth.floor(this.getZ() + (double) ((float) (i / 2 % 2 * 2 - 1) * 0.25F));
+                BlockPos blockposition = new BlockPos(j, k, l);
+
+                if (this.level().getBlockState(blockposition).isAir() && iblockdata.canSurvive(this.level(), blockposition)) {
+                    // CraftBukkit start
+                    if (!CraftEventFactory.handleBlockFormEvent(this.level(), blockposition, iblockdata, this)) {
+                        continue;
+                    }
+                    // CraftBukkit end
+                    this.level().gameEvent((Holder) GameEvent.BLOCK_PLACE, blockposition, GameEvent.Context.of(this, iblockdata));
                 }
             }
         }
+
     }
 
     @Override
     public void performRangedAttack(LivingEntity target, float pullProgress) {
-        double d = target.getX() - this.getX();
-        double e = target.getEyeY() - 1.1F;
-        double f = target.getZ() - this.getZ();
-        double g = Math.sqrt(d * d + f * f) * 0.2F;
-        if (this.level() instanceof ServerLevel serverLevel) {
-            ItemStack itemStack = new ItemStack(Items.SNOWBALL);
-            Projectile.spawnProjectile(
-                new Snowball(serverLevel, this, itemStack), serverLevel, itemStack, entity -> entity.shoot(d, e + g - entity.getY(), f, 1.6F, 12.0F)
-            );
+        double d0 = target.getX() - this.getX();
+        double d1 = target.getEyeY() - 1.100000023841858D;
+        double d2 = target.getZ() - this.getZ();
+        double d3 = Math.sqrt(d0 * d0 + d2 * d2) * 0.20000000298023224D;
+        Level world = this.level();
+
+        if (world instanceof ServerLevel worldserver) {
+            ItemStack itemstack = new ItemStack(Items.SNOWBALL);
+
+            Projectile.spawnProjectile(new Snowball(worldserver, this, itemstack), worldserver, itemstack, (entitysnowball) -> {
+                entitysnowball.shoot(d0, d1 + d3 - entitysnowball.getY(), d2, 1.6F, 12.0F);
+            });
         }
 
         this.playSound(SoundEvents.SNOW_GOLEM_SHOOT, 1.0F, 0.4F / (this.getRandom().nextFloat() * 0.4F + 0.8F));
@@ -132,12 +152,29 @@
 
     @Override
     protected InteractionResult mobInteract(Player player, InteractionHand hand) {
-        ItemStack itemStack = player.getItemInHand(hand);
-        if (itemStack.is(Items.SHEARS) && this.readyForShearing()) {
-            if (this.level() instanceof ServerLevel serverLevel) {
-                this.shear(serverLevel, SoundSource.PLAYERS, itemStack);
+        ItemStack itemstack = player.getItemInHand(hand);
+
+        if (itemstack.is(Items.SHEARS) && this.readyForShearing()) {
+            Level world = this.level();
+
+            if (world instanceof ServerLevel) {
+                ServerLevel worldserver = (ServerLevel) world;
+
+                // CraftBukkit start
+                // Paper start - custom shear drops
+                java.util.List<ItemStack> drops = this.generateDefaultDrops(worldserver, itemstack);
+                org.bukkit.event.player.PlayerShearEntityEvent event = CraftEventFactory.handlePlayerShearEntityEvent(player, this, itemstack, hand, drops);
+                if (event != null) {
+                    if (event.isCancelled()) {
+                        return InteractionResult.PASS;
+                    }
+                    drops = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getDrops());
+                // Paper end - custom shear drops
+                }
+                // CraftBukkit end
+                this.shear(worldserver, SoundSource.PLAYERS, itemstack, drops); // Paper - custom shear drops
                 this.gameEvent(GameEvent.SHEAR, player);
-                itemStack.hurtAndBreak(1, player, getSlotForHand(hand));
+                itemstack.hurtAndBreak(1, player, getSlotForHand(hand));
             }
 
             return InteractionResult.SUCCESS;
@@ -148,11 +185,30 @@
 
     @Override
     public void shear(ServerLevel world, SoundSource shearedSoundCategory, ItemStack shears) {
-        world.playSound(null, this, SoundEvents.SNOW_GOLEM_SHEAR, shearedSoundCategory, 1.0F, 1.0F);
+    // Paper start - custom shear drops
+        this.shear(world, shearedSoundCategory, shears, this.generateDefaultDrops(world, shears));
+    }
+
+    @Override
+    public java.util.List<ItemStack> generateDefaultDrops(final ServerLevel serverLevel, final ItemStack shears) {
+        final java.util.List<ItemStack> drops = new it.unimi.dsi.fastutil.objects.ObjectArrayList<>();
+        this.dropFromShearingLootTable(serverLevel, BuiltInLootTables.SHEAR_SNOW_GOLEM, shears, (ignored, stack) -> {
+            drops.add(stack);
+        });
+        return drops;
+    }
+
+    @Override
+    public void shear(ServerLevel world, SoundSource shearedSoundCategory, ItemStack shears, java.util.List<ItemStack> drops) {
+        final ServerLevel worldserver1 = world; // Named for lambda consumption
+    // Paper end - custom shear drops
+        world.playSound((Player) null, (Entity) this, SoundEvents.SNOW_GOLEM_SHEAR, shearedSoundCategory, 1.0F, 1.0F);
         this.setPumpkin(false);
-        this.dropFromShearingLootTable(
-            world, BuiltInLootTables.SHEAR_SNOW_GOLEM, shears, (serverLevel, itemStack) -> this.spawnAtLocation(serverLevel, itemStack, this.getEyeHeight())
-        );
+        drops.forEach(itemstack1 -> { // Paper - custom shear drops
+            this.forceDrops = true; // CraftBukkit
+            this.spawnAtLocation(worldserver1, itemstack1, this.getEyeHeight());
+            this.forceDrops = false; // CraftBukkit
+        });
     }
 
     @Override
@@ -161,16 +217,18 @@
     }
 
     public boolean hasPumpkin() {
-        return (this.entityData.get(DATA_PUMPKIN_ID) & 16) != 0;
+        return ((Byte) this.entityData.get(SnowGolem.DATA_PUMPKIN_ID) & 16) != 0;
     }
 
     public void setPumpkin(boolean hasPumpkin) {
-        byte b = this.entityData.get(DATA_PUMPKIN_ID);
+        byte b0 = (Byte) this.entityData.get(SnowGolem.DATA_PUMPKIN_ID);
+
         if (hasPumpkin) {
-            this.entityData.set(DATA_PUMPKIN_ID, (byte)(b | 16));
+            this.entityData.set(SnowGolem.DATA_PUMPKIN_ID, (byte) (b0 | 16));
         } else {
-            this.entityData.set(DATA_PUMPKIN_ID, (byte)(b & -17));
+            this.entityData.set(SnowGolem.DATA_PUMPKIN_ID, (byte) (b0 & -17));
         }
+
     }
 
     @Nullable
@@ -193,6 +251,6 @@
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0, (double)(0.75F * this.getEyeHeight()), (double)(this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, (double) (0.75F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
     }
 }
