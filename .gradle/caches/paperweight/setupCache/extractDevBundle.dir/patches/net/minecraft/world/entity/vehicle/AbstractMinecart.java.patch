--- a/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -3,6 +3,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
+import com.google.common.collect.UnmodifiableIterator;
 import com.mojang.datafixers.util.Pair;
 import java.util.Map;
 import javax.annotation.Nullable;
@@ -41,48 +42,68 @@
 import net.minecraft.world.level.block.state.properties.RailShape;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
+import org.bukkit.util.Vector;
+// CraftBukkit end
 
 public abstract class AbstractMinecart extends VehicleEntity {
-    private static final Vec3 LOWERED_PASSENGER_ATTACHMENT = new Vec3(0.0, 0.0, 0.0);
+
+    private static final Vec3 LOWERED_PASSENGER_ATTACHMENT = new Vec3(0.0D, 0.0D, 0.0D);
     private static final EntityDataAccessor<Integer> DATA_ID_DISPLAY_BLOCK = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Integer> DATA_ID_DISPLAY_OFFSET = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_ID_CUSTOM_DISPLAY = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.BOOLEAN);
-    private static final ImmutableMap<Pose, ImmutableList<Integer>> POSE_DISMOUNT_HEIGHTS = ImmutableMap.of(
-        Pose.STANDING, ImmutableList.of(0, 1, -1), Pose.CROUCHING, ImmutableList.of(0, 1, -1), Pose.SWIMMING, ImmutableList.of(0, 1)
-    );
+    private static final ImmutableMap<Pose, ImmutableList<Integer>> POSE_DISMOUNT_HEIGHTS = ImmutableMap.of(Pose.STANDING, ImmutableList.of(0, 1, -1), Pose.CROUCHING, ImmutableList.of(0, 1, -1), Pose.SWIMMING, ImmutableList.of(0, 1));
     protected static final float WATER_SLOWDOWN_FACTOR = 0.95F;
     private boolean onRails;
     private boolean flipped;
     private final MinecartBehavior behavior;
-    private static final Map<RailShape, Pair<Vec3i, Vec3i>> EXITS = Util.make(Maps.newEnumMap(RailShape.class), map -> {
-        Vec3i vec3i = Direction.WEST.getUnitVec3i();
-        Vec3i vec3i2 = Direction.EAST.getUnitVec3i();
-        Vec3i vec3i3 = Direction.NORTH.getUnitVec3i();
-        Vec3i vec3i4 = Direction.SOUTH.getUnitVec3i();
-        Vec3i vec3i5 = vec3i.below();
-        Vec3i vec3i6 = vec3i2.below();
-        Vec3i vec3i7 = vec3i3.below();
-        Vec3i vec3i8 = vec3i4.below();
-        map.put(RailShape.NORTH_SOUTH, Pair.of(vec3i3, vec3i4));
-        map.put(RailShape.EAST_WEST, Pair.of(vec3i, vec3i2));
-        map.put(RailShape.ASCENDING_EAST, Pair.of(vec3i5, vec3i2));
-        map.put(RailShape.ASCENDING_WEST, Pair.of(vec3i, vec3i6));
-        map.put(RailShape.ASCENDING_NORTH, Pair.of(vec3i3, vec3i8));
-        map.put(RailShape.ASCENDING_SOUTH, Pair.of(vec3i7, vec3i4));
-        map.put(RailShape.SOUTH_EAST, Pair.of(vec3i4, vec3i2));
-        map.put(RailShape.SOUTH_WEST, Pair.of(vec3i4, vec3i));
-        map.put(RailShape.NORTH_WEST, Pair.of(vec3i3, vec3i));
-        map.put(RailShape.NORTH_EAST, Pair.of(vec3i3, vec3i2));
+    private static final Map<RailShape, Pair<Vec3i, Vec3i>> EXITS = (Map) Util.make(Maps.newEnumMap(RailShape.class), (enummap) -> {
+        Vec3i baseblockposition = Direction.WEST.getUnitVec3i();
+        Vec3i baseblockposition1 = Direction.EAST.getUnitVec3i();
+        Vec3i baseblockposition2 = Direction.NORTH.getUnitVec3i();
+        Vec3i baseblockposition3 = Direction.SOUTH.getUnitVec3i();
+        Vec3i baseblockposition4 = baseblockposition.below();
+        Vec3i baseblockposition5 = baseblockposition1.below();
+        Vec3i baseblockposition6 = baseblockposition2.below();
+        Vec3i baseblockposition7 = baseblockposition3.below();
+
+        enummap.put(RailShape.NORTH_SOUTH, Pair.of(baseblockposition2, baseblockposition3));
+        enummap.put(RailShape.EAST_WEST, Pair.of(baseblockposition, baseblockposition1));
+        enummap.put(RailShape.ASCENDING_EAST, Pair.of(baseblockposition4, baseblockposition1));
+        enummap.put(RailShape.ASCENDING_WEST, Pair.of(baseblockposition, baseblockposition5));
+        enummap.put(RailShape.ASCENDING_NORTH, Pair.of(baseblockposition2, baseblockposition7));
+        enummap.put(RailShape.ASCENDING_SOUTH, Pair.of(baseblockposition6, baseblockposition3));
+        enummap.put(RailShape.SOUTH_EAST, Pair.of(baseblockposition3, baseblockposition1));
+        enummap.put(RailShape.SOUTH_WEST, Pair.of(baseblockposition3, baseblockposition));
+        enummap.put(RailShape.NORTH_WEST, Pair.of(baseblockposition2, baseblockposition));
+        enummap.put(RailShape.NORTH_EAST, Pair.of(baseblockposition2, baseblockposition1));
     });
 
+    // CraftBukkit start
+    public boolean slowWhenEmpty = true;
+    private double derailedX = 0.5;
+    private double derailedY = 0.5;
+    private double derailedZ = 0.5;
+    private double flyingX = 0.95;
+    private double flyingY = 0.95;
+    private double flyingZ = 0.95;
+    public Double maxSpeed;
+    // CraftBukkit end
+    public net.kyori.adventure.util.TriState frictionState = net.kyori.adventure.util.TriState.NOT_SET; // Paper - Friction API
+
     protected AbstractMinecart(EntityType<?> type, Level world) {
         super(type, world);
         this.blocksBuilding = true;
-        if (useExperimentalMovement(world)) {
+        if (AbstractMinecart.useExperimentalMovement(world)) {
             this.behavior = new NewMinecartBehavior(this);
         } else {
             this.behavior = new OldMinecartBehavior(this);
         }
+
     }
 
     protected AbstractMinecart(EntityType<?> type, Level world, double x, double y, double z) {
@@ -98,21 +119,24 @@
     }
 
     @Nullable
-    public static <T extends AbstractMinecart> T createMinecart(
-        Level world, double x, double y, double z, EntityType<T> type, EntitySpawnReason reason, ItemStack stack, @Nullable Player player
-    ) {
-        T abstractMinecart = (T)type.create(world, reason);
-        if (abstractMinecart != null) {
-            abstractMinecart.setInitialPos(x, y, z);
-            EntityType.createDefaultStackConfig(world, stack, player).accept(abstractMinecart);
-            if (abstractMinecart.getBehavior() instanceof NewMinecartBehavior newMinecartBehavior) {
-                BlockPos blockPos = abstractMinecart.getCurrentBlockPosOrRailBelow();
-                BlockState blockState = world.getBlockState(blockPos);
-                newMinecartBehavior.adjustToRails(blockPos, blockState, true);
+    public static <T extends AbstractMinecart> T createMinecart(Level world, double x, double y, double z, EntityType<T> type, EntitySpawnReason reason, ItemStack stack, @Nullable Player player) {
+        T t0 = (T) type.create(world, reason); // CraftBukkit - decompile error
+
+        if (t0 != null) {
+            t0.setInitialPos(x, y, z);
+            EntityType.createDefaultStackConfig(world, stack, player).accept(t0);
+            MinecartBehavior minecartbehavior = t0.getBehavior();
+
+            if (minecartbehavior instanceof NewMinecartBehavior) {
+                NewMinecartBehavior newminecartbehavior = (NewMinecartBehavior) minecartbehavior;
+                BlockPos blockposition = t0.getCurrentBlockPosOrRailBelow();
+                BlockState iblockdata = world.getBlockState(blockposition);
+
+                newminecartbehavior.adjustToRails(blockposition, iblockdata, true);
             }
         }
 
-        return abstractMinecart;
+        return t0;
     }
 
     public MinecartBehavior getBehavior() {
@@ -127,18 +151,26 @@
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         super.defineSynchedData(builder);
-        builder.define(DATA_ID_DISPLAY_BLOCK, Block.getId(Blocks.AIR.defaultBlockState()));
-        builder.define(DATA_ID_DISPLAY_OFFSET, 6);
-        builder.define(DATA_ID_CUSTOM_DISPLAY, false);
+        builder.define(AbstractMinecart.DATA_ID_DISPLAY_BLOCK, Block.getId(Blocks.AIR.defaultBlockState()));
+        builder.define(AbstractMinecart.DATA_ID_DISPLAY_OFFSET, 6);
+        builder.define(AbstractMinecart.DATA_ID_CUSTOM_DISPLAY, false);
     }
 
     @Override
     public boolean canCollideWith(Entity other) {
-        return AbstractBoat.canVehicleCollide(this, other);
+        // Paper start - fix VehicleEntityCollisionEvent not called when colliding with player
+        boolean collides = AbstractBoat.canVehicleCollide(this, other);
+        if (!collides) {
+            return false;
+        }
+        org.bukkit.event.vehicle.VehicleEntityCollisionEvent collisionEvent = new org.bukkit.event.vehicle.VehicleEntityCollisionEvent((org.bukkit.entity.Vehicle) getBukkitEntity(), other.getBukkitEntity());
+
+        return collisionEvent.callEvent();
+        // Paper end - fix VehicleEntityCollisionEvent not called when colliding with player
     }
 
     @Override
-    public boolean isPushable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Paper - Climbing should not bypass cramming gamerule
         return true;
     }
 
@@ -149,54 +181,71 @@
 
     @Override
     protected Vec3 getPassengerAttachmentPoint(Entity passenger, EntityDimensions dimensions, float scaleFactor) {
-        boolean bl = passenger instanceof Villager || passenger instanceof WanderingTrader;
-        return bl ? LOWERED_PASSENGER_ATTACHMENT : super.getPassengerAttachmentPoint(passenger, dimensions, scaleFactor);
+        boolean flag = passenger instanceof Villager || passenger instanceof WanderingTrader;
+
+        return flag ? AbstractMinecart.LOWERED_PASSENGER_ATTACHMENT : super.getPassengerAttachmentPoint(passenger, dimensions, scaleFactor);
     }
 
     @Override
     public Vec3 getDismountLocationForPassenger(LivingEntity passenger) {
-        Direction direction = this.getMotionDirection();
-        if (direction.getAxis() == Direction.Axis.Y) {
+        Direction enumdirection = this.getMotionDirection();
+
+        if (enumdirection.getAxis() == Direction.Axis.Y) {
             return super.getDismountLocationForPassenger(passenger);
         } else {
-            int[][] is = DismountHelper.offsetsForDirection(direction);
-            BlockPos blockPos = this.blockPosition();
-            BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
-            ImmutableList<Pose> immutableList = passenger.getDismountPoses();
+            int[][] aint = DismountHelper.offsetsForDirection(enumdirection);
+            BlockPos blockposition = this.blockPosition();
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
+            ImmutableList<Pose> immutablelist = passenger.getDismountPoses();
+            UnmodifiableIterator unmodifiableiterator = immutablelist.iterator();
 
-            for (Pose pose : immutableList) {
-                EntityDimensions entityDimensions = passenger.getDimensions(pose);
-                float f = Math.min(entityDimensions.width(), 1.0F) / 2.0F;
+            while (unmodifiableiterator.hasNext()) {
+                Pose entitypose = (Pose) unmodifiableiterator.next();
+                EntityDimensions entitysize = passenger.getDimensions(entitypose);
+                float f = Math.min(entitysize.width(), 1.0F) / 2.0F;
+                UnmodifiableIterator unmodifiableiterator1 = ((ImmutableList) AbstractMinecart.POSE_DISMOUNT_HEIGHTS.get(entitypose)).iterator();
 
-                for (int i : POSE_DISMOUNT_HEIGHTS.get(pose)) {
-                    for (int[] js : is) {
-                        mutableBlockPos.set(blockPos.getX() + js[0], blockPos.getY() + i, blockPos.getZ() + js[1]);
-                        double d = this.level()
-                            .getBlockFloorHeight(
-                                DismountHelper.nonClimbableShape(this.level(), mutableBlockPos),
-                                () -> DismountHelper.nonClimbableShape(this.level(), mutableBlockPos.below())
-                            );
-                        if (DismountHelper.isBlockFloorValid(d)) {
-                            AABB aABB = new AABB((double)(-f), 0.0, (double)(-f), (double)f, (double)entityDimensions.height(), (double)f);
-                            Vec3 vec3 = Vec3.upFromBottomCenterOf(mutableBlockPos, d);
-                            if (DismountHelper.canDismountTo(this.level(), passenger, aABB.move(vec3))) {
-                                passenger.setPose(pose);
-                                return vec3;
+                while (unmodifiableiterator1.hasNext()) {
+                    int i = (Integer) unmodifiableiterator1.next();
+                    int[][] aint1 = aint;
+                    int j = aint.length;
+
+                    for (int k = 0; k < j; ++k) {
+                        int[] aint2 = aint1[k];
+
+                        blockposition_mutableblockposition.set(blockposition.getX() + aint2[0], blockposition.getY() + i, blockposition.getZ() + aint2[1]);
+                        double d0 = this.level().getBlockFloorHeight(DismountHelper.nonClimbableShape(this.level(), blockposition_mutableblockposition), () -> {
+                            return DismountHelper.nonClimbableShape(this.level(), blockposition_mutableblockposition.below());
+                        });
+
+                        if (DismountHelper.isBlockFloorValid(d0)) {
+                            AABB axisalignedbb = new AABB((double) (-f), 0.0D, (double) (-f), (double) f, (double) entitysize.height(), (double) f);
+                            Vec3 vec3d = Vec3.upFromBottomCenterOf(blockposition_mutableblockposition, d0);
+
+                            if (DismountHelper.canDismountTo(this.level(), passenger, axisalignedbb.move(vec3d))) {
+                                passenger.setPose(entitypose);
+                                return vec3d;
                             }
                         }
                     }
                 }
             }
 
-            double e = this.getBoundingBox().maxY;
-            mutableBlockPos.set((double)blockPos.getX(), e, (double)blockPos.getZ());
+            double d1 = this.getBoundingBox().maxY;
 
-            for (Pose pose2 : immutableList) {
-                double g = (double)passenger.getDimensions(pose2).height();
-                int j = Mth.ceil(e - (double)mutableBlockPos.getY() + g);
-                double h = DismountHelper.findCeilingFrom(mutableBlockPos, j, pos -> this.level().getBlockState(pos).getCollisionShape(this.level(), pos));
-                if (e + g <= h) {
-                    passenger.setPose(pose2);
+            blockposition_mutableblockposition.set((double) blockposition.getX(), d1, (double) blockposition.getZ());
+            UnmodifiableIterator unmodifiableiterator2 = immutablelist.iterator();
+
+            while (unmodifiableiterator2.hasNext()) {
+                Pose entitypose1 = (Pose) unmodifiableiterator2.next();
+                double d2 = (double) passenger.getDimensions(entitypose1).height();
+                int l = Mth.ceil(d1 - (double) blockposition_mutableblockposition.getY() + d2);
+                double d3 = DismountHelper.findCeilingFrom(blockposition_mutableblockposition, l, (blockposition1) -> {
+                    return this.level().getBlockState(blockposition1).getCollisionShape(this.level(), blockposition1);
+                });
+
+                if (d1 + d2 <= d3) {
+                    passenger.setPose(entitypose1);
                     break;
                 }
             }
@@ -207,8 +256,9 @@
 
     @Override
     protected float getBlockSpeedFactor() {
-        BlockState blockState = this.level().getBlockState(this.blockPosition());
-        return blockState.is(BlockTags.RAILS) ? 1.0F : super.getBlockSpeedFactor();
+        BlockState iblockdata = this.level().getBlockState(this.blockPosition());
+
+        return iblockdata.is(BlockTags.RAILS) ? 1.0F : super.getBlockSpeedFactor();
     }
 
     @Override
@@ -224,7 +274,7 @@
     }
 
     public static Pair<Vec3i, Vec3i> exits(RailShape shape) {
-        return EXITS.get(shape);
+        return (Pair) AbstractMinecart.EXITS.get(shape);
     }
 
     @Override
@@ -234,11 +284,19 @@
 
     @Override
     protected double getDefaultGravity() {
-        return this.isInWater() ? 0.005 : 0.04;
+        return this.isInWater() ? 0.005D : 0.04D;
     }
 
     @Override
     public void tick() {
+        // CraftBukkit start
+        double prevX = this.getX();
+        double prevY = this.getY();
+        double prevZ = this.getZ();
+        float prevYaw = this.getYRot();
+        float prevPitch = this.getXRot();
+        // CraftBukkit end
+
         if (this.getHurtTime() > 0) {
             this.setHurtTime(this.getHurtTime() - 1);
         }
@@ -248,8 +306,20 @@
         }
 
         this.checkBelowWorld();
-        this.handlePortal();
+        // this.handlePortal(); // CraftBukkit - handled in postTick
         this.behavior.tick();
+        // CraftBukkit start
+        org.bukkit.World bworld = this.level().getWorld();
+        Location from = new Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
+        Location to = CraftLocation.toBukkit(this.position(), bworld, this.getYRot(), this.getXRot());
+        Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+
+        this.level().getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+
+        if (!from.equals(to)) {
+            this.level().getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
+        }
+        // CraftBukkit end
         this.updateInWaterStateAndDoFluidPushing();
         if (this.isInLava()) {
             this.lavaHurt();
@@ -267,13 +337,15 @@
         int i = Mth.floor(this.getX());
         int j = Mth.floor(this.getY());
         int k = Mth.floor(this.getZ());
-        if (useExperimentalMovement(this.level())) {
-            double d = this.getY() - 0.1 - 1.0E-5F;
-            if (this.level().getBlockState(BlockPos.containing((double)i, d, (double)k)).is(BlockTags.RAILS)) {
-                j = Mth.floor(d);
+
+        if (AbstractMinecart.useExperimentalMovement(this.level())) {
+            double d0 = this.getY() - 0.1D - 9.999999747378752E-6D;
+
+            if (this.level().getBlockState(BlockPos.containing((double) i, d0, (double) k)).is(BlockTags.RAILS)) {
+                j = Mth.floor(d0);
             }
         } else if (this.level().getBlockState(new BlockPos(i, j - 1, k)).is(BlockTags.RAILS)) {
-            j--;
+            --j;
         }
 
         return new BlockPos(i, j, k);
@@ -283,8 +355,7 @@
         return this.behavior.getMaxSpeed(world);
     }
 
-    public void activateMinecart(int x, int y, int z, boolean powered) {
-    }
+    public void activateMinecart(int x, int y, int z, boolean powered) {}
 
     @Override
     public void lerpPositionAndRotationStep(int step, double x, double y, double z, double yaw, double pitch) {
@@ -356,17 +427,23 @@
     }
 
     protected void comeOffTrack(ServerLevel world) {
-        double d = this.getMaxSpeed(world);
-        Vec3 vec3 = this.getDeltaMovement();
-        this.setDeltaMovement(Mth.clamp(vec3.x, -d, d), vec3.y, Mth.clamp(vec3.z, -d, d));
+        double d0 = this.getMaxSpeed(world);
+        Vec3 vec3d = this.getDeltaMovement();
+
+        this.setDeltaMovement(Mth.clamp(vec3d.x, -d0, d0), vec3d.y, Mth.clamp(vec3d.z, -d0, d0));
         if (this.onGround()) {
-            this.setDeltaMovement(this.getDeltaMovement().scale(0.5));
+            // CraftBukkit start - replace magic numbers with our variables
+            this.setDeltaMovement(new Vec3(this.getDeltaMovement().x * this.derailedX, this.getDeltaMovement().y * this.derailedY, this.getDeltaMovement().z * this.derailedZ));
+            // CraftBukkit end
         }
 
         this.move(MoverType.SELF, this.getDeltaMovement());
         if (!this.onGround()) {
-            this.setDeltaMovement(this.getDeltaMovement().scale(0.95));
+            // CraftBukkit start - replace magic numbers with our variables
+            this.setDeltaMovement(new Vec3(this.getDeltaMovement().x * this.flyingX, this.getDeltaMovement().y * this.flyingY, this.getDeltaMovement().z * this.flyingZ));
+            // CraftBukkit end
         }
+
     }
 
     protected double makeStepAlongTrack(BlockPos pos, RailShape shape, double remainingMovement) {
@@ -375,12 +452,14 @@
 
     @Override
     public void move(MoverType type, Vec3 movement) {
-        if (useExperimentalMovement(this.level())) {
-            Vec3 vec3 = this.position().add(movement);
+        if (AbstractMinecart.useExperimentalMovement(this.level())) {
+            Vec3 vec3d1 = this.position().add(movement);
+
             super.move(type, movement);
-            boolean bl = this.behavior.pushAndPickupEntities();
-            if (bl) {
-                super.move(type, vec3.subtract(this.position()));
+            boolean flag = this.behavior.pushAndPickupEntities();
+
+            if (flag) {
+                super.move(type, vec3d1.subtract(this.position()));
             }
 
             if (type.equals(MoverType.PISTON)) {
@@ -390,15 +469,17 @@
             super.move(type, movement);
             this.applyEffectsFromBlocks();
         }
+
     }
 
     @Override
     public void applyEffectsFromBlocks() {
-        if (!useExperimentalMovement(this.level())) {
+        if (!AbstractMinecart.useExperimentalMovement(this.level())) {
             this.applyEffectsFromBlocks(this.position(), this.position());
         } else {
             super.applyEffectsFromBlocks();
         }
+
     }
 
     @Override
@@ -419,24 +500,26 @@
     }
 
     public Vec3 getRedstoneDirection(BlockPos railPos) {
-        BlockState blockState = this.level().getBlockState(railPos);
-        if (blockState.is(Blocks.POWERED_RAIL) && blockState.getValue(PoweredRailBlock.POWERED)) {
-            RailShape railShape = blockState.getValue(((BaseRailBlock)blockState.getBlock()).getShapeProperty());
-            if (railShape == RailShape.EAST_WEST) {
+        BlockState iblockdata = this.level().getBlockState(railPos);
+
+        if (iblockdata.is(Blocks.POWERED_RAIL) && (Boolean) iblockdata.getValue(PoweredRailBlock.POWERED)) {
+            RailShape blockpropertytrackposition = (RailShape) iblockdata.getValue(((BaseRailBlock) iblockdata.getBlock()).getShapeProperty());
+
+            if (blockpropertytrackposition == RailShape.EAST_WEST) {
                 if (this.isRedstoneConductor(railPos.west())) {
-                    return new Vec3(1.0, 0.0, 0.0);
+                    return new Vec3(1.0D, 0.0D, 0.0D);
                 }
 
                 if (this.isRedstoneConductor(railPos.east())) {
-                    return new Vec3(-1.0, 0.0, 0.0);
+                    return new Vec3(-1.0D, 0.0D, 0.0D);
                 }
-            } else if (railShape == RailShape.NORTH_SOUTH) {
+            } else if (blockpropertytrackposition == RailShape.NORTH_SOUTH) {
                 if (this.isRedstoneConductor(railPos.north())) {
-                    return new Vec3(0.0, 0.0, 1.0);
+                    return new Vec3(0.0D, 0.0D, 1.0D);
                 }
 
                 if (this.isRedstoneConductor(railPos.south())) {
-                    return new Vec3(0.0, 0.0, -1.0);
+                    return new Vec3(0.0D, 0.0D, -1.0D);
                 }
             }
 
@@ -451,13 +534,14 @@
     }
 
     protected Vec3 applyNaturalSlowdown(Vec3 velocity) {
-        double d = this.behavior.getSlowdownFactor();
-        Vec3 vec3 = velocity.multiply(d, 0.0, d);
+        double d0 = this.behavior.getSlowdownFactor();
+        Vec3 vec3d1 = velocity.multiply(d0, 0.0D, d0);
+
         if (this.isInWater()) {
-            vec3 = vec3.scale(0.95F);
+            vec3d1 = vec3d1.scale(0.949999988079071D);
         }
 
-        return vec3;
+        return vec3d1;
     }
 
     @Override
@@ -469,6 +553,16 @@
 
         this.flipped = nbt.getBoolean("FlippedRotation");
         this.firstTick = nbt.getBoolean("HasTicked");
+        // Paper start - Friction API
+        if (nbt.contains("Paper.FrictionState")) {
+            String fs = nbt.getString("Paper.FrictionState");
+            try {
+                frictionState = net.kyori.adventure.util.TriState.valueOf(fs);
+            } catch (Exception ignored) {
+                com.mojang.logging.LogUtils.getLogger().error("Unknown friction state " + fs + " for " + this);
+            }
+        }
+        // Paper end - Friction API
     }
 
     @Override
@@ -481,82 +575,106 @@
 
         nbt.putBoolean("FlippedRotation", this.flipped);
         nbt.putBoolean("HasTicked", this.firstTick);
+
+        // Paper start - Friction API
+        if (this.frictionState != net.kyori.adventure.util.TriState.NOT_SET) {
+            nbt.putString("Paper.FrictionState", this.frictionState.toString());
+        }
+        // Paper end - Friction API
     }
 
     @Override
     public void push(Entity entity) {
         if (!this.level().isClientSide) {
             if (!entity.noPhysics && !this.noPhysics) {
+                if (!this.level().paperConfig().collisions.allowVehicleCollisions && this.level().paperConfig().collisions.onlyPlayersCollide && !(entity instanceof Player)) return; // Paper - Collision option for requiring a player participant
                 if (!this.hasPassenger(entity)) {
-                    double d = entity.getX() - this.getX();
-                    double e = entity.getZ() - this.getZ();
-                    double f = d * d + e * e;
-                    if (f >= 1.0E-4F) {
-                        f = Math.sqrt(f);
-                        d /= f;
-                        e /= f;
-                        double g = 1.0 / f;
-                        if (g > 1.0) {
-                            g = 1.0;
+                    // CraftBukkit start
+                    VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent((Vehicle) this.getBukkitEntity(), entity.getBukkitEntity());
+                    this.level().getCraftServer().getPluginManager().callEvent(collisionEvent);
+
+                    if (collisionEvent.isCancelled()) {
+                        return;
+                    }
+                    // CraftBukkit end
+                    double d0 = entity.getX() - this.getX();
+                    double d1 = entity.getZ() - this.getZ();
+                    double d2 = d0 * d0 + d1 * d1;
+
+                    if (d2 >= 9.999999747378752E-5D) {
+                        d2 = Math.sqrt(d2);
+                        d0 /= d2;
+                        d1 /= d2;
+                        double d3 = 1.0D / d2;
+
+                        if (d3 > 1.0D) {
+                            d3 = 1.0D;
                         }
 
-                        d *= g;
-                        e *= g;
-                        d *= 0.1F;
-                        e *= 0.1F;
-                        d *= 0.5;
-                        e *= 0.5;
-                        if (entity instanceof AbstractMinecart abstractMinecart) {
-                            this.pushOtherMinecart(abstractMinecart, d, e);
+                        d0 *= d3;
+                        d1 *= d3;
+                        d0 *= 0.10000000149011612D;
+                        d1 *= 0.10000000149011612D;
+                        d0 *= 0.5D;
+                        d1 *= 0.5D;
+                        if (entity instanceof AbstractMinecart) {
+                            AbstractMinecart entityminecartabstract = (AbstractMinecart) entity;
+
+                            this.pushOtherMinecart(entityminecartabstract, d0, d1);
                         } else {
-                            this.push(-d, 0.0, -e);
-                            entity.push(d / 4.0, 0.0, e / 4.0);
+                            this.push(-d0, 0.0D, -d1);
+                            entity.push(d0 / 4.0D, 0.0D, d1 / 4.0D);
                         }
                     }
+
                 }
             }
         }
     }
 
     private void pushOtherMinecart(AbstractMinecart entity, double xDiff, double zDiff) {
-        double d;
-        double e;
-        if (useExperimentalMovement(this.level())) {
-            d = this.getDeltaMovement().x;
-            e = this.getDeltaMovement().z;
+        double d2;
+        double d3;
+
+        if (AbstractMinecart.useExperimentalMovement(this.level())) {
+            d2 = this.getDeltaMovement().x;
+            d3 = this.getDeltaMovement().z;
         } else {
-            d = entity.getX() - this.getX();
-            e = entity.getZ() - this.getZ();
+            d2 = entity.getX() - this.getX();
+            d3 = entity.getZ() - this.getZ();
         }
 
-        Vec3 vec3 = new Vec3(d, 0.0, e).normalize();
-        Vec3 vec32 = new Vec3((double)Mth.cos(this.getYRot() * (float) (Math.PI / 180.0)), 0.0, (double)Mth.sin(this.getYRot() * (float) (Math.PI / 180.0)))
-            .normalize();
-        double h = Math.abs(vec3.dot(vec32));
-        if (!(h < 0.8F) || useExperimentalMovement(this.level())) {
-            Vec3 vec33 = this.getDeltaMovement();
-            Vec3 vec34 = entity.getDeltaMovement();
+        Vec3 vec3d = (new Vec3(d2, 0.0D, d3)).normalize();
+        Vec3 vec3d1 = (new Vec3((double) Mth.cos(this.getYRot() * 0.017453292F), 0.0D, (double) Mth.sin(this.getYRot() * 0.017453292F))).normalize();
+        double d4 = Math.abs(vec3d.dot(vec3d1));
+
+        if (d4 >= 0.800000011920929D || AbstractMinecart.useExperimentalMovement(this.level())) {
+            Vec3 vec3d2 = this.getDeltaMovement();
+            Vec3 vec3d3 = entity.getDeltaMovement();
+
             if (entity.isFurnace() && !this.isFurnace()) {
-                this.setDeltaMovement(vec33.multiply(0.2, 1.0, 0.2));
-                this.push(vec34.x - xDiff, 0.0, vec34.z - zDiff);
-                entity.setDeltaMovement(vec34.multiply(0.95, 1.0, 0.95));
+                this.setDeltaMovement(vec3d2.multiply(0.2D, 1.0D, 0.2D));
+                this.push(vec3d3.x - xDiff, 0.0D, vec3d3.z - zDiff);
+                entity.setDeltaMovement(vec3d3.multiply(0.95D, 1.0D, 0.95D));
             } else if (!entity.isFurnace() && this.isFurnace()) {
-                entity.setDeltaMovement(vec34.multiply(0.2, 1.0, 0.2));
-                entity.push(vec33.x + xDiff, 0.0, vec33.z + zDiff);
-                this.setDeltaMovement(vec33.multiply(0.95, 1.0, 0.95));
+                entity.setDeltaMovement(vec3d3.multiply(0.2D, 1.0D, 0.2D));
+                entity.push(vec3d2.x + xDiff, 0.0D, vec3d2.z + zDiff);
+                this.setDeltaMovement(vec3d2.multiply(0.95D, 1.0D, 0.95D));
             } else {
-                double i = (vec34.x + vec33.x) / 2.0;
-                double j = (vec34.z + vec33.z) / 2.0;
-                this.setDeltaMovement(vec33.multiply(0.2, 1.0, 0.2));
-                this.push(i - xDiff, 0.0, j - zDiff);
-                entity.setDeltaMovement(vec34.multiply(0.2, 1.0, 0.2));
-                entity.push(i + xDiff, 0.0, j + zDiff);
+                double d5 = (vec3d3.x + vec3d2.x) / 2.0D;
+                double d6 = (vec3d3.z + vec3d2.z) / 2.0D;
+
+                this.setDeltaMovement(vec3d2.multiply(0.2D, 1.0D, 0.2D));
+                this.push(d5 - xDiff, 0.0D, d6 - zDiff);
+                entity.setDeltaMovement(vec3d3.multiply(0.2D, 1.0D, 0.2D));
+                entity.push(d5 + xDiff, 0.0D, d6 + zDiff);
             }
+
         }
     }
 
     public BlockState getDisplayBlockState() {
-        return !this.hasCustomDisplay() ? this.getDefaultDisplayBlockState() : Block.stateById(this.getEntityData().get(DATA_ID_DISPLAY_BLOCK));
+        return !this.hasCustomDisplay() ? this.getDefaultDisplayBlockState() : Block.stateById((Integer) this.getEntityData().get(AbstractMinecart.DATA_ID_DISPLAY_BLOCK));
     }
 
     public BlockState getDefaultDisplayBlockState() {
@@ -564,7 +682,7 @@
     }
 
     public int getDisplayOffset() {
-        return !this.hasCustomDisplay() ? this.getDefaultDisplayOffset() : this.getEntityData().get(DATA_ID_DISPLAY_OFFSET);
+        return !this.hasCustomDisplay() ? this.getDefaultDisplayOffset() : (Integer) this.getEntityData().get(AbstractMinecart.DATA_ID_DISPLAY_OFFSET);
     }
 
     public int getDefaultDisplayOffset() {
@@ -572,21 +690,21 @@
     }
 
     public void setDisplayBlockState(BlockState state) {
-        this.getEntityData().set(DATA_ID_DISPLAY_BLOCK, Block.getId(state));
+        this.getEntityData().set(AbstractMinecart.DATA_ID_DISPLAY_BLOCK, Block.getId(state));
         this.setCustomDisplay(true);
     }
 
     public void setDisplayOffset(int offset) {
-        this.getEntityData().set(DATA_ID_DISPLAY_OFFSET, offset);
+        this.getEntityData().set(AbstractMinecart.DATA_ID_DISPLAY_OFFSET, offset);
         this.setCustomDisplay(true);
     }
 
     public boolean hasCustomDisplay() {
-        return this.getEntityData().get(DATA_ID_CUSTOM_DISPLAY);
+        return (Boolean) this.getEntityData().get(AbstractMinecart.DATA_ID_CUSTOM_DISPLAY);
     }
 
     public void setCustomDisplay(boolean present) {
-        this.getEntityData().set(DATA_ID_CUSTOM_DISPLAY, present);
+        this.getEntityData().set(AbstractMinecart.DATA_ID_CUSTOM_DISPLAY, present);
     }
 
     public static boolean useExperimentalMovement(Level world) {
@@ -603,4 +721,27 @@
     public boolean isFurnace() {
         return false;
     }
+
+    // CraftBukkit start - Methods for getting and setting flying and derailed velocity modifiers
+    public Vector getFlyingVelocityMod() {
+        return new Vector(this.flyingX, this.flyingY, this.flyingZ);
+    }
+
+    public void setFlyingVelocityMod(Vector flying) {
+        this.flyingX = flying.getX();
+        this.flyingY = flying.getY();
+        this.flyingZ = flying.getZ();
+    }
+
+    public Vector getDerailedVelocityMod() {
+        return new Vector(this.derailedX, this.derailedY, this.derailedZ);
+    }
+
+    public void setDerailedVelocityMod(Vector derailed) {
+        this.derailedX = derailed.getX();
+        this.derailedY = derailed.getY();
+        this.derailedZ = derailed.getZ();
+    }
+    // CraftBukkit end
+    public net.minecraft.world.item.Item publicGetDropItem() { return getDropItem(); } // Paper - api to get boat and minecart material - expose public drop item
 }
