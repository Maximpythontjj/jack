--- a/net/minecraft/world/food/FoodProperties.java
+++ b/net/minecraft/world/food/FoodProperties.java
@@ -5,6 +5,8 @@
 import net.minecraft.network.RegistryFriendlyByteBuf;
 import net.minecraft.network.codec.ByteBufCodecs;
 import net.minecraft.network.codec.StreamCodec;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.ExtraCodecs;
@@ -18,48 +20,32 @@
 import net.minecraft.world.level.Level;
 
 public record FoodProperties(int nutrition, float saturation, boolean canAlwaysEat) implements ConsumableListener {
-    public static final Codec<FoodProperties> DIRECT_CODEC = RecordCodecBuilder.create(
-        instance -> instance.group(
-                    ExtraCodecs.NON_NEGATIVE_INT.fieldOf("nutrition").forGetter(FoodProperties::nutrition),
-                    Codec.FLOAT.fieldOf("saturation").forGetter(FoodProperties::saturation),
-                    Codec.BOOL.optionalFieldOf("can_always_eat", Boolean.valueOf(false)).forGetter(FoodProperties::canAlwaysEat)
-                )
-                .apply(instance, FoodProperties::new)
-    );
-    public static final StreamCodec<RegistryFriendlyByteBuf, FoodProperties> DIRECT_STREAM_CODEC = StreamCodec.composite(
-        ByteBufCodecs.VAR_INT,
-        FoodProperties::nutrition,
-        ByteBufCodecs.FLOAT,
-        FoodProperties::saturation,
-        ByteBufCodecs.BOOL,
-        FoodProperties::canAlwaysEat,
-        FoodProperties::new
-    );
+
+    public static final Codec<FoodProperties> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> {
+        return instance.group(ExtraCodecs.NON_NEGATIVE_INT.fieldOf("nutrition").forGetter(FoodProperties::nutrition), Codec.FLOAT.fieldOf("saturation").forGetter(FoodProperties::saturation), Codec.BOOL.optionalFieldOf("can_always_eat", false).forGetter(FoodProperties::canAlwaysEat)).apply(instance, FoodProperties::new);
+    });
+    public static final StreamCodec<RegistryFriendlyByteBuf, FoodProperties> DIRECT_STREAM_CODEC = StreamCodec.composite(ByteBufCodecs.VAR_INT, FoodProperties::nutrition, ByteBufCodecs.FLOAT, FoodProperties::saturation, ByteBufCodecs.BOOL, FoodProperties::canAlwaysEat, FoodProperties::new);
 
     @Override
     public void onConsume(Level world, LivingEntity user, ItemStack stack, Consumable consumable) {
-        RandomSource randomSource = user.getRandom();
-        world.playSound(null, user.getX(), user.getY(), user.getZ(), consumable.sound().value(), SoundSource.NEUTRAL, 1.0F, randomSource.triangle(1.0F, 0.4F));
-        if (user instanceof Player player) {
-            player.getFoodData().eat(this);
-            world.playSound(
-                null,
-                player.getX(),
-                player.getY(),
-                player.getZ(),
-                SoundEvents.PLAYER_BURP,
-                SoundSource.PLAYERS,
-                0.5F,
-                Mth.randomBetween(randomSource, 0.9F, 1.0F)
-            );
+        RandomSource randomsource = user.getRandom();
+
+        world.playSound((Player) null, user.getX(), user.getY(), user.getZ(), (SoundEvent) consumable.sound().value(), SoundSource.NEUTRAL, 1.0F, randomsource.triangle(1.0F, 0.4F));
+        if (user instanceof Player entityhuman) {
+            entityhuman.getFoodData().eat(this, stack, (ServerPlayer) entityhuman); // CraftBukkit
+            world.playSound((Player) null, entityhuman.getX(), entityhuman.getY(), entityhuman.getZ(), SoundEvents.PLAYER_BURP, SoundSource.PLAYERS, 0.5F, Mth.randomBetween(randomsource, 0.9F, 1.0F));
         }
+
     }
 
     public static class Builder {
+
         private int nutrition;
         private float saturationModifier;
         private boolean canAlwaysEat;
 
+        public Builder() {}
+
         public FoodProperties.Builder nutrition(int nutrition) {
             this.nutrition = nutrition;
             return this;
@@ -77,6 +63,7 @@
 
         public FoodProperties build() {
             float f = FoodConstants.saturationByModifier(this.nutrition, this.saturationModifier);
+
             return new FoodProperties(this.nutrition, f, this.canAlwaysEat);
         }
     }
