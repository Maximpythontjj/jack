--- a/net/minecraft/core/dispenser/ProjectileDispenseBehavior.java
+++ b/net/minecraft/core/dispenser/ProjectileDispenseBehavior.java
@@ -8,36 +8,69 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.ProjectileItem;
 import net.minecraft.world.level.block.DispenserBlock;
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+// CraftBukkit end
 
 public class ProjectileDispenseBehavior extends DefaultDispenseItemBehavior {
+
     private final ProjectileItem projectileItem;
     private final ProjectileItem.DispenseConfig dispenseConfig;
 
     public ProjectileDispenseBehavior(Item item) {
-        if (item instanceof ProjectileItem projectileItem) {
-            this.projectileItem = projectileItem;
-            this.dispenseConfig = projectileItem.createDispenseConfig();
+        if (item instanceof ProjectileItem projectileitem) {
+            this.projectileItem = projectileitem;
+            this.dispenseConfig = projectileitem.createDispenseConfig();
         } else {
-            throw new IllegalArgumentException(item + " not instance of " + ProjectileItem.class.getSimpleName());
+            String s = String.valueOf(item);
+
+            throw new IllegalArgumentException(s + " not instance of " + ProjectileItem.class.getSimpleName());
         }
     }
 
     @Override
     public ItemStack execute(BlockSource pointer, ItemStack stack) {
-        ServerLevel serverLevel = pointer.level();
-        Direction direction = pointer.state().getValue(DispenserBlock.FACING);
-        Position position = this.dispenseConfig.positionFunction().getDispensePosition(pointer, direction);
-        Projectile.spawnProjectileUsingShoot(
-            this.projectileItem.asProjectile(serverLevel, position, stack, direction),
-            serverLevel,
-            stack,
-            (double)direction.getStepX(),
-            (double)direction.getStepY(),
-            (double)direction.getStepZ(),
-            this.dispenseConfig.power(),
-            this.dispenseConfig.uncertainty()
-        );
-        stack.shrink(1);
+        ServerLevel worldserver = pointer.level();
+        Direction enumdirection = (Direction) pointer.state().getValue(DispenserBlock.FACING);
+        Position iposition = this.dispenseConfig.positionFunction().getDispensePosition(pointer, enumdirection);
+
+        // CraftBukkit start
+        // IProjectile.spawnProjectileUsingShoot(this.projectileItem.asProjectile(worldserver, iposition, itemstack, enumdirection), worldserver, itemstack, (double) enumdirection.getStepX(), (double) enumdirection.getStepY(), (double) enumdirection.getStepZ(), this.dispenseConfig.power(), this.dispenseConfig.uncertainty()); // CraftBukkit - call when finish the BlockDispenseEvent
+        ItemStack itemstack1 = stack.copyWithCount(1); // Paper - shrink below and single item in event
+        org.bukkit.block.Block block = CraftBlock.at(worldserver, pointer.pos());
+        CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+        BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) enumdirection.getStepX(), (double) enumdirection.getStepY(), (double) enumdirection.getStepZ()));
+        if (!DispenserBlock.eventFired) {
+            worldserver.getCraftServer().getPluginManager().callEvent(event);
+        }
+
+        if (event.isCancelled()) {
+            // stack.grow(1); // Paper - shrink below
+            return stack;
+        }
+
+        boolean shrink = true; // Paper
+        if (!event.getItem().equals(craftItem)) {
+            shrink = false; // Paper - shrink below
+            // Chain to handler for new item
+            ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+            DispenseItemBehavior idispensebehavior = DispenserBlock.getDispenseBehavior(pointer, eventStack); // Paper - Fix NPE with equippable and items without behavior
+            if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                idispensebehavior.dispense(pointer, eventStack);
+                return stack;
+            }
+        }
+
+        // SPIGOT-7923: Avoid create projectiles with empty item
+        if (!itemstack1.isEmpty()) {
+            Projectile iprojectile = Projectile.spawnProjectileUsingShoot(this.projectileItem.asProjectile(worldserver, iposition, CraftItemStack.unwrap(event.getItem()), enumdirection), worldserver, itemstack1, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), this.dispenseConfig.power(), this.dispenseConfig.uncertainty()); // Paper - track changed items in the dispense event; unwrap is safe here because all uses of the stack make their own copies
+            iprojectile.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource(pointer.blockEntity());
+        }
+        if (shrink) stack.shrink(1); // Paper - actually handle here
+        // CraftBukkit end
         return stack;
     }
 
