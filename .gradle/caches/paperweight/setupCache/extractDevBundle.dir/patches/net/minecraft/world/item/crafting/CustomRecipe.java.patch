--- a/net/minecraft/world/item/crafting/CustomRecipe.java
+++ b/net/minecraft/world/item/crafting/CustomRecipe.java
@@ -1,11 +1,24 @@
 package net.minecraft.world.item.crafting;
 
+import com.mojang.datafixers.Products.P1;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.Objects;
+import java.util.function.Function;
 import net.minecraft.network.RegistryFriendlyByteBuf;
 import net.minecraft.network.codec.StreamCodec;
 
+// CraftBukkit start
+import net.minecraft.world.item.ItemStack;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.inventory.CraftComplexRecipe;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftRecipe;
+import org.bukkit.inventory.Recipe;
+// CraftBukkit end
+
 public abstract class CustomRecipe implements CraftingRecipe {
+
     private final CraftingBookCategory category;
 
     public CustomRecipe(CraftingBookCategory category) {
@@ -30,16 +43,36 @@
     @Override
     public abstract RecipeSerializer<? extends CustomRecipe> getSerializer();
 
+    // CraftBukkit start
+    @Override
+    public Recipe toBukkitRecipe(NamespacedKey id) {
+        CraftItemStack result = CraftItemStack.asCraftMirror(ItemStack.EMPTY);
+
+        CraftComplexRecipe recipe = new CraftComplexRecipe(id, result, this);
+        recipe.setGroup(this.group());
+        recipe.setCategory(CraftRecipe.getCategory(this.category()));
+
+        return recipe;
+    }
+    // CraftBukkit end
+
     public static class Serializer<T extends CraftingRecipe> implements RecipeSerializer<T> {
+
         private final MapCodec<T> codec;
         private final StreamCodec<RegistryFriendlyByteBuf, T> streamCodec;
 
         public Serializer(CustomRecipe.Serializer.Factory<T> factory) {
-            this.codec = RecordCodecBuilder.mapCodec(
-                instance -> instance.group(CraftingBookCategory.CODEC.fieldOf("category").orElse(CraftingBookCategory.MISC).forGetter(CraftingRecipe::category))
-                        .apply(instance, factory::create)
-            );
-            this.streamCodec = StreamCodec.composite(CraftingBookCategory.STREAM_CODEC, CraftingRecipe::category, factory::create);
+            this.codec = RecordCodecBuilder.mapCodec((instance) -> {
+                P1<RecordCodecBuilder.Mu<T>, CraftingBookCategory> p1 = instance.group(CraftingBookCategory.CODEC.fieldOf("category").orElse(CraftingBookCategory.MISC).forGetter(CraftingRecipe::category)); // CraftBukkit - decompile error
+
+                Objects.requireNonNull(factory);
+                return p1.apply(instance, factory::create);
+            });
+            StreamCodec streamcodec = CraftingBookCategory.STREAM_CODEC;
+            Function<CraftingRecipe, CraftingBookCategory> function = CraftingRecipe::category; // CraftBukkit - decompile error
+
+            Objects.requireNonNull(factory);
+            this.streamCodec = StreamCodec.composite(streamcodec, function, factory::create);
         }
 
         @Override
@@ -54,6 +87,7 @@
 
         @FunctionalInterface
         public interface Factory<T extends CraftingRecipe> {
+
             T create(CraftingBookCategory category);
         }
     }
