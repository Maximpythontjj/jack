--- a/net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java
+++ b/net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java
@@ -4,6 +4,7 @@
 import javax.annotation.Nullable;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.goal.Goal;
@@ -12,6 +13,7 @@
 import net.minecraft.world.phys.AABB;
 
 public class NearestAttackableTargetGoal<T extends LivingEntity> extends TargetGoal {
+
     private static final int DEFAULT_RANDOM_INTERVAL = 10;
     protected final Class<T> targetType;
     protected final int randomInterval;
@@ -20,7 +22,7 @@
     protected TargetingConditions targetConditions;
 
     public NearestAttackableTargetGoal(Mob mob, Class<T> targetClass, boolean checkVisibility) {
-        this(mob, targetClass, 10, checkVisibility, false, null);
+        this(mob, targetClass, 10, checkVisibility, false, (TargetingConditions.Selector) null);
     }
 
     public NearestAttackableTargetGoal(Mob mob, Class<T> targetClass, boolean checkVisibility, TargetingConditions.Selector predicate) {
@@ -28,17 +30,10 @@
     }
 
     public NearestAttackableTargetGoal(Mob mob, Class<T> targetClass, boolean checkVisibility, boolean checkCanNavigate) {
-        this(mob, targetClass, 10, checkVisibility, checkCanNavigate, null);
+        this(mob, targetClass, 10, checkVisibility, checkCanNavigate, (TargetingConditions.Selector) null);
     }
 
-    public NearestAttackableTargetGoal(
-        Mob mob,
-        Class<T> targetClass,
-        int reciprocalChance,
-        boolean checkVisibility,
-        boolean checkCanNavigate,
-        @Nullable TargetingConditions.Selector targetPredicate
-    ) {
+    public NearestAttackableTargetGoal(Mob mob, Class<T> targetClass, int reciprocalChance, boolean checkVisibility, boolean checkCanNavigate, @Nullable TargetingConditions.Selector targetPredicate) {
         super(mob, checkVisibility, checkCanNavigate);
         this.targetType = targetClass;
         this.randomInterval = reducedTickDelay(reciprocalChance);
@@ -61,24 +56,21 @@
     }
 
     protected void findTarget() {
-        ServerLevel serverLevel = getServerLevel(this.mob);
+        ServerLevel worldserver = getServerLevel((Entity) this.mob);
+
         if (this.targetType != Player.class && this.targetType != ServerPlayer.class) {
-            this.target = serverLevel.getNearestEntity(
-                this.mob.level().getEntitiesOfClass(this.targetType, this.getTargetSearchArea(this.getFollowDistance()), livingEntity -> true),
-                this.getTargetConditions(),
-                this.mob,
-                this.mob.getX(),
-                this.mob.getEyeY(),
-                this.mob.getZ()
-            );
+            this.target = worldserver.getNearestEntity(this.mob.level().getEntitiesOfClass(this.targetType, this.getTargetSearchArea(this.getFollowDistance()), (entityliving) -> {
+                return true;
+            }), this.getTargetConditions(), this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
         } else {
-            this.target = serverLevel.getNearestPlayer(this.getTargetConditions(), this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
+            this.target = worldserver.getNearestPlayer(this.getTargetConditions(), this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
         }
+
     }
 
     @Override
     public void start() {
-        this.mob.setTarget(this.target);
+        this.mob.setTarget(this.target, this.target instanceof ServerPlayer ? org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_PLAYER : org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_ENTITY, true); // CraftBukkit - reason
         super.start();
     }
 
