--- a/net/minecraft/world/level/block/CoralFanBlock.java
+++ b/net/minecraft/world/level/block/CoralFanBlock.java
@@ -11,17 +11,21 @@
 import net.minecraft.world.level.ScheduledTickAccess;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.Fluids;
 
 public class CoralFanBlock extends BaseCoralFanBlock {
-    public static final MapCodec<CoralFanBlock> CODEC = RecordCodecBuilder.mapCodec(
-        instance -> instance.group(CoralBlock.DEAD_CORAL_FIELD.forGetter(block -> block.deadBlock), propertiesCodec()).apply(instance, CoralFanBlock::new)
-    );
+
+    public static final MapCodec<CoralFanBlock> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
+        return instance.group(CoralBlock.DEAD_CORAL_FIELD.forGetter((blockcoralfan) -> {
+            return blockcoralfan.deadBlock;
+        }), propertiesCodec()).apply(instance, CoralFanBlock::new);
+    });
     private final Block deadBlock;
 
     @Override
     public MapCodec<CoralFanBlock> codec() {
-        return CODEC;
+        return CoralFanBlock.CODEC;
     }
 
     protected CoralFanBlock(Block deadCoralBlock, BlockBehaviour.Properties settings) {
@@ -37,27 +41,24 @@
     @Override
     protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!scanForWater(state, world, pos)) {
-            world.setBlock(pos, this.deadBlock.defaultBlockState().setValue(WATERLOGGED, Boolean.valueOf(false)), 2);
+            // CraftBukkit start
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralFanBlock.WATERLOGGED, false)).isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
+            world.setBlock(pos, (BlockState) this.deadBlock.defaultBlockState().setValue(CoralFanBlock.WATERLOGGED, false), 2);
         }
+
     }
 
     @Override
-    protected BlockState updateShape(
-        BlockState state,
-        LevelReader world,
-        ScheduledTickAccess tickView,
-        BlockPos pos,
-        Direction direction,
-        BlockPos neighborPos,
-        BlockState neighborState,
-        RandomSource random
-    ) {
+    protected BlockState updateShape(BlockState state, LevelReader world, ScheduledTickAccess tickView, BlockPos pos, Direction direction, BlockPos neighborPos, BlockState neighborState, RandomSource random) {
         if (direction == Direction.DOWN && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
             this.tryScheduleDieTick(state, world, tickView, random, pos);
-            if (state.getValue(WATERLOGGED)) {
-                tickView.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            if ((Boolean) state.getValue(CoralFanBlock.WATERLOGGED)) {
+                tickView.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
             }
 
             return super.updateShape(state, world, tickView, pos, direction, neighborPos, neighborState, random);
