--- a/net/minecraft/world/entity/raid/Raider.java
+++ b/net/minecraft/world/entity/raid/Raider.java
@@ -3,6 +3,7 @@
 import com.google.common.collect.Lists;
 import it.unimi.dsi.fastutil.ints.Int2LongOpenHashMap;
 import java.util.EnumSet;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
@@ -39,12 +40,16 @@
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.pathfinder.Path;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.event.entity.EntityRemoveEvent;
+// CraftBukkit end
 
 public abstract class Raider extends PatrollingMonster {
+
     protected static final EntityDataAccessor<Boolean> IS_CELEBRATING = SynchedEntityData.defineId(Raider.class, EntityDataSerializers.BOOLEAN);
-    static final Predicate<ItemEntity> ALLOWED_ITEMS = itemEntity -> !itemEntity.hasPickUpDelay()
-            && itemEntity.isAlive()
-            && ItemStack.matches(itemEntity.getItem(), Raid.getOminousBannerInstance(itemEntity.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)));
+    static final Predicate<ItemEntity> ALLOWED_ITEMS = (entityitem) -> {
+        return !entityitem.hasPickUpDelay() && entityitem.isAlive() && ItemStack.matches(entityitem.getItem(), Raid.getOminousBannerInstance(entityitem.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)));
+    };
     @Nullable
     protected Raid raid;
     private int wave;
@@ -60,14 +65,14 @@
         super.registerGoals();
         this.goalSelector.addGoal(1, new Raider.ObtainRaidLeaderBannerGoal<>(this));
         this.goalSelector.addGoal(3, new PathfindToRaidGoal<>(this));
-        this.goalSelector.addGoal(4, new Raider.RaiderMoveThroughVillageGoal(this, 1.05F, 1));
+        this.goalSelector.addGoal(4, new Raider.RaiderMoveThroughVillageGoal(this, 1.0499999523162842D, 1));
         this.goalSelector.addGoal(5, new Raider.RaiderCelebration(this));
     }
 
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         super.defineSynchedData(builder);
-        builder.define(IS_CELEBRATING, false);
+        builder.define(Raider.IS_CELEBRATING, false);
     }
 
     public abstract void applyRaidBuffs(ServerLevel world, int wave, boolean unused);
@@ -84,17 +89,20 @@
     public void aiStep() {
         if (this.level() instanceof ServerLevel && this.isAlive()) {
             Raid raid = this.getCurrentRaid();
+
             if (this.canJoinRaid()) {
                 if (raid == null) {
                     if (this.level().getGameTime() % 20L == 0L) {
-                        Raid raid2 = ((ServerLevel)this.level()).getRaidAt(this.blockPosition());
-                        if (raid2 != null && Raids.canJoinRaid(this, raid2)) {
-                            raid2.joinRaid(raid2.getGroupsSpawned(), this, null, true);
+                        Raid raid1 = ((ServerLevel) this.level()).getRaidAt(this.blockPosition());
+
+                        if (raid1 != null && Raids.canJoinRaid(this, raid1)) {
+                            raid1.joinRaid(raid1.getGroupsSpawned(), this, (BlockPos) null, true);
                         }
                     }
                 } else {
-                    LivingEntity livingEntity = this.getTarget();
-                    if (livingEntity != null && (livingEntity.getType() == EntityType.PLAYER || livingEntity.getType() == EntityType.IRON_GOLEM)) {
+                    LivingEntity entityliving = this.getTarget();
+
+                    if (entityliving != null && (entityliving.getType() == EntityType.PLAYER || entityliving.getType() == EntityType.IRON_GOLEM)) {
                         this.noActionTime = 0;
                     }
                 }
@@ -114,6 +122,7 @@
         if (this.level() instanceof ServerLevel) {
             Entity entity = damageSource.getEntity();
             Raid raid = this.getCurrentRaid();
+
             if (raid != null) {
                 if (this.isPatrolLeader()) {
                     raid.removeLeader(this.getWave());
@@ -145,15 +154,21 @@
     }
 
     public boolean isCaptain() {
-        ItemStack itemStack = this.getItemBySlot(EquipmentSlot.HEAD);
-        boolean bl = !itemStack.isEmpty()
-            && ItemStack.matches(itemStack, Raid.getOminousBannerInstance(this.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)));
-        boolean bl2 = this.isPatrolLeader();
-        return bl && bl2;
+        ItemStack itemstack = this.getItemBySlot(EquipmentSlot.HEAD);
+        boolean flag = !itemstack.isEmpty() && ItemStack.matches(itemstack, Raid.getOminousBannerInstance(this.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)));
+        boolean flag1 = this.isPatrolLeader();
+
+        return flag && flag1;
     }
 
     public boolean hasRaid() {
-        return this.level() instanceof ServerLevel serverLevel && (this.getCurrentRaid() != null || serverLevel.getRaidAt(this.blockPosition()) != null);
+        Level world = this.level();
+
+        if (!(world instanceof ServerLevel worldserver)) {
+            return false;
+        } else {
+            return this.getCurrentRaid() != null || worldserver.getRaidAt(this.blockPosition()) != null;
+        }
     }
 
     public boolean hasActiveRaid() {
@@ -169,11 +184,11 @@
     }
 
     public boolean isCelebrating() {
-        return this.entityData.get(IS_CELEBRATING);
+        return (Boolean) this.entityData.get(Raider.IS_CELEBRATING);
     }
 
     public void setCelebrating(boolean celebrating) {
-        this.entityData.set(IS_CELEBRATING, celebrating);
+        this.entityData.set(Raider.IS_CELEBRATING, celebrating);
     }
 
     @Override
@@ -184,6 +199,7 @@
         if (this.raid != null) {
             nbt.putInt("RaidId", this.raid.getId());
         }
+
     }
 
     @Override
@@ -193,7 +209,7 @@
         this.canJoinRaid = nbt.getBoolean("CanJoinRaid");
         if (nbt.contains("RaidId", 3)) {
             if (this.level() instanceof ServerLevel) {
-                this.raid = ((ServerLevel)this.level()).getRaids().get(nbt.getInt("RaidId"));
+                this.raid = ((ServerLevel) this.level()).getRaids().get(nbt.getInt("RaidId"));
             }
 
             if (this.raid != null) {
@@ -203,36 +219,45 @@
                 }
             }
         }
+
     }
 
     @Override
     protected void pickUpItem(ServerLevel world, ItemEntity itemEntity) {
-        ItemStack itemStack = itemEntity.getItem();
-        boolean bl = this.hasActiveRaid() && this.getCurrentRaid().getLeader(this.getWave()) != null;
-        if (this.hasActiveRaid()
-            && !bl
-            && ItemStack.matches(itemStack, Raid.getOminousBannerInstance(this.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)))) {
-            EquipmentSlot equipmentSlot = EquipmentSlot.HEAD;
-            ItemStack itemStack2 = this.getItemBySlot(equipmentSlot);
-            double d = (double)this.getEquipmentDropChance(equipmentSlot);
-            if (!itemStack2.isEmpty() && (double)Math.max(this.random.nextFloat() - 0.1F, 0.0F) < d) {
-                this.spawnAtLocation(world, itemStack2);
+        ItemStack itemstack = itemEntity.getItem();
+        boolean flag = this.hasActiveRaid() && this.getCurrentRaid().getLeader(this.getWave()) != null;
+
+        if (this.hasActiveRaid() && !flag && ItemStack.matches(itemstack, Raid.getOminousBannerInstance(this.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)))) {
+            // Paper start - EntityPickupItemEvent fixes
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityPickupItemEvent(this, itemEntity, 0, false).isCancelled()) {
+                return;
+            }
+            // Paper end - EntityPickupItemEvent fixes
+            EquipmentSlot enumitemslot = EquipmentSlot.HEAD;
+            ItemStack itemstack1 = this.getItemBySlot(enumitemslot);
+            double d0 = (double) this.getEquipmentDropChance(enumitemslot);
+
+            if (!itemstack1.isEmpty() && (double) Math.max(this.random.nextFloat() - 0.1F, 0.0F) < d0) {
+                this.forceDrops = true; // Paper - Add missing forceDrop toggles
+                this.spawnAtLocation(world, itemstack1);
+                this.forceDrops = false; // Paper - Add missing forceDrop toggles
             }
 
             this.onItemPickup(itemEntity);
-            this.setItemSlot(equipmentSlot, itemStack);
-            this.take(itemEntity, itemStack.getCount());
-            itemEntity.discard();
+            this.setItemSlot(enumitemslot, itemstack);
+            this.take(itemEntity, itemstack.getCount());
+            itemEntity.discard(EntityRemoveEvent.Cause.PICKUP); // CraftBukkit - add Bukkit remove cause
             this.getCurrentRaid().setLeader(this.getWave(), this);
             this.setPatrolLeader(true);
         } else {
             super.pickUpItem(world, itemEntity);
         }
+
     }
 
     @Override
     public boolean removeWhenFarAway(double distanceSquared) {
-        return this.getCurrentRaid() == null && super.removeWhenFarAway(distanceSquared);
+        return this.getCurrentRaid() == null ? super.removeWhenFarAway(distanceSquared) : false;
     }
 
     @Override
@@ -259,86 +284,15 @@
 
     @Nullable
     @Override
-    public SpawnGroupData finalizeSpawn(
-        ServerLevelAccessor world, DifficultyInstance difficulty, EntitySpawnReason spawnReason, @Nullable SpawnGroupData entityData
-    ) {
+    public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, EntitySpawnReason spawnReason, @Nullable SpawnGroupData entityData) {
         this.setCanJoinRaid(this.getType() != EntityType.WITCH || spawnReason != EntitySpawnReason.NATURAL);
         return super.finalizeSpawn(world, difficulty, spawnReason, entityData);
     }
 
     public abstract SoundEvent getCelebrateSound();
 
-    public class HoldGroundAttackGoal extends Goal {
-        private final Raider mob;
-        private final float hostileRadiusSqr;
-        public final TargetingConditions shoutTargeting = TargetingConditions.forNonCombat().range(8.0).ignoreLineOfSight().ignoreInvisibilityTesting();
-
-        public HoldGroundAttackGoal(final AbstractIllager illager, final float distance) {
-            this.mob = illager;
-            this.hostileRadiusSqr = distance * distance;
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
-        }
-
-        @Override
-        public boolean canUse() {
-            LivingEntity livingEntity = this.mob.getLastHurtByMob();
-            return this.mob.getCurrentRaid() == null
-                && this.mob.isPatrolling()
-                && this.mob.getTarget() != null
-                && !this.mob.isAggressive()
-                && (livingEntity == null || livingEntity.getType() != EntityType.PLAYER);
-        }
-
-        @Override
-        public void start() {
-            super.start();
-            this.mob.getNavigation().stop();
-
-            for (Raider raider : getServerLevel(this.mob)
-                .getNearbyEntities(Raider.class, this.shoutTargeting, this.mob, this.mob.getBoundingBox().inflate(8.0, 8.0, 8.0))) {
-                raider.setTarget(this.mob.getTarget());
-            }
-        }
-
-        @Override
-        public void stop() {
-            super.stop();
-            LivingEntity livingEntity = this.mob.getTarget();
-            if (livingEntity != null) {
-                for (Raider raider : getServerLevel(this.mob)
-                    .getNearbyEntities(Raider.class, this.shoutTargeting, this.mob, this.mob.getBoundingBox().inflate(8.0, 8.0, 8.0))) {
-                    raider.setTarget(livingEntity);
-                    raider.setAggressive(true);
-                }
-
-                this.mob.setAggressive(true);
-            }
-        }
-
-        @Override
-        public boolean requiresUpdateEveryTick() {
-            return true;
-        }
-
-        @Override
-        public void tick() {
-            LivingEntity livingEntity = this.mob.getTarget();
-            if (livingEntity != null) {
-                if (this.mob.distanceToSqr(livingEntity) > (double)this.hostileRadiusSqr) {
-                    this.mob.getLookControl().setLookAt(livingEntity, 30.0F, 30.0F);
-                    if (this.mob.random.nextInt(50) == 0) {
-                        this.mob.playAmbientSound();
-                    }
-                } else {
-                    this.mob.setAggressive(true);
-                }
-
-                super.tick();
-            }
-        }
-    }
-
     public class ObtainRaidLeaderBannerGoal<T extends Raider> extends Goal {
+
         private final T mob;
         private Int2LongOpenHashMap unreachableBannerCache = new Int2LongOpenHashMap();
         @Nullable
@@ -346,8 +300,8 @@
         @Nullable
         private ItemEntity pursuedBannerItemEntity;
 
-        public ObtainRaidLeaderBannerGoal(final T actor) {
-            this.mob = actor;
+        public ObtainRaidLeaderBannerGoal(final T entityraider) { // CraftBukkit - decompile error
+            this.mob = entityraider;
             this.setFlags(EnumSet.of(Goal.Flag.MOVE));
         }
 
@@ -356,61 +310,60 @@
             if (this.cannotPickUpBanner()) {
                 return false;
             } else {
-                Int2LongOpenHashMap int2LongOpenHashMap = new Int2LongOpenHashMap();
-                double d = Raider.this.getAttributeValue(Attributes.FOLLOW_RANGE);
+                Int2LongOpenHashMap int2longopenhashmap = new Int2LongOpenHashMap();
+                double d0 = Raider.this.getAttributeValue(Attributes.FOLLOW_RANGE);
+                List<ItemEntity> list = this.mob.level().getEntitiesOfClass(ItemEntity.class, this.mob.getBoundingBox().inflate(d0, 8.0D, d0), Raider.ALLOWED_ITEMS);
+                Iterator iterator = list.iterator();
 
-                for (ItemEntity itemEntity : this.mob
-                    .level()
-                    .getEntitiesOfClass(ItemEntity.class, this.mob.getBoundingBox().inflate(d, 8.0, d), Raider.ALLOWED_ITEMS)) {
-                    long l = this.unreachableBannerCache.getOrDefault(itemEntity.getId(), Long.MIN_VALUE);
-                    if (Raider.this.level().getGameTime() < l) {
-                        int2LongOpenHashMap.put(itemEntity.getId(), l);
+                while (iterator.hasNext()) {
+                    ItemEntity entityitem = (ItemEntity) iterator.next();
+                    long i = this.unreachableBannerCache.getOrDefault(entityitem.getId(), Long.MIN_VALUE);
+
+                    if (Raider.this.level().getGameTime() < i) {
+                        int2longopenhashmap.put(entityitem.getId(), i);
                     } else {
-                        Path path = this.mob.getNavigation().createPath(itemEntity, 1);
-                        if (path != null && path.canReach()) {
-                            this.pathToBanner = path;
-                            this.pursuedBannerItemEntity = itemEntity;
+                        Path pathentity = this.mob.getNavigation().createPath((Entity) entityitem, 1);
+
+                        if (pathentity != null && pathentity.canReach()) {
+                            this.pathToBanner = pathentity;
+                            this.pursuedBannerItemEntity = entityitem;
                             return true;
                         }
 
-                        int2LongOpenHashMap.put(itemEntity.getId(), Raider.this.level().getGameTime() + 600L);
+                        int2longopenhashmap.put(entityitem.getId(), Raider.this.level().getGameTime() + 600L);
                     }
                 }
 
-                this.unreachableBannerCache = int2LongOpenHashMap;
+                this.unreachableBannerCache = int2longopenhashmap;
                 return false;
             }
         }
 
         @Override
         public boolean canContinueToUse() {
-            return this.pursuedBannerItemEntity != null
-                && this.pathToBanner != null
-                && !this.pursuedBannerItemEntity.isRemoved()
-                && !this.pathToBanner.isDone()
-                && !this.cannotPickUpBanner();
+            return this.pursuedBannerItemEntity != null && this.pathToBanner != null ? (this.pursuedBannerItemEntity.isRemoved() ? false : (this.pathToBanner.isDone() ? false : !this.cannotPickUpBanner())) : false;
         }
 
         private boolean cannotPickUpBanner() {
+            if (!getServerLevel(this.mob).getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_MOBGRIEFING) || !this.mob.canPickUpLoot()) return false; // Paper - respect game and entity rules for picking up items
             if (!this.mob.hasActiveRaid()) {
                 return true;
             } else if (this.mob.getCurrentRaid().isOver()) {
                 return true;
             } else if (!this.mob.canBeLeader()) {
                 return true;
-            } else if (ItemStack.matches(
-                this.mob.getItemBySlot(EquipmentSlot.HEAD), Raid.getOminousBannerInstance(this.mob.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN))
-            )) {
+            } else if (ItemStack.matches(this.mob.getItemBySlot(EquipmentSlot.HEAD), Raid.getOminousBannerInstance(this.mob.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)))) {
                 return true;
             } else {
-                Raider raider = Raider.this.raid.getLeader(this.mob.getWave());
-                return raider != null && raider.isAlive();
+                Raider entityraider = Raider.this.raid.getLeader(this.mob.getWave());
+
+                return entityraider != null && entityraider.isAlive();
             }
         }
 
         @Override
         public void start() {
-            this.mob.getNavigation().moveTo(this.pathToBanner, 1.15F);
+            this.mob.getNavigation().moveTo(this.pathToBanner, 1.149999976158142D);
         }
 
         @Override
@@ -421,53 +374,15 @@
 
         @Override
         public void tick() {
-            if (this.pursuedBannerItemEntity != null && this.pursuedBannerItemEntity.closerThan(this.mob, 1.414)) {
+            if (this.pursuedBannerItemEntity != null && this.pursuedBannerItemEntity.closerThan(this.mob, 1.414D)) {
                 this.mob.pickUpItem(getServerLevel(Raider.this.level()), this.pursuedBannerItemEntity);
             }
-        }
-    }
-
-    public class RaiderCelebration extends Goal {
-        private final Raider mob;
-
-        RaiderCelebration(final Raider raider) {
-            this.mob = raider;
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE));
-        }
-
-        @Override
-        public boolean canUse() {
-            Raid raid = this.mob.getCurrentRaid();
-            return this.mob.isAlive() && this.mob.getTarget() == null && raid != null && raid.isLoss();
-        }
-
-        @Override
-        public void start() {
-            this.mob.setCelebrating(true);
-            super.start();
-        }
 
-        @Override
-        public void stop() {
-            this.mob.setCelebrating(false);
-            super.stop();
-        }
-
-        @Override
-        public void tick() {
-            if (!this.mob.isSilent() && this.mob.random.nextInt(this.adjustedTickDelay(100)) == 0) {
-                Raider.this.makeSound(Raider.this.getCelebrateSound());
-            }
-
-            if (!this.mob.isPassenger() && this.mob.random.nextInt(this.adjustedTickDelay(50)) == 0) {
-                this.mob.getJumpControl().jump();
-            }
-
-            super.tick();
         }
     }
 
-    static class RaiderMoveThroughVillageGoal extends Goal {
+    private static class RaiderMoveThroughVillageGoal extends Goal {
+
         private final Raider raider;
         private final double speedModifier;
         private BlockPos poiPos;
@@ -493,73 +408,203 @@
         }
 
         private boolean hasSuitablePoi() {
-            ServerLevel serverLevel = (ServerLevel)this.raider.level();
-            BlockPos blockPos = this.raider.blockPosition();
-            Optional<BlockPos> optional = serverLevel.getPoiManager()
-                .getRandom(holder -> holder.is(PoiTypes.HOME), this::hasNotVisited, PoiManager.Occupancy.ANY, blockPos, 48, this.raider.random);
+            ServerLevel worldserver = (ServerLevel) this.raider.level();
+            BlockPos blockposition = this.raider.blockPosition();
+            Optional<BlockPos> optional = worldserver.getPoiManager().getRandom((holder) -> {
+                return holder.is(PoiTypes.HOME);
+            }, this::hasNotVisited, PoiManager.Occupancy.ANY, blockposition, 48, this.raider.random);
+
             if (optional.isEmpty()) {
                 return false;
             } else {
-                this.poiPos = optional.get().immutable();
+                this.poiPos = ((BlockPos) optional.get()).immutable();
                 return true;
             }
         }
 
         @Override
         public boolean canContinueToUse() {
-            return !this.raider.getNavigation().isDone()
-                && this.raider.getTarget() == null
-                && !this.poiPos.closerToCenterThan(this.raider.position(), (double)(this.raider.getBbWidth() + (float)this.distanceToPoi))
-                && !this.stuck;
+            return this.raider.getNavigation().isDone() ? false : this.raider.getTarget() == null && !this.poiPos.closerToCenterThan(this.raider.position(), (double) (this.raider.getBbWidth() + (float) this.distanceToPoi)) && !this.stuck;
         }
 
         @Override
         public void stop() {
-            if (this.poiPos.closerToCenterThan(this.raider.position(), (double)this.distanceToPoi)) {
+            if (this.poiPos.closerToCenterThan(this.raider.position(), (double) this.distanceToPoi)) {
                 this.visited.add(this.poiPos);
             }
+
         }
 
         @Override
         public void start() {
             super.start();
             this.raider.setNoActionTime(0);
-            this.raider.getNavigation().moveTo((double)this.poiPos.getX(), (double)this.poiPos.getY(), (double)this.poiPos.getZ(), this.speedModifier);
+            this.raider.getNavigation().moveTo((double) this.poiPos.getX(), (double) this.poiPos.getY(), (double) this.poiPos.getZ(), this.speedModifier);
             this.stuck = false;
         }
 
         @Override
         public void tick() {
             if (this.raider.getNavigation().isDone()) {
-                Vec3 vec3 = Vec3.atBottomCenterOf(this.poiPos);
-                Vec3 vec32 = DefaultRandomPos.getPosTowards(this.raider, 16, 7, vec3, (float) (Math.PI / 10));
-                if (vec32 == null) {
-                    vec32 = DefaultRandomPos.getPosTowards(this.raider, 8, 7, vec3, (float) (Math.PI / 2));
+                Vec3 vec3d = Vec3.atBottomCenterOf(this.poiPos);
+                Vec3 vec3d1 = DefaultRandomPos.getPosTowards(this.raider, 16, 7, vec3d, 0.3141592741012573D);
+
+                if (vec3d1 == null) {
+                    vec3d1 = DefaultRandomPos.getPosTowards(this.raider, 8, 7, vec3d, 1.5707963705062866D);
                 }
 
-                if (vec32 == null) {
+                if (vec3d1 == null) {
                     this.stuck = true;
                     return;
                 }
 
-                this.raider.getNavigation().moveTo(vec32.x, vec32.y, vec32.z, this.speedModifier);
+                this.raider.getNavigation().moveTo(vec3d1.x, vec3d1.y, vec3d1.z, this.speedModifier);
             }
+
         }
 
         private boolean hasNotVisited(BlockPos pos) {
-            for (BlockPos blockPos : this.visited) {
-                if (Objects.equals(pos, blockPos)) {
-                    return false;
+            Iterator iterator = this.visited.iterator();
+
+            BlockPos blockposition1;
+
+            do {
+                if (!iterator.hasNext()) {
+                    return true;
                 }
-            }
 
-            return true;
+                blockposition1 = (BlockPos) iterator.next();
+            } while (!Objects.equals(pos, blockposition1));
+
+            return false;
         }
 
         private void updateVisited() {
             if (this.visited.size() > 2) {
                 this.visited.remove(0);
             }
+
+        }
+    }
+
+    public class RaiderCelebration extends Goal {
+
+        private final Raider mob;
+
+        RaiderCelebration(final Raider entityraider) {
+            this.mob = entityraider;
+            this.setFlags(EnumSet.of(Goal.Flag.MOVE));
+        }
+
+        @Override
+        public boolean canUse() {
+            Raid raid = this.mob.getCurrentRaid();
+
+            return this.mob.isAlive() && this.mob.getTarget() == null && raid != null && raid.isLoss();
+        }
+
+        @Override
+        public void start() {
+            this.mob.setCelebrating(true);
+            super.start();
+        }
+
+        @Override
+        public void stop() {
+            this.mob.setCelebrating(false);
+            super.stop();
+        }
+
+        @Override
+        public void tick() {
+            if (!this.mob.isSilent() && this.mob.random.nextInt(this.adjustedTickDelay(100)) == 0) {
+                Raider.this.makeSound(Raider.this.getCelebrateSound());
+            }
+
+            if (!this.mob.isPassenger() && this.mob.random.nextInt(this.adjustedTickDelay(50)) == 0) {
+                this.mob.getJumpControl().jump();
+            }
+
+            super.tick();
+        }
+    }
+
+    public class HoldGroundAttackGoal extends Goal {
+
+        private final Raider mob;
+        private final float hostileRadiusSqr;
+        public final TargetingConditions shoutTargeting = TargetingConditions.forNonCombat().range(8.0D).ignoreLineOfSight().ignoreInvisibilityTesting();
+
+        public HoldGroundAttackGoal(final AbstractIllager entityillagerabstract, final float f) { // CraftBukkit - decompile error
+            this.mob = entityillagerabstract;
+            this.hostileRadiusSqr = f * f;
+            this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
+        }
+
+        @Override
+        public boolean canUse() {
+            LivingEntity entityliving = this.mob.getLastHurtByMob();
+
+            return this.mob.getCurrentRaid() == null && this.mob.isPatrolling() && this.mob.getTarget() != null && !this.mob.isAggressive() && (entityliving == null || entityliving.getType() != EntityType.PLAYER);
+        }
+
+        @Override
+        public void start() {
+            super.start();
+            this.mob.getNavigation().stop();
+            List<Raider> list = getServerLevel((Entity) this.mob).getNearbyEntities(Raider.class, this.shoutTargeting, this.mob, this.mob.getBoundingBox().inflate(8.0D, 8.0D, 8.0D));
+            Iterator iterator = list.iterator();
+
+            while (iterator.hasNext()) {
+                Raider entityraider = (Raider) iterator.next();
+
+                entityraider.setTarget(this.mob.getTarget(), org.bukkit.event.entity.EntityTargetEvent.TargetReason.FOLLOW_LEADER, true); // CraftBukkit
+            }
+
+        }
+
+        @Override
+        public void stop() {
+            super.stop();
+            LivingEntity entityliving = this.mob.getTarget();
+
+            if (entityliving != null) {
+                List<Raider> list = getServerLevel((Entity) this.mob).getNearbyEntities(Raider.class, this.shoutTargeting, this.mob, this.mob.getBoundingBox().inflate(8.0D, 8.0D, 8.0D));
+                Iterator iterator = list.iterator();
+
+                while (iterator.hasNext()) {
+                    Raider entityraider = (Raider) iterator.next();
+
+                    entityraider.setTarget(this.mob.getTarget(), org.bukkit.event.entity.EntityTargetEvent.TargetReason.FOLLOW_LEADER, true); // CraftBukkit
+                    entityraider.setAggressive(true);
+                }
+
+                this.mob.setAggressive(true);
+            }
+
+        }
+
+        @Override
+        public boolean requiresUpdateEveryTick() {
+            return true;
+        }
+
+        @Override
+        public void tick() {
+            LivingEntity entityliving = this.mob.getTarget();
+
+            if (entityliving != null) {
+                if (this.mob.distanceToSqr((Entity) entityliving) > (double) this.hostileRadiusSqr) {
+                    this.mob.getLookControl().setLookAt(entityliving, 30.0F, 30.0F);
+                    if (this.mob.random.nextInt(50) == 0) {
+                        this.mob.playAmbientSound();
+                    }
+                } else {
+                    this.mob.setAggressive(true);
+                }
+
+                super.tick();
+            }
         }
     }
 }
