--- a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -1,8 +1,10 @@
 package net.minecraft.world.level.block.entity;
 
 import com.google.common.collect.Lists;
-import it.unimi.dsi.fastutil.objects.Reference2IntOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import it.unimi.dsi.fastutil.objects.Reference2IntMap.Entry;
+import it.unimi.dsi.fastutil.objects.Reference2IntOpenHashMap;
+import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
@@ -20,7 +22,6 @@
 import net.minecraft.world.ContainerHelper;
 import net.minecraft.world.WorldlyContainer;
 import net.minecraft.world.entity.ExperienceOrb;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.player.StackedItemContents;
 import net.minecraft.world.inventory.ContainerData;
 import net.minecraft.world.inventory.RecipeCraftingHolder;
@@ -34,12 +35,28 @@
 import net.minecraft.world.item.crafting.RecipeManager;
 import net.minecraft.world.item.crafting.RecipeType;
 import net.minecraft.world.item.crafting.SingleRecipeInput;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.AbstractFurnaceBlock;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftItemType;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockExpEvent;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceExtractEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
+import org.bukkit.event.inventory.FurnaceStartSmeltEvent;
+import org.bukkit.inventory.CookingRecipe;
+// CraftBukkit end
 
 public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, RecipeCraftingHolder, StackedContentsCompatible {
+
     protected static final int SLOT_INPUT = 0;
     protected static final int SLOT_FUEL = 1;
     protected static final int SLOT_RESULT = 2;
@@ -54,60 +71,96 @@
     public static final int BURN_TIME_STANDARD = 200;
     public static final int BURN_COOL_SPEED = 2;
     public static final int UNKNOWN_LIT_DURATION = 0;
-    protected NonNullList<ItemStack> items = NonNullList.withSize(3, ItemStack.EMPTY);
+    protected NonNullList<ItemStack> items;
     public int litTime;
-    int litDuration = 0;
+    int litDuration;
+    public double cookSpeedMultiplier = 1.0; // Paper - cook speed multiplier API
     public int cookingProgress;
     public int cookingTotalTime;
-    protected final ContainerData dataAccess = new ContainerData() {
-        @Override
-        public int get(int index) {
-            switch (index) {
-                case 0:
-                    return AbstractFurnaceBlockEntity.this.litTime;
-                case 1:
-                    return AbstractFurnaceBlockEntity.this.litDuration;
-                case 2:
-                    return AbstractFurnaceBlockEntity.this.cookingProgress;
-                case 3:
-                    return AbstractFurnaceBlockEntity.this.cookingTotalTime;
-                default:
-                    return 0;
+    protected final ContainerData dataAccess;
+    public final Reference2IntOpenHashMap<ResourceKey<Recipe<?>>> recipesUsed;
+    private final RecipeManager.CachedCheck<SingleRecipeInput, ? extends AbstractCookingRecipe> quickCheck;
+    public final RecipeType<? extends AbstractCookingRecipe> recipeType; // Paper - cook speed multiplier API
+
+    protected AbstractFurnaceBlockEntity(BlockEntityType<?> blockEntityType, BlockPos pos, BlockState state, RecipeType<? extends AbstractCookingRecipe> recipeType) {
+        super(blockEntityType, pos, state);
+        this.items = NonNullList.withSize(3, ItemStack.EMPTY);
+        this.litDuration = 0;
+        this.dataAccess = new ContainerData() {
+            @Override
+            public int get(int index) {
+                switch (index) {
+                    case 0:
+                        return AbstractFurnaceBlockEntity.this.litTime;
+                    case 1:
+                        return AbstractFurnaceBlockEntity.this.litDuration;
+                    case 2:
+                        return AbstractFurnaceBlockEntity.this.cookingProgress;
+                    case 3:
+                        return AbstractFurnaceBlockEntity.this.cookingTotalTime;
+                    default:
+                        return 0;
+                }
             }
-        }
 
-        @Override
-        public void set(int index, int value) {
-            switch (index) {
-                case 0:
-                    AbstractFurnaceBlockEntity.this.litTime = value;
-                    break;
-                case 1:
-                    AbstractFurnaceBlockEntity.this.litDuration = value;
-                    break;
-                case 2:
-                    AbstractFurnaceBlockEntity.this.cookingProgress = value;
-                    break;
-                case 3:
-                    AbstractFurnaceBlockEntity.this.cookingTotalTime = value;
+            @Override
+            public void set(int index, int value) {
+                switch (index) {
+                    case 0:
+                        AbstractFurnaceBlockEntity.this.litTime = value;
+                        break;
+                    case 1:
+                        AbstractFurnaceBlockEntity.this.litDuration = value;
+                        break;
+                    case 2:
+                        AbstractFurnaceBlockEntity.this.cookingProgress = value;
+                        break;
+                    case 3:
+                        AbstractFurnaceBlockEntity.this.cookingTotalTime = value;
+                }
+
             }
-        }
 
-        @Override
-        public int getCount() {
-            return 4;
-        }
-    };
-    public final Reference2IntOpenHashMap<ResourceKey<Recipe<?>>> recipesUsed = new Reference2IntOpenHashMap<>();
-    private final RecipeManager.CachedCheck<SingleRecipeInput, ? extends AbstractCookingRecipe> quickCheck;
+            @Override
+            public int getCount() {
+                return 4;
+            }
+        };
+        this.recipesUsed = new Reference2IntOpenHashMap();
+        this.quickCheck = RecipeManager.createCheck((RecipeType<AbstractCookingRecipe>) recipeType); // CraftBukkit - decompile error // Eclipse fail
+        this.recipeType = recipeType; // Paper - cook speed multiplier API
+    }
 
-    protected AbstractFurnaceBlockEntity(
-        BlockEntityType<?> blockEntityType, BlockPos pos, BlockState state, RecipeType<? extends AbstractCookingRecipe> recipeType
-    ) {
-        super(blockEntityType, pos, state);
-        this.quickCheck = RecipeManager.createCheck(recipeType);
+    // CraftBukkit start - add fields and methods
+    private int maxStack = MAX_STACK;
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        this.transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        this.transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return this.transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return this.maxStack;
     }
 
+    public void setMaxStackSize(int size) {
+        this.maxStack = size;
+    }
+    // CraftBukkit end
+
     private boolean isLit() {
         return this.litTime > 0;
     }
@@ -121,141 +174,202 @@
         this.cookingProgress = nbt.getShort("CookTime");
         this.cookingTotalTime = nbt.getShort("CookTimeTotal");
         this.litDuration = 0;
-        CompoundTag compoundTag = nbt.getCompound("RecipesUsed");
+        CompoundTag nbttagcompound1 = nbt.getCompound("RecipesUsed");
+        Iterator iterator = nbttagcompound1.getAllKeys().iterator();
 
-        for (String string : compoundTag.getAllKeys()) {
-            this.recipesUsed.put(ResourceKey.create(Registries.RECIPE, ResourceLocation.parse(string)), compoundTag.getInt(string));
+        while (iterator.hasNext()) {
+            String s = (String) iterator.next();
+
+            // Paper start - Validate ResourceLocation
+            final ResourceLocation resourceLocation = ResourceLocation.tryParse(s);
+            if (resourceLocation != null) {
+                this.recipesUsed.put(ResourceKey.create(Registries.RECIPE, resourceLocation), nbttagcompound1.getInt(s));
+            }
         }
+
+        // Paper start - cook speed multiplier API
+        if (nbt.contains("Paper.CookSpeedMultiplier")) {
+            this.cookSpeedMultiplier = nbt.getDouble("Paper.CookSpeedMultiplier");
+        }
+        // Paper end - cook speed multiplier API
     }
 
     @Override
     protected void saveAdditional(CompoundTag nbt, HolderLookup.Provider registries) {
         super.saveAdditional(nbt, registries);
-        nbt.putShort("BurnTime", (short)this.litTime);
-        nbt.putShort("CookTime", (short)this.cookingProgress);
-        nbt.putShort("CookTimeTotal", (short)this.cookingTotalTime);
+        nbt.putShort("BurnTime", (short) this.litTime);
+        nbt.putShort("CookTime", (short) this.cookingProgress);
+        nbt.putShort("CookTimeTotal", (short) this.cookingTotalTime);
+        nbt.putDouble("Paper.CookSpeedMultiplier", this.cookSpeedMultiplier); // Paper - cook speed multiplier API
         ContainerHelper.saveAllItems(nbt, this.items, registries);
-        CompoundTag compoundTag = new CompoundTag();
-        this.recipesUsed.forEach((recipeKey, count) -> compoundTag.putInt(recipeKey.location().toString(), count));
-        nbt.put("RecipesUsed", compoundTag);
+        CompoundTag nbttagcompound1 = new CompoundTag();
+
+        this.recipesUsed.forEach((resourcekey, integer) -> {
+            nbttagcompound1.putInt(resourcekey.location().toString(), integer);
+        });
+        nbt.put("RecipesUsed", nbttagcompound1);
     }
 
     public static void serverTick(ServerLevel world, BlockPos pos, BlockState state, AbstractFurnaceBlockEntity blockEntity) {
-        boolean bl = blockEntity.isLit();
-        boolean bl2 = false;
+        boolean flag = blockEntity.isLit();
+        boolean flag1 = false;
+
         if (blockEntity.isLit()) {
-            blockEntity.litTime--;
+            --blockEntity.litTime;
         }
 
-        ItemStack itemStack = blockEntity.items.get(1);
-        ItemStack itemStack2 = blockEntity.items.get(0);
-        boolean bl3 = !itemStack2.isEmpty();
-        boolean bl4 = !itemStack.isEmpty();
+        ItemStack itemstack = (ItemStack) blockEntity.items.get(1);
+        ItemStack itemstack1 = (ItemStack) blockEntity.items.get(0);
+        boolean flag2 = !itemstack1.isEmpty();
+        boolean flag3 = !itemstack.isEmpty();
+
         if (blockEntity.litDuration == 0) {
-            blockEntity.litDuration = blockEntity.getBurnDuration(world.fuelValues(), itemStack);
+            blockEntity.litDuration = blockEntity.getBurnDuration(world.fuelValues(), itemstack);
         }
 
-        if (blockEntity.isLit() || bl4 && bl3) {
-            SingleRecipeInput singleRecipeInput = new SingleRecipeInput(itemStack2);
-            RecipeHolder<? extends AbstractCookingRecipe> recipeHolder;
-            if (bl3) {
-                recipeHolder = blockEntity.quickCheck.getRecipeFor(singleRecipeInput, world).orElse(null);
+        if (!blockEntity.isLit() && (!flag3 || !flag2)) {
+            if (!blockEntity.isLit() && blockEntity.cookingProgress > 0) {
+                blockEntity.cookingProgress = Mth.clamp(blockEntity.cookingProgress - 2, 0, blockEntity.cookingTotalTime);
+            }
+        } else {
+            SingleRecipeInput singlerecipeinput = new SingleRecipeInput(itemstack1);
+            RecipeHolder recipeholder;
+
+            if (flag2) {
+                recipeholder = (RecipeHolder) blockEntity.quickCheck.getRecipeFor(singlerecipeinput, world).orElse(null); // CraftBukkit - decompile error
             } else {
-                recipeHolder = null;
+                recipeholder = null;
             }
 
             int i = blockEntity.getMaxStackSize();
-            if (!blockEntity.isLit() && canBurn(world.registryAccess(), recipeHolder, singleRecipeInput, blockEntity.items, i)) {
-                blockEntity.litTime = blockEntity.getBurnDuration(world.fuelValues(), itemStack);
+
+            if (!blockEntity.isLit() && AbstractFurnaceBlockEntity.canBurn(world.registryAccess(), recipeholder, singlerecipeinput, blockEntity.items, i)) {
+                // CraftBukkit start
+                CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
+
+                FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(CraftBlock.at(world, pos), fuel, blockEntity.getBurnDuration(world.fuelValues(), itemstack));
+                world.getCraftServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+                if (furnaceBurnEvent.isCancelled()) {
+                    return;
+                }
+
+                blockEntity.litTime = furnaceBurnEvent.getBurnTime();
                 blockEntity.litDuration = blockEntity.litTime;
-                if (blockEntity.isLit()) {
-                    bl2 = true;
-                    if (bl4) {
-                        Item item = itemStack.getItem();
-                        itemStack.shrink(1);
-                        if (itemStack.isEmpty()) {
+                if (blockEntity.isLit() && furnaceBurnEvent.isBurning()) {
+                    // CraftBukkit end
+                    flag1 = true;
+                    if (flag3 && furnaceBurnEvent.willConsumeFuel()) { // Paper - add consumeFuel to FurnaceBurnEvent
+                        Item item = itemstack.getItem();
+
+                        itemstack.shrink(1);
+                        if (itemstack.isEmpty()) {
                             blockEntity.items.set(1, item.getCraftingRemainder());
                         }
                     }
                 }
             }
 
-            if (blockEntity.isLit() && canBurn(world.registryAccess(), recipeHolder, singleRecipeInput, blockEntity.items, i)) {
-                blockEntity.cookingProgress++;
-                if (blockEntity.cookingProgress == blockEntity.cookingTotalTime) {
+            if (blockEntity.isLit() && AbstractFurnaceBlockEntity.canBurn(world.registryAccess(), recipeholder, singlerecipeinput, blockEntity.items, i)) {
+                // CraftBukkit start
+                if (recipeholder != null && blockEntity.cookingProgress == 0) {
+                    CraftItemStack source = CraftItemStack.asCraftMirror(blockEntity.items.get(0));
+                    CookingRecipe<?> recipe = (CookingRecipe<?>) recipeholder.toBukkitRecipe();
+
+                    FurnaceStartSmeltEvent event = new FurnaceStartSmeltEvent(CraftBlock.at(world, pos), source, recipe, AbstractFurnaceBlockEntity.getTotalCookTime(world, blockEntity, blockEntity.recipeType, blockEntity.cookSpeedMultiplier)); // Paper - cook speed multiplier API
+                    world.getCraftServer().getPluginManager().callEvent(event);
+
+                    blockEntity.cookingTotalTime = event.getTotalCookTime();
+                }
+                // CraftBukkit end
+
+                ++blockEntity.cookingProgress;
+                if (blockEntity.cookingProgress >= blockEntity.cookingTotalTime) { // Paper - cook speed multiplier API
                     blockEntity.cookingProgress = 0;
-                    blockEntity.cookingTotalTime = getTotalCookTime(world, blockEntity);
-                    if (burn(world.registryAccess(), recipeHolder, singleRecipeInput, blockEntity.items, i)) {
-                        blockEntity.setRecipeUsed(recipeHolder);
+                    blockEntity.cookingTotalTime = AbstractFurnaceBlockEntity.getTotalCookTime(world, blockEntity, blockEntity.recipeType, blockEntity.cookSpeedMultiplier); // Paper - cook speed multiplier API
+                    if (AbstractFurnaceBlockEntity.burn(blockEntity.level, blockEntity.worldPosition, world.registryAccess(), recipeholder, singlerecipeinput, blockEntity.items, i)) { // CraftBukkit
+                        blockEntity.setRecipeUsed(recipeholder);
                     }
 
-                    bl2 = true;
+                    flag1 = true;
                 }
             } else {
                 blockEntity.cookingProgress = 0;
             }
-        } else if (!blockEntity.isLit() && blockEntity.cookingProgress > 0) {
-            blockEntity.cookingProgress = Mth.clamp(blockEntity.cookingProgress - 2, 0, blockEntity.cookingTotalTime);
         }
 
-        if (bl != blockEntity.isLit()) {
-            bl2 = true;
-            state = state.setValue(AbstractFurnaceBlock.LIT, Boolean.valueOf(blockEntity.isLit()));
+        if (flag != blockEntity.isLit()) {
+            flag1 = true;
+            state = (BlockState) state.setValue(AbstractFurnaceBlock.LIT, blockEntity.isLit());
             world.setBlock(pos, state, 3);
         }
 
-        if (bl2) {
+        if (flag1) {
             setChanged(world, pos, state);
         }
+
     }
 
-    private static boolean canBurn(
-        RegistryAccess dynamicRegistryManager,
-        @Nullable RecipeHolder<? extends AbstractCookingRecipe> recipe,
-        SingleRecipeInput input,
-        NonNullList<ItemStack> inventory,
-        int maxCount
-    ) {
-        if (!inventory.get(0).isEmpty() && recipe != null) {
-            ItemStack itemStack = recipe.value().assemble(input, dynamicRegistryManager);
-            if (itemStack.isEmpty()) {
+    private static boolean canBurn(RegistryAccess dynamicRegistryManager, @Nullable RecipeHolder<? extends AbstractCookingRecipe> recipe, SingleRecipeInput input, NonNullList<ItemStack> inventory, int maxCount) {
+        if (!((ItemStack) inventory.get(0)).isEmpty() && recipe != null) {
+            ItemStack itemstack = ((AbstractCookingRecipe) recipe.value()).assemble(input, dynamicRegistryManager);
+
+            if (itemstack.isEmpty()) {
                 return false;
             } else {
-                ItemStack itemStack2 = inventory.get(2);
-                return itemStack2.isEmpty()
-                    || ItemStack.isSameItemSameComponents(itemStack2, itemStack)
-                        && (
-                            itemStack2.getCount() < maxCount && itemStack2.getCount() < itemStack2.getMaxStackSize()
-                                || itemStack2.getCount() < itemStack.getMaxStackSize()
-                        );
+                ItemStack itemstack1 = (ItemStack) inventory.get(2);
+
+                return itemstack1.isEmpty() ? true : (!ItemStack.isSameItemSameComponents(itemstack1, itemstack) ? false : (itemstack1.getCount() < maxCount && itemstack1.getCount() < itemstack1.getMaxStackSize() ? true : itemstack1.getCount() < itemstack.getMaxStackSize()));
             }
         } else {
             return false;
         }
     }
 
-    private static boolean burn(
-        RegistryAccess dynamicRegisryManager,
-        @Nullable RecipeHolder<? extends AbstractCookingRecipe> recipe,
-        SingleRecipeInput input,
-        NonNullList<ItemStack> inventory,
-        int maxCount
-    ) {
-        if (recipe != null && canBurn(dynamicRegisryManager, recipe, input, inventory, maxCount)) {
-            ItemStack itemStack = inventory.get(0);
-            ItemStack itemStack2 = recipe.value().assemble(input, dynamicRegisryManager);
-            ItemStack itemStack3 = inventory.get(2);
-            if (itemStack3.isEmpty()) {
-                inventory.set(2, itemStack2.copy());
-            } else if (ItemStack.isSameItemSameComponents(itemStack3, itemStack2)) {
-                itemStack3.grow(1);
+    private static boolean burn(Level world, BlockPos blockposition, RegistryAccess iregistrycustom, @Nullable RecipeHolder<? extends AbstractCookingRecipe> recipeholder, SingleRecipeInput singlerecipeinput, NonNullList<ItemStack> nonnulllist, int i) { // CraftBukkit
+        if (recipeholder != null && AbstractFurnaceBlockEntity.canBurn(iregistrycustom, recipeholder, singlerecipeinput, nonnulllist, i)) {
+            ItemStack itemstack = (ItemStack) nonnulllist.get(0);
+            ItemStack itemstack1 = ((AbstractCookingRecipe) recipeholder.value()).assemble(singlerecipeinput, iregistrycustom);
+            ItemStack itemstack2 = (ItemStack) nonnulllist.get(2);
+
+            // CraftBukkit start - fire FurnaceSmeltEvent
+            CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
+            org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
+
+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(CraftBlock.at(world, blockposition), source, result, (org.bukkit.inventory.CookingRecipe<?>) recipeholder.toBukkitRecipe()); // Paper - Add recipe to cook events
+            world.getCraftServer().getPluginManager().callEvent(furnaceSmeltEvent);
+
+            if (furnaceSmeltEvent.isCancelled()) {
+                return false;
             }
 
-            if (itemStack.is(Blocks.WET_SPONGE.asItem()) && !inventory.get(1).isEmpty() && inventory.get(1).is(Items.BUCKET)) {
-                inventory.set(1, new ItemStack(Items.WATER_BUCKET));
+            result = furnaceSmeltEvent.getResult();
+            itemstack1 = CraftItemStack.asNMSCopy(result);
+
+            if (!itemstack1.isEmpty()) {
+                if (itemstack2.isEmpty()) {
+                    nonnulllist.set(2, itemstack1.copy());
+                } else if (CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
+                    itemstack2.grow(itemstack1.getCount());
+                } else {
+                    return false;
+                }
             }
 
-            itemStack.shrink(1);
+            /*
+            if (itemstack2.isEmpty()) {
+                nonnulllist.set(2, itemstack1.copy());
+            } else if (ItemStack.isSameItemSameComponents(itemstack2, itemstack1)) {
+                itemstack2.grow(1);
+            }
+            */
+            // CraftBukkit end
+
+            if (itemstack.is(Blocks.WET_SPONGE.asItem()) && !((ItemStack) nonnulllist.get(1)).isEmpty() && ((ItemStack) nonnulllist.get(1)).is(Items.BUCKET)) {
+                nonnulllist.set(1, new ItemStack(Items.WATER_BUCKET));
+            }
+
+            itemstack.shrink(1);
             return true;
         } else {
             return false;
@@ -266,18 +380,19 @@
         return fuelRegistry.burnDuration(stack);
     }
 
-    public static int getTotalCookTime(ServerLevel world, AbstractFurnaceBlockEntity furnace) {
-        SingleRecipeInput singleRecipeInput = new SingleRecipeInput(furnace.getItem(0));
-        return furnace.quickCheck.getRecipeFor(singleRecipeInput, world).map(recipe -> recipe.value().cookingTime()).orElse(200);
+    public static int getTotalCookTime(@Nullable ServerLevel world, AbstractFurnaceBlockEntity furnace, RecipeType<? extends AbstractCookingRecipe> recipeType, double cookSpeedMultiplier) { // Paper - cook speed multiplier API
+        SingleRecipeInput singlerecipeinput = new SingleRecipeInput(furnace.getItem(0));
+
+        // Paper start - cook speed multiplier API
+        /* Scale the recipe's cooking time to the current cookSpeedMultiplier */
+        int cookTime = world != null ? furnace.quickCheck.getRecipeFor(singlerecipeinput, world).map(holder -> holder.value().cookingTime()).orElse(200) : (net.minecraft.server.MinecraftServer.getServer().getRecipeManager().getRecipeFor(recipeType, singlerecipeinput, world /* passing a null level here is safe. world is only used for map extending recipes which won't happen here */).map(holder -> holder.value().cookingTime()).orElse(200));
+        return (int) Math.ceil (cookTime / cookSpeedMultiplier);
+        // Paper end - cook speed multiplier API
     }
 
     @Override
     public int[] getSlotsForFace(Direction side) {
-        if (side == Direction.DOWN) {
-            return SLOTS_FOR_DOWN;
-        } else {
-            return side == Direction.UP ? SLOTS_FOR_UP : SLOTS_FOR_SIDES;
-        }
+        return side == Direction.DOWN ? AbstractFurnaceBlockEntity.SLOTS_FOR_DOWN : (side == Direction.UP ? AbstractFurnaceBlockEntity.SLOTS_FOR_UP : AbstractFurnaceBlockEntity.SLOTS_FOR_SIDES);
     }
 
     @Override
@@ -287,7 +402,7 @@
 
     @Override
     public boolean canTakeItemThroughFace(int slot, ItemStack stack, Direction dir) {
-        return dir != Direction.DOWN || slot != 1 || stack.is(Items.WATER_BUCKET) || stack.is(Items.BUCKET);
+        return dir == Direction.DOWN && slot == 1 ? stack.is(Items.WATER_BUCKET) || stack.is(Items.BUCKET) : true;
     }
 
     @Override
@@ -307,14 +422,21 @@
 
     @Override
     public void setItem(int slot, ItemStack stack) {
-        ItemStack itemStack = this.items.get(slot);
-        boolean bl = !stack.isEmpty() && ItemStack.isSameItemSameComponents(itemStack, stack);
+        ItemStack itemstack1 = (ItemStack) this.items.get(slot);
+        boolean flag = !stack.isEmpty() && ItemStack.isSameItemSameComponents(itemstack1, stack);
+
         this.items.set(slot, stack);
         stack.limitSize(this.getMaxStackSize(stack));
-        if (slot == 0 && !bl && this.level instanceof ServerLevel serverLevel) {
-            this.cookingTotalTime = getTotalCookTime(serverLevel, this);
-            this.cookingProgress = 0;
-            this.setChanged();
+        if (slot == 0 && !flag) {
+            Level world = this.level;
+
+            if (world instanceof ServerLevel) {
+                ServerLevel worldserver = (ServerLevel) world;
+
+                this.cookingTotalTime = AbstractFurnaceBlockEntity.getTotalCookTime(worldserver, this, this.recipeType, this.cookSpeedMultiplier); // Paper - cook speed multiplier API
+                this.cookingProgress = 0;
+                this.setChanged();
+            }
         }
     }
 
@@ -325,17 +447,20 @@
         } else if (slot != 1) {
             return true;
         } else {
-            ItemStack itemStack = this.items.get(1);
-            return this.level.fuelValues().isFuel(stack) || stack.is(Items.BUCKET) && !itemStack.is(Items.BUCKET);
+            ItemStack itemstack1 = (ItemStack) this.items.get(1);
+
+            return this.level.fuelValues().isFuel(stack) || stack.is(Items.BUCKET) && !itemstack1.is(Items.BUCKET);
         }
     }
 
     @Override
     public void setRecipeUsed(@Nullable RecipeHolder<?> recipe) {
         if (recipe != null) {
-            ResourceKey<Recipe<?>> resourceKey = recipe.id();
-            this.recipesUsed.addTo(resourceKey, 1);
+            ResourceKey<Recipe<?>> resourcekey = recipe.id();
+
+            this.recipesUsed.addTo(resourcekey, 1);
         }
+
     }
 
     @Nullable
@@ -345,16 +470,19 @@
     }
 
     @Override
-    public void awardUsedRecipes(Player player, List<ItemStack> ingredients) {
-    }
+    public void awardUsedRecipes(net.minecraft.world.entity.player.Player player, List<ItemStack> ingredients) {}
 
-    public void awardUsedRecipesAndPopExperience(ServerPlayer player) {
-        List<RecipeHolder<?>> list = this.getRecipesToAwardAndPopExperience(player.serverLevel(), player.position());
-        player.awardRecipes(list);
+    public void awardUsedRecipesAndPopExperience(ServerPlayer entityplayer, ItemStack itemstack, int amount) { // CraftBukkit
+        List<RecipeHolder<?>> list = this.getRecipesToAwardAndPopExperience(entityplayer.serverLevel(), entityplayer.position(), this.worldPosition, entityplayer, itemstack, amount); // CraftBukkit
 
-        for (RecipeHolder<?> recipeHolder : list) {
-            if (recipeHolder != null) {
-                player.triggerRecipeCrafted(recipeHolder, this.items);
+        entityplayer.awardRecipes(list);
+        Iterator iterator = list.iterator();
+
+        while (iterator.hasNext()) {
+            RecipeHolder<?> recipeholder = (RecipeHolder) iterator.next();
+
+            if (recipeholder != null) {
+                entityplayer.triggerRecipeCrafted(recipeholder, this.items);
             }
         }
 
@@ -362,32 +490,56 @@
     }
 
     public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel world, Vec3 pos) {
+        // CraftBukkit start
+        return this.getRecipesToAwardAndPopExperience(world, pos, this.worldPosition, null, null, 0);
+    }
+
+    public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel worldserver, Vec3 vec3d, BlockPos blockposition, ServerPlayer entityplayer, ItemStack itemstack, int amount) {
+        // CraftBukkit end
         List<RecipeHolder<?>> list = Lists.newArrayList();
+        ObjectIterator objectiterator = this.recipesUsed.reference2IntEntrySet().iterator();
 
-        for (Entry<ResourceKey<Recipe<?>>> entry : this.recipesUsed.reference2IntEntrySet()) {
-            world.recipeAccess().byKey(entry.getKey()).ifPresent(recipe -> {
-                list.add((RecipeHolder<?>)recipe);
-                createExperience(world, pos, entry.getIntValue(), ((AbstractCookingRecipe)recipe.value()).experience());
+        while (objectiterator.hasNext()) {
+            Entry<ResourceKey<Recipe<?>>> entry = (Entry) objectiterator.next();
+
+            worldserver.recipeAccess().byKey(entry.getKey()).ifPresent((recipeholder) -> { // CraftBukkit - decompile error
+                if (!(recipeholder.value() instanceof AbstractCookingRecipe)) return; // Paper - don't process non-cooking recipes
+                list.add(recipeholder);
+                AbstractFurnaceBlockEntity.createExperience(worldserver, vec3d, entry.getIntValue(), ((AbstractCookingRecipe) recipeholder.value()).experience(), blockposition, entityplayer, itemstack, amount); // CraftBukkit
             });
         }
 
         return list;
     }
 
-    private static void createExperience(ServerLevel world, Vec3 pos, int multiplier, float experience) {
-        int i = Mth.floor((float)multiplier * experience);
-        float f = Mth.frac((float)multiplier * experience);
-        if (f != 0.0F && Math.random() < (double)f) {
-            i++;
+    private static void createExperience(ServerLevel worldserver, Vec3 vec3d, int i, float f, BlockPos blockposition, net.minecraft.world.entity.player.Player entityhuman, ItemStack itemstack, int amount) { // CraftBukkit
+        int j = Mth.floor((float) i * f);
+        float f1 = Mth.frac((float) i * f);
+
+        if (f1 != 0.0F && Math.random() < (double) f1) {
+            ++j;
         }
 
-        ExperienceOrb.award(world, pos, i);
+        // CraftBukkit start - fire FurnaceExtractEvent / BlockExpEvent
+        BlockExpEvent event;
+        if (amount != 0) {
+            event = new FurnaceExtractEvent((Player) entityhuman.getBukkitEntity(), CraftBlock.at(worldserver, blockposition), CraftItemType.minecraftToBukkit(itemstack.getItem()), amount, j);
+        } else {
+            event = new BlockExpEvent(CraftBlock.at(worldserver, blockposition), j);
+        }
+        worldserver.getCraftServer().getPluginManager().callEvent(event);
+        j = event.getExpToDrop();
+        // CraftBukkit end
+
+        ExperienceOrb.award(worldserver, vec3d, j, org.bukkit.entity.ExperienceOrb.SpawnReason.FURNACE, entityhuman); // Paper
     }
 
     @Override
     public void fillStackedContents(StackedItemContents finder) {
-        for (ItemStack itemStack : this.items) {
-            finder.accountStack(itemStack);
-        }
+        // Paper start - don't account fuel stack (fixes MC-243057)
+        finder.accountStack(this.items.get(SLOT_INPUT));
+        finder.accountStack(this.items.get(SLOT_RESULT));
+        // Paper end
+
     }
 }
