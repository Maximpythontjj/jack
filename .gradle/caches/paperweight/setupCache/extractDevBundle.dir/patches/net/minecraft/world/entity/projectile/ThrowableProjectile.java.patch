--- a/net/minecraft/world/entity/projectile/ThrowableProjectile.java
+++ b/net/minecraft/world/entity/projectile/ThrowableProjectile.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.entity.projectile;
 
+import java.util.Iterator;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.world.entity.EntityType;
@@ -10,6 +11,7 @@
 import net.minecraft.world.phys.Vec3;
 
 public abstract class ThrowableProjectile extends Projectile {
+
     private static final float MIN_CAMERA_DISTANCE_SQUARED = 12.25F;
 
     protected ThrowableProjectile(EntityType<? extends ThrowableProjectile> type, Level world) {
@@ -23,16 +25,17 @@
 
     @Override
     public boolean shouldRenderAtSqrDistance(double distance) {
-        if (this.tickCount < 2 && distance < 12.25) {
+        if (this.tickCount < 2 && distance < 12.25D) {
             return false;
         } else {
-            double d = this.getBoundingBox().getSize() * 4.0;
-            if (Double.isNaN(d)) {
-                d = 4.0;
+            double d1 = this.getBoundingBox().getSize() * 4.0D;
+
+            if (Double.isNaN(d1)) {
+                d1 = 4.0D;
             }
 
-            d *= 64.0;
-            return distance < d * d;
+            d1 *= 64.0D;
+            return distance < d1 * d1;
         }
     }
 
@@ -46,55 +49,63 @@
         this.handleFirstTickBubbleColumn();
         this.applyGravity();
         this.applyInertia();
-        HitResult hitResult = ProjectileUtil.getHitResultOnMoveVector(this, this::canHitEntity);
-        Vec3 vec3;
-        if (hitResult.getType() != HitResult.Type.MISS) {
-            vec3 = hitResult.getLocation();
+        HitResult movingobjectposition = ProjectileUtil.getHitResultOnMoveVector(this, this::canHitEntity);
+        Vec3 vec3d;
+
+        if (movingobjectposition.getType() != HitResult.Type.MISS) {
+            vec3d = movingobjectposition.getLocation();
         } else {
-            vec3 = this.position().add(this.getDeltaMovement());
+            vec3d = this.position().add(this.getDeltaMovement());
         }
 
-        this.setPos(vec3);
+        this.setPos(vec3d);
         this.updateRotation();
         this.applyEffectsFromBlocks();
         super.tick();
-        if (hitResult.getType() != HitResult.Type.MISS && this.isAlive()) {
-            this.hitTargetOrDeflectSelf(hitResult);
+        if (movingobjectposition.getType() != HitResult.Type.MISS && this.isAlive()) {
+            this.preHitTargetOrDeflectSelf(movingobjectposition); // CraftBukkit - projectile hit event
         }
+
     }
 
     private void applyInertia() {
-        Vec3 vec3 = this.getDeltaMovement();
-        Vec3 vec32 = this.position();
-        float g;
+        Vec3 vec3d = this.getDeltaMovement();
+        Vec3 vec3d1 = this.position();
+        float f;
+
         if (this.isInWater()) {
-            for (int i = 0; i < 4; i++) {
-                float f = 0.25F;
-                this.level()
-                    .addParticle(ParticleTypes.BUBBLE, vec32.x - vec3.x * 0.25, vec32.y - vec3.y * 0.25, vec32.z - vec3.z * 0.25, vec3.x, vec3.y, vec3.z);
+            for (int i = 0; i < 4; ++i) {
+                float f1 = 0.25F;
+
+                this.level().addParticle(ParticleTypes.BUBBLE, vec3d1.x - vec3d.x * 0.25D, vec3d1.y - vec3d.y * 0.25D, vec3d1.z - vec3d.z * 0.25D, vec3d.x, vec3d.y, vec3d.z);
             }
 
-            g = 0.8F;
+            f = 0.8F;
         } else {
-            g = 0.99F;
+            f = 0.99F;
         }
 
-        this.setDeltaMovement(vec3.scale((double)g));
+        this.setDeltaMovement(vec3d.scale((double) f));
     }
 
     private void handleFirstTickBubbleColumn() {
         if (this.firstTick) {
-            for (BlockPos blockPos : BlockPos.betweenClosed(this.getBoundingBox())) {
-                BlockState blockState = this.level().getBlockState(blockPos);
-                if (blockState.is(Blocks.BUBBLE_COLUMN)) {
-                    blockState.entityInside(this.level(), blockPos, this);
+            Iterator iterator = BlockPos.betweenClosed(this.getBoundingBox()).iterator();
+
+            while (iterator.hasNext()) {
+                BlockPos blockposition = (BlockPos) iterator.next();
+                BlockState iblockdata = this.level().getBlockState(blockposition);
+
+                if (iblockdata.is(Blocks.BUBBLE_COLUMN)) {
+                    iblockdata.entityInside(this.level(), blockposition, this);
                 }
             }
         }
+
     }
 
     @Override
     protected double getDefaultGravity() {
-        return 0.03;
+        return 0.03D;
     }
 }
